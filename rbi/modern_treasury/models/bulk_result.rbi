# typed: strong

module ModernTreasury
  module Models
    class BulkResult < ModernTreasury::Internal::Type::BaseModel
      sig { returns(String) }
      attr_accessor :id

      sig { returns(Time) }
      attr_accessor :created_at

      # An object with type as indicated by `entity_type`. This is the result object
      # that is generated by performing the requested action on the provided input
      # `request_params`.
      sig do
        returns(
          T.any(
            ModernTreasury::Models::PaymentOrder,
            ModernTreasury::Models::ExpectedPayment,
            ModernTreasury::Models::LedgerTransaction,
            ModernTreasury::Models::Transaction,
            ModernTreasury::Models::BulkResult::Entity::BulkError
          )
        )
      end
      attr_accessor :entity

      # Unique identifier for the result entity object.
      sig { returns(String) }
      attr_accessor :entity_id

      # The type of the result entity object. For a successful bulk result, this is the
      # same as the `resource_type` of the bulk request. For a failed bulk result, this
      # is always bulk_error
      sig { returns(ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol) }
      attr_accessor :entity_type

      # This field will be true if this object exists in the live environment or false
      # if it exists in the test environment.
      sig { returns(T::Boolean) }
      attr_accessor :live_mode

      sig { returns(String) }
      attr_accessor :object

      # Unique identifier for the request that created this bulk result. This is the ID
      # of the bulk request when `request_type` is bulk_request
      sig { returns(String) }
      attr_accessor :request_id

      # An optional object that contains the provided input params for the request that
      # created this result. This is an item in the `resources` array for the
      # bulk_request
      sig { returns(T.nilable(T::Hash[Symbol, String])) }
      attr_accessor :request_params

      # The type of the request that created this result. bulk_request is the only
      # supported `request_type`
      sig { returns(ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol) }
      attr_accessor :request_type

      # One of successful or failed.
      sig { returns(ModernTreasury::Models::BulkResult::Status::TaggedSymbol) }
      attr_accessor :status

      sig { returns(Time) }
      attr_accessor :updated_at

      sig do
        params(
          id: String,
          created_at: Time,
          entity: T.any(
            ModernTreasury::Models::PaymentOrder,
            ModernTreasury::Internal::AnyHash,
            ModernTreasury::Models::ExpectedPayment,
            ModernTreasury::Models::LedgerTransaction,
            ModernTreasury::Models::Transaction,
            ModernTreasury::Models::BulkResult::Entity::BulkError
          ),
          entity_id: String,
          entity_type: ModernTreasury::Models::BulkResult::EntityType::OrSymbol,
          live_mode: T::Boolean,
          object: String,
          request_id: String,
          request_params: T.nilable(T::Hash[Symbol, String]),
          request_type: ModernTreasury::Models::BulkResult::RequestType::OrSymbol,
          status: ModernTreasury::Models::BulkResult::Status::OrSymbol,
          updated_at: Time
        )
          .returns(T.attached_class)
      end
      def self.new(
        id:,
        created_at:,
        # An object with type as indicated by `entity_type`. This is the result object
        # that is generated by performing the requested action on the provided input
        # `request_params`.
        entity:,
        # Unique identifier for the result entity object.
        entity_id:,
        # The type of the result entity object. For a successful bulk result, this is the
        # same as the `resource_type` of the bulk request. For a failed bulk result, this
        # is always bulk_error
        entity_type:,
        # This field will be true if this object exists in the live environment or false
        # if it exists in the test environment.
        live_mode:,
        object:,
        # Unique identifier for the request that created this bulk result. This is the ID
        # of the bulk request when `request_type` is bulk_request
        request_id:,
        # An optional object that contains the provided input params for the request that
        # created this result. This is an item in the `resources` array for the
        # bulk_request
        request_params:,
        # The type of the request that created this result. bulk_request is the only
        # supported `request_type`
        request_type:,
        # One of successful or failed.
        status:,
        updated_at:
      ); end
      sig do
        override
          .returns(
            {
              id: String,
              created_at: Time,
              entity: T.any(
                ModernTreasury::Models::PaymentOrder,
                ModernTreasury::Models::ExpectedPayment,
                ModernTreasury::Models::LedgerTransaction,
                ModernTreasury::Models::Transaction,
                ModernTreasury::Models::BulkResult::Entity::BulkError
              ),
              entity_id: String,
              entity_type: ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol,
              live_mode: T::Boolean,
              object: String,
              request_id: String,
              request_params: T.nilable(T::Hash[Symbol, String]),
              request_type: ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol,
              status: ModernTreasury::Models::BulkResult::Status::TaggedSymbol,
              updated_at: Time
            }
          )
      end
      def to_hash; end

      # An object with type as indicated by `entity_type`. This is the result object
      # that is generated by performing the requested action on the provided input
      # `request_params`.
      module Entity
        extend ModernTreasury::Internal::Type::Union

        class BulkError < ModernTreasury::Internal::Type::BaseModel
          sig { returns(String) }
          attr_accessor :id

          sig { returns(Time) }
          attr_accessor :created_at

          # This field will be true if this object exists in the live environment or false
          # if it exists in the test environment.
          sig { returns(T::Boolean) }
          attr_accessor :live_mode

          sig { returns(String) }
          attr_accessor :object

          sig { returns(T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError]) }
          attr_accessor :request_errors

          sig { returns(Time) }
          attr_accessor :updated_at

          sig do
            params(
              id: String,
              created_at: Time,
              live_mode: T::Boolean,
              object: String,
              request_errors: T::Array[
                T.any(
                  ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError,
                  ModernTreasury::Internal::AnyHash
                )
              ],
              updated_at: Time
            )
              .returns(T.attached_class)
          end
          def self.new(
            id:,
            created_at:,
            # This field will be true if this object exists in the live environment or false
            # if it exists in the test environment.
            live_mode:,
            object:,
            request_errors:,
            updated_at:
          ); end
          sig do
            override
              .returns(
                {
                  id: String,
                  created_at: Time,
                  live_mode: T::Boolean,
                  object: String,
                  request_errors: T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError],
                  updated_at: Time
                }
              )
          end
          def to_hash; end

          class RequestError < ModernTreasury::Internal::Type::BaseModel
            sig { returns(T.nilable(String)) }
            attr_reader :code

            sig { params(code: String).void }
            attr_writer :code

            sig { returns(T.nilable(String)) }
            attr_reader :message

            sig { params(message: String).void }
            attr_writer :message

            sig { returns(T.nilable(String)) }
            attr_reader :parameter

            sig { params(parameter: String).void }
            attr_writer :parameter

            sig { params(code: String, message: String, parameter: String).returns(T.attached_class) }
            def self.new(code: nil, message: nil, parameter: nil); end

            sig { override.returns({code: String, message: String, parameter: String}) }
            def to_hash; end
          end
        end

        sig do
          override
            .returns(
              [ModernTreasury::Models::PaymentOrder, ModernTreasury::Models::ExpectedPayment, ModernTreasury::Models::LedgerTransaction, ModernTreasury::Models::Transaction, ModernTreasury::Models::BulkResult::Entity::BulkError]
            )
        end
        def self.variants; end
      end

      # The type of the result entity object. For a successful bulk result, this is the
      # same as the `resource_type` of the bulk request. For a failed bulk result, this
      # is always bulk_error
      module EntityType
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, ModernTreasury::Models::BulkResult::EntityType) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        PAYMENT_ORDER = T.let(:payment_order, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        LEDGER_ACCOUNT = T.let(:ledger_account, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        LEDGER_TRANSACTION =
          T.let(:ledger_transaction, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        EXPECTED_PAYMENT = T.let(:expected_payment, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        TRANSACTION = T.let(:transaction, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        ENTITY_LINK = T.let(:entity_link, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        BULK_ERROR = T.let(:bulk_error, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)

        sig { override.returns(T::Array[ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol]) }
        def self.values; end
      end

      # The type of the request that created this result. bulk_request is the only
      # supported `request_type`
      module RequestType
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, ModernTreasury::Models::BulkResult::RequestType) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        BULK_REQUEST = T.let(:bulk_request, ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol)

        sig { override.returns(T::Array[ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol]) }
        def self.values; end
      end

      # One of successful or failed.
      module Status
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, ModernTreasury::Models::BulkResult::Status) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        PENDING = T.let(:pending, ModernTreasury::Models::BulkResult::Status::TaggedSymbol)
        SUCCESSFUL = T.let(:successful, ModernTreasury::Models::BulkResult::Status::TaggedSymbol)
        FAILED = T.let(:failed, ModernTreasury::Models::BulkResult::Status::TaggedSymbol)

        sig { override.returns(T::Array[ModernTreasury::Models::BulkResult::Status::TaggedSymbol]) }
        def self.values; end
      end
    end
  end
end
