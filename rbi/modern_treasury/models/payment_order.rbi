# typed: strong

module ModernTreasury
  module Models
    class PaymentOrder < ModernTreasury::Internal::Type::BaseModel
      OrHash =
        T.type_alias do
          T.any(ModernTreasury::PaymentOrder, ModernTreasury::Internal::AnyHash)
        end

      sig { returns(String) }
      attr_accessor :id

      sig { returns(ModernTreasury::PaymentOrder::Accounting) }
      attr_reader :accounting

      sig do
        params(
          accounting: ModernTreasury::PaymentOrder::Accounting::OrHash
        ).void
      end
      attr_writer :accounting

      # The ID of one of your accounting categories. Note that these will only be
      # accessible if your accounting system has been connected.
      sig { returns(T.nilable(String)) }
      attr_accessor :accounting_category_id

      # The ID of one of your accounting ledger classes. Note that these will only be
      # accessible if your accounting system has been connected.
      sig { returns(T.nilable(String)) }
      attr_accessor :accounting_ledger_class_id

      # Value in specified currency's smallest unit. e.g. $10 would be represented as
      # 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.
      sig { returns(Integer) }
      attr_accessor :amount

      # The party that will pay the fees for the payment order. Only applies to wire
      # payment orders. Can be one of shared, sender, or receiver, which correspond
      # respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
      sig do
        returns(
          T.nilable(ModernTreasury::PaymentOrder::ChargeBearer::TaggedSymbol)
        )
      end
      attr_accessor :charge_bearer

      # If the payment order is tied to a specific Counterparty, their id will appear,
      # otherwise `null`.
      sig { returns(T.nilable(String)) }
      attr_accessor :counterparty_id

      sig { returns(Time) }
      attr_accessor :created_at

      # Defaults to the currency of the originating account.
      sig { returns(ModernTreasury::Currency::TaggedSymbol) }
      attr_accessor :currency

      # If the payment order's status is `returned`, this will include the return
      # object's data.
      sig { returns(T.nilable(ModernTreasury::ReturnObject)) }
      attr_reader :current_return

      sig do
        params(
          current_return: T.nilable(ModernTreasury::ReturnObject::OrHash)
        ).void
      end
      attr_writer :current_return

      # An optional description for internal use.
      sig { returns(T.nilable(String)) }
      attr_accessor :description

      # One of `credit`, `debit`. Describes the direction money is flowing in the
      # transaction. A `credit` moves money from your account to someone else's. A
      # `debit` pulls money from someone else's account to your own. Note that wire,
      # rtp, and check payments will always be `credit`.
      sig { returns(ModernTreasury::PaymentOrder::Direction::TaggedSymbol) }
      attr_accessor :direction

      # Date transactions are to be posted to the participants' account. Defaults to the
      # current business day or the next business day if the current day is a bank
      # holiday or weekend. Format: yyyy-mm-dd.
      sig { returns(Date) }
      attr_accessor :effective_date

      # RFP payments require an expires_at. This value must be past the effective_date.
      sig { returns(T.nilable(Time)) }
      attr_accessor :expires_at

      # If present, indicates a specific foreign exchange contract number that has been
      # generated by your financial institution.
      sig { returns(T.nilable(String)) }
      attr_accessor :foreign_exchange_contract

      # Indicates the type of FX transfer to initiate, can be either
      # `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
      # currency matches the originating account currency.
      sig do
        returns(
          T.nilable(
            ModernTreasury::PaymentOrder::ForeignExchangeIndicator::TaggedSymbol
          )
        )
      end
      attr_accessor :foreign_exchange_indicator

      # Associated serialized foreign exchange rate information.
      sig do
        returns(T.nilable(ModernTreasury::PaymentOrder::ForeignExchangeRate))
      end
      attr_reader :foreign_exchange_rate

      sig do
        params(
          foreign_exchange_rate:
            T.nilable(ModernTreasury::PaymentOrder::ForeignExchangeRate::OrHash)
        ).void
      end
      attr_writer :foreign_exchange_rate

      # The ID of the ledger transaction linked to the payment order.
      sig { returns(T.nilable(String)) }
      attr_accessor :ledger_transaction_id

      # This field will be true if this object exists in the live environment or false
      # if it exists in the test environment.
      sig { returns(T::Boolean) }
      attr_accessor :live_mode

      # Additional data represented as key-value pairs. Both the key and value must be
      # strings.
      sig { returns(T::Hash[Symbol, String]) }
      attr_accessor :metadata

      # A boolean to determine if NSF Protection is enabled for this payment order. Note
      # that this setting must also be turned on in your organization settings page.
      sig { returns(T::Boolean) }
      attr_accessor :nsf_protected

      sig { returns(String) }
      attr_accessor :object

      # The ID of one of your organization's internal accounts.
      sig { returns(String) }
      attr_accessor :originating_account_id

      # If present, this will replace your default company name on receiver's bank
      # statement. This field can only be used for ACH payments currently. For ACH, only
      # the first 16 characters of this string will be used. Any additional characters
      # will be truncated.
      sig { returns(T.nilable(String)) }
      attr_accessor :originating_party_name

      # Either `normal` or `high`. For ACH and EFT payments, `high` represents a
      # same-day ACH or EFT transfer, respectively. For check payments, `high` can mean
      # an overnight check rather than standard mail.
      sig { returns(ModernTreasury::PaymentOrder::Priority::TaggedSymbol) }
      attr_accessor :priority

      # If present, Modern Treasury will not process the payment until after this time.
      # If `process_after` is past the cutoff for `effective_date`, `process_after` will
      # take precedence and `effective_date` will automatically update to reflect the
      # earliest possible sending date after `process_after`. Format is ISO8601
      # timestamp.
      sig { returns(T.nilable(Time)) }
      attr_accessor :process_after

      # For `wire`, this is usually the purpose which is transmitted via the
      # "InstrForDbtrAgt" field in the ISO20022 file. For `eft`, this field is the 3
      # digit CPA Code that will be attached to the payment.
      sig { returns(T.nilable(String)) }
      attr_accessor :purpose

      # The receiving account ID. Can be an `external_account` or `internal_account`.
      sig { returns(String) }
      attr_accessor :receiving_account_id

      sig do
        returns(
          ModernTreasury::PaymentOrder::ReceivingAccountType::TaggedSymbol
        )
      end
      attr_accessor :receiving_account_type

      sig { returns(T::Array[ModernTreasury::PaymentOrder::ReferenceNumber]) }
      attr_accessor :reference_numbers

      # For `ach`, this field will be passed through on an addenda record. For `wire`
      # payments the field will be passed through as the "Originator to Beneficiary
      # Information", also known as OBI or Fedwire tag 6000.
      sig { returns(T.nilable(String)) }
      attr_accessor :remittance_information

      # Send an email to the counterparty when the payment order is sent to the bank. If
      # `null`, `send_remittance_advice` on the Counterparty is used.
      sig { returns(T.nilable(T::Boolean)) }
      attr_accessor :send_remittance_advice

      # An optional descriptor which will appear in the receiver's statement. For
      # `check` payments this field will be used as the memo line. For `ach` the maximum
      # length is 10 characters. Note that for ACH payments, the name on your bank
      # account will be included automatically by the bank, so you can use the
      # characters for other useful information. For `eft` the maximum length is 15
      # characters.
      sig { returns(T.nilable(String)) }
      attr_accessor :statement_descriptor

      # The current status of the payment order.
      sig { returns(ModernTreasury::PaymentOrder::Status::TaggedSymbol) }
      attr_accessor :status

      # An additional layer of classification for the type of payment order you are
      # doing. This field is only used for `ach` payment orders currently. For `ach`
      # payment orders, the `subtype` represents the SEC code. We currently support
      # `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.
      sig do
        returns(T.nilable(ModernTreasury::PaymentOrderSubtype::TaggedSymbol))
      end
      attr_accessor :subtype

      # The IDs of all the transactions associated to this payment order. Usually, you
      # will only have a single transaction ID. However, if a payment order initially
      # results in a Return, but gets redrafted and is later successfully completed, it
      # can have many transactions.
      sig { returns(T::Array[String]) }
      attr_accessor :transaction_ids

      # One of `ach`, `se_bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
      # `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`,
      # `nz_national_clearing_code`, `sic`, `signet`, `provexchange`, `zengin`.
      sig { returns(ModernTreasury::PaymentOrderType::TaggedSymbol) }
      attr_accessor :type

      # The account to which the originating of this payment should be attributed to.
      # Can be a `virtual_account` or `internal_account`.
      sig do
        returns(
          T.nilable(
            ModernTreasury::PaymentOrder::UltimateOriginatingAccount::Variants
          )
        )
      end
      attr_accessor :ultimate_originating_account

      # The ultimate originating account ID. Can be a `virtual_account` or
      # `internal_account`.
      sig { returns(T.nilable(String)) }
      attr_accessor :ultimate_originating_account_id

      sig do
        returns(
          T.nilable(
            ModernTreasury::PaymentOrder::UltimateOriginatingAccountType::TaggedSymbol
          )
        )
      end
      attr_accessor :ultimate_originating_account_type

      # Identifier of the ultimate originator of the payment order.
      sig { returns(T.nilable(String)) }
      attr_accessor :ultimate_originating_party_identifier

      # Name of the ultimate originator of the payment order.
      sig { returns(T.nilable(String)) }
      attr_accessor :ultimate_originating_party_name

      sig { returns(T.nilable(String)) }
      attr_accessor :ultimate_receiving_party_identifier

      sig { returns(T.nilable(String)) }
      attr_accessor :ultimate_receiving_party_name

      sig { returns(Time) }
      attr_accessor :updated_at

      # Additional vendor specific fields for this payment. Data must be represented as
      # key-value pairs.
      sig { returns(T.nilable(T.anything)) }
      attr_accessor :vendor_attributes

      # This field will be populated if a vendor failure occurs. Logic shouldn't be
      # built on its value as it is free-form.
      sig { returns(T.nilable(String)) }
      attr_accessor :vendor_failure_reason

      sig do
        params(
          id: String,
          accounting: ModernTreasury::PaymentOrder::Accounting::OrHash,
          accounting_category_id: T.nilable(String),
          accounting_ledger_class_id: T.nilable(String),
          amount: Integer,
          charge_bearer:
            T.nilable(ModernTreasury::PaymentOrder::ChargeBearer::OrSymbol),
          counterparty_id: T.nilable(String),
          created_at: Time,
          currency: ModernTreasury::Currency::OrSymbol,
          current_return: T.nilable(ModernTreasury::ReturnObject::OrHash),
          description: T.nilable(String),
          direction: ModernTreasury::PaymentOrder::Direction::OrSymbol,
          effective_date: Date,
          expires_at: T.nilable(Time),
          foreign_exchange_contract: T.nilable(String),
          foreign_exchange_indicator:
            T.nilable(
              ModernTreasury::PaymentOrder::ForeignExchangeIndicator::OrSymbol
            ),
          foreign_exchange_rate:
            T.nilable(
              ModernTreasury::PaymentOrder::ForeignExchangeRate::OrHash
            ),
          ledger_transaction_id: T.nilable(String),
          live_mode: T::Boolean,
          metadata: T::Hash[Symbol, String],
          nsf_protected: T::Boolean,
          object: String,
          originating_account_id: String,
          originating_party_name: T.nilable(String),
          priority: ModernTreasury::PaymentOrder::Priority::OrSymbol,
          process_after: T.nilable(Time),
          purpose: T.nilable(String),
          receiving_account_id: String,
          receiving_account_type:
            ModernTreasury::PaymentOrder::ReceivingAccountType::OrSymbol,
          reference_numbers:
            T::Array[ModernTreasury::PaymentOrder::ReferenceNumber::OrHash],
          remittance_information: T.nilable(String),
          send_remittance_advice: T.nilable(T::Boolean),
          statement_descriptor: T.nilable(String),
          status: ModernTreasury::PaymentOrder::Status::OrSymbol,
          subtype: T.nilable(ModernTreasury::PaymentOrderSubtype::OrSymbol),
          transaction_ids: T::Array[String],
          type: ModernTreasury::PaymentOrderType::OrSymbol,
          ultimate_originating_account:
            T.nilable(
              T.any(
                ModernTreasury::VirtualAccount::OrHash,
                ModernTreasury::InternalAccount::OrHash
              )
            ),
          ultimate_originating_account_id: T.nilable(String),
          ultimate_originating_account_type:
            T.nilable(
              ModernTreasury::PaymentOrder::UltimateOriginatingAccountType::OrSymbol
            ),
          ultimate_originating_party_identifier: T.nilable(String),
          ultimate_originating_party_name: T.nilable(String),
          ultimate_receiving_party_identifier: T.nilable(String),
          ultimate_receiving_party_name: T.nilable(String),
          updated_at: Time,
          vendor_attributes: T.nilable(T.anything),
          vendor_failure_reason: T.nilable(String)
        ).returns(T.attached_class)
      end
      def self.new(
        id:,
        accounting:,
        # The ID of one of your accounting categories. Note that these will only be
        # accessible if your accounting system has been connected.
        accounting_category_id:,
        # The ID of one of your accounting ledger classes. Note that these will only be
        # accessible if your accounting system has been connected.
        accounting_ledger_class_id:,
        # Value in specified currency's smallest unit. e.g. $10 would be represented as
        # 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.
        amount:,
        # The party that will pay the fees for the payment order. Only applies to wire
        # payment orders. Can be one of shared, sender, or receiver, which correspond
        # respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
        charge_bearer:,
        # If the payment order is tied to a specific Counterparty, their id will appear,
        # otherwise `null`.
        counterparty_id:,
        created_at:,
        # Defaults to the currency of the originating account.
        currency:,
        # If the payment order's status is `returned`, this will include the return
        # object's data.
        current_return:,
        # An optional description for internal use.
        description:,
        # One of `credit`, `debit`. Describes the direction money is flowing in the
        # transaction. A `credit` moves money from your account to someone else's. A
        # `debit` pulls money from someone else's account to your own. Note that wire,
        # rtp, and check payments will always be `credit`.
        direction:,
        # Date transactions are to be posted to the participants' account. Defaults to the
        # current business day or the next business day if the current day is a bank
        # holiday or weekend. Format: yyyy-mm-dd.
        effective_date:,
        # RFP payments require an expires_at. This value must be past the effective_date.
        expires_at:,
        # If present, indicates a specific foreign exchange contract number that has been
        # generated by your financial institution.
        foreign_exchange_contract:,
        # Indicates the type of FX transfer to initiate, can be either
        # `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
        # currency matches the originating account currency.
        foreign_exchange_indicator:,
        # Associated serialized foreign exchange rate information.
        foreign_exchange_rate:,
        # The ID of the ledger transaction linked to the payment order.
        ledger_transaction_id:,
        # This field will be true if this object exists in the live environment or false
        # if it exists in the test environment.
        live_mode:,
        # Additional data represented as key-value pairs. Both the key and value must be
        # strings.
        metadata:,
        # A boolean to determine if NSF Protection is enabled for this payment order. Note
        # that this setting must also be turned on in your organization settings page.
        nsf_protected:,
        object:,
        # The ID of one of your organization's internal accounts.
        originating_account_id:,
        # If present, this will replace your default company name on receiver's bank
        # statement. This field can only be used for ACH payments currently. For ACH, only
        # the first 16 characters of this string will be used. Any additional characters
        # will be truncated.
        originating_party_name:,
        # Either `normal` or `high`. For ACH and EFT payments, `high` represents a
        # same-day ACH or EFT transfer, respectively. For check payments, `high` can mean
        # an overnight check rather than standard mail.
        priority:,
        # If present, Modern Treasury will not process the payment until after this time.
        # If `process_after` is past the cutoff for `effective_date`, `process_after` will
        # take precedence and `effective_date` will automatically update to reflect the
        # earliest possible sending date after `process_after`. Format is ISO8601
        # timestamp.
        process_after:,
        # For `wire`, this is usually the purpose which is transmitted via the
        # "InstrForDbtrAgt" field in the ISO20022 file. For `eft`, this field is the 3
        # digit CPA Code that will be attached to the payment.
        purpose:,
        # The receiving account ID. Can be an `external_account` or `internal_account`.
        receiving_account_id:,
        receiving_account_type:,
        reference_numbers:,
        # For `ach`, this field will be passed through on an addenda record. For `wire`
        # payments the field will be passed through as the "Originator to Beneficiary
        # Information", also known as OBI or Fedwire tag 6000.
        remittance_information:,
        # Send an email to the counterparty when the payment order is sent to the bank. If
        # `null`, `send_remittance_advice` on the Counterparty is used.
        send_remittance_advice:,
        # An optional descriptor which will appear in the receiver's statement. For
        # `check` payments this field will be used as the memo line. For `ach` the maximum
        # length is 10 characters. Note that for ACH payments, the name on your bank
        # account will be included automatically by the bank, so you can use the
        # characters for other useful information. For `eft` the maximum length is 15
        # characters.
        statement_descriptor:,
        # The current status of the payment order.
        status:,
        # An additional layer of classification for the type of payment order you are
        # doing. This field is only used for `ach` payment orders currently. For `ach`
        # payment orders, the `subtype` represents the SEC code. We currently support
        # `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.
        subtype:,
        # The IDs of all the transactions associated to this payment order. Usually, you
        # will only have a single transaction ID. However, if a payment order initially
        # results in a Return, but gets redrafted and is later successfully completed, it
        # can have many transactions.
        transaction_ids:,
        # One of `ach`, `se_bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
        # `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`,
        # `nz_national_clearing_code`, `sic`, `signet`, `provexchange`, `zengin`.
        type:,
        # The account to which the originating of this payment should be attributed to.
        # Can be a `virtual_account` or `internal_account`.
        ultimate_originating_account:,
        # The ultimate originating account ID. Can be a `virtual_account` or
        # `internal_account`.
        ultimate_originating_account_id:,
        ultimate_originating_account_type:,
        # Identifier of the ultimate originator of the payment order.
        ultimate_originating_party_identifier:,
        # Name of the ultimate originator of the payment order.
        ultimate_originating_party_name:,
        ultimate_receiving_party_identifier:,
        ultimate_receiving_party_name:,
        updated_at:,
        # Additional vendor specific fields for this payment. Data must be represented as
        # key-value pairs.
        vendor_attributes:,
        # This field will be populated if a vendor failure occurs. Logic shouldn't be
        # built on its value as it is free-form.
        vendor_failure_reason:
      )
      end

      sig do
        override.returns(
          {
            id: String,
            accounting: ModernTreasury::PaymentOrder::Accounting,
            accounting_category_id: T.nilable(String),
            accounting_ledger_class_id: T.nilable(String),
            amount: Integer,
            charge_bearer:
              T.nilable(
                ModernTreasury::PaymentOrder::ChargeBearer::TaggedSymbol
              ),
            counterparty_id: T.nilable(String),
            created_at: Time,
            currency: ModernTreasury::Currency::TaggedSymbol,
            current_return: T.nilable(ModernTreasury::ReturnObject),
            description: T.nilable(String),
            direction: ModernTreasury::PaymentOrder::Direction::TaggedSymbol,
            effective_date: Date,
            expires_at: T.nilable(Time),
            foreign_exchange_contract: T.nilable(String),
            foreign_exchange_indicator:
              T.nilable(
                ModernTreasury::PaymentOrder::ForeignExchangeIndicator::TaggedSymbol
              ),
            foreign_exchange_rate:
              T.nilable(ModernTreasury::PaymentOrder::ForeignExchangeRate),
            ledger_transaction_id: T.nilable(String),
            live_mode: T::Boolean,
            metadata: T::Hash[Symbol, String],
            nsf_protected: T::Boolean,
            object: String,
            originating_account_id: String,
            originating_party_name: T.nilable(String),
            priority: ModernTreasury::PaymentOrder::Priority::TaggedSymbol,
            process_after: T.nilable(Time),
            purpose: T.nilable(String),
            receiving_account_id: String,
            receiving_account_type:
              ModernTreasury::PaymentOrder::ReceivingAccountType::TaggedSymbol,
            reference_numbers:
              T::Array[ModernTreasury::PaymentOrder::ReferenceNumber],
            remittance_information: T.nilable(String),
            send_remittance_advice: T.nilable(T::Boolean),
            statement_descriptor: T.nilable(String),
            status: ModernTreasury::PaymentOrder::Status::TaggedSymbol,
            subtype:
              T.nilable(ModernTreasury::PaymentOrderSubtype::TaggedSymbol),
            transaction_ids: T::Array[String],
            type: ModernTreasury::PaymentOrderType::TaggedSymbol,
            ultimate_originating_account:
              T.nilable(
                ModernTreasury::PaymentOrder::UltimateOriginatingAccount::Variants
              ),
            ultimate_originating_account_id: T.nilable(String),
            ultimate_originating_account_type:
              T.nilable(
                ModernTreasury::PaymentOrder::UltimateOriginatingAccountType::TaggedSymbol
              ),
            ultimate_originating_party_identifier: T.nilable(String),
            ultimate_originating_party_name: T.nilable(String),
            ultimate_receiving_party_identifier: T.nilable(String),
            ultimate_receiving_party_name: T.nilable(String),
            updated_at: Time,
            vendor_attributes: T.nilable(T.anything),
            vendor_failure_reason: T.nilable(String)
          }
        )
      end
      def to_hash
      end

      class Accounting < ModernTreasury::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              ModernTreasury::PaymentOrder::Accounting,
              ModernTreasury::Internal::AnyHash
            )
          end

        # The ID of one of your accounting categories. Note that these will only be
        # accessible if your accounting system has been connected.
        sig { returns(T.nilable(String)) }
        attr_accessor :account_id

        # The ID of one of the class objects in your accounting system. Class objects
        # track segments of your business independent of client or project. Note that
        # these will only be accessible if your accounting system has been connected.
        sig { returns(T.nilable(String)) }
        attr_accessor :class_id

        sig do
          params(
            account_id: T.nilable(String),
            class_id: T.nilable(String)
          ).returns(T.attached_class)
        end
        def self.new(
          # The ID of one of your accounting categories. Note that these will only be
          # accessible if your accounting system has been connected.
          account_id: nil,
          # The ID of one of the class objects in your accounting system. Class objects
          # track segments of your business independent of client or project. Note that
          # these will only be accessible if your accounting system has been connected.
          class_id: nil
        )
        end

        sig do
          override.returns(
            { account_id: T.nilable(String), class_id: T.nilable(String) }
          )
        end
        def to_hash
        end
      end

      # The party that will pay the fees for the payment order. Only applies to wire
      # payment orders. Can be one of shared, sender, or receiver, which correspond
      # respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
      module ChargeBearer
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, ModernTreasury::PaymentOrder::ChargeBearer)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        SHARED =
          T.let(
            :shared,
            ModernTreasury::PaymentOrder::ChargeBearer::TaggedSymbol
          )
        SENDER =
          T.let(
            :sender,
            ModernTreasury::PaymentOrder::ChargeBearer::TaggedSymbol
          )
        RECEIVER =
          T.let(
            :receiver,
            ModernTreasury::PaymentOrder::ChargeBearer::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[ModernTreasury::PaymentOrder::ChargeBearer::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # One of `credit`, `debit`. Describes the direction money is flowing in the
      # transaction. A `credit` moves money from your account to someone else's. A
      # `debit` pulls money from someone else's account to your own. Note that wire,
      # rtp, and check payments will always be `credit`.
      module Direction
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, ModernTreasury::PaymentOrder::Direction)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        CREDIT =
          T.let(:credit, ModernTreasury::PaymentOrder::Direction::TaggedSymbol)
        DEBIT =
          T.let(:debit, ModernTreasury::PaymentOrder::Direction::TaggedSymbol)

        sig do
          override.returns(
            T::Array[ModernTreasury::PaymentOrder::Direction::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # Indicates the type of FX transfer to initiate, can be either
      # `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
      # currency matches the originating account currency.
      module ForeignExchangeIndicator
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(
              Symbol,
              ModernTreasury::PaymentOrder::ForeignExchangeIndicator
            )
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        FIXED_TO_VARIABLE =
          T.let(
            :fixed_to_variable,
            ModernTreasury::PaymentOrder::ForeignExchangeIndicator::TaggedSymbol
          )
        VARIABLE_TO_FIXED =
          T.let(
            :variable_to_fixed,
            ModernTreasury::PaymentOrder::ForeignExchangeIndicator::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[
              ModernTreasury::PaymentOrder::ForeignExchangeIndicator::TaggedSymbol
            ]
          )
        end
        def self.values
        end
      end

      class ForeignExchangeRate < ModernTreasury::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              ModernTreasury::PaymentOrder::ForeignExchangeRate,
              ModernTreasury::Internal::AnyHash
            )
          end

        # Amount in the lowest denomination of the `base_currency` to convert, often
        # called the "sell" amount.
        sig { returns(Integer) }
        attr_accessor :base_amount

        # Currency to convert, often called the "sell" currency.
        sig { returns(ModernTreasury::Currency::TaggedSymbol) }
        attr_accessor :base_currency

        # The exponent component of the rate. The decimal is calculated as `value` / (10 ^
        # `exponent`).
        sig { returns(Integer) }
        attr_accessor :exponent

        # A string representation of the rate.
        sig { returns(String) }
        attr_accessor :rate_string

        # Amount in the lowest denomination of the `target_currency`, often called the
        # "buy" amount.
        sig { returns(Integer) }
        attr_accessor :target_amount

        # Currency to convert the `base_currency` to, often called the "buy" currency.
        sig { returns(ModernTreasury::Currency::TaggedSymbol) }
        attr_accessor :target_currency

        # The whole number component of the rate. The decimal is calculated as `value` /
        # (10 ^ `exponent`).
        sig { returns(Integer) }
        attr_accessor :value

        # Associated serialized foreign exchange rate information.
        sig do
          params(
            base_amount: Integer,
            base_currency: ModernTreasury::Currency::OrSymbol,
            exponent: Integer,
            rate_string: String,
            target_amount: Integer,
            target_currency: ModernTreasury::Currency::OrSymbol,
            value: Integer
          ).returns(T.attached_class)
        end
        def self.new(
          # Amount in the lowest denomination of the `base_currency` to convert, often
          # called the "sell" amount.
          base_amount:,
          # Currency to convert, often called the "sell" currency.
          base_currency:,
          # The exponent component of the rate. The decimal is calculated as `value` / (10 ^
          # `exponent`).
          exponent:,
          # A string representation of the rate.
          rate_string:,
          # Amount in the lowest denomination of the `target_currency`, often called the
          # "buy" amount.
          target_amount:,
          # Currency to convert the `base_currency` to, often called the "buy" currency.
          target_currency:,
          # The whole number component of the rate. The decimal is calculated as `value` /
          # (10 ^ `exponent`).
          value:
        )
        end

        sig do
          override.returns(
            {
              base_amount: Integer,
              base_currency: ModernTreasury::Currency::TaggedSymbol,
              exponent: Integer,
              rate_string: String,
              target_amount: Integer,
              target_currency: ModernTreasury::Currency::TaggedSymbol,
              value: Integer
            }
          )
        end
        def to_hash
        end
      end

      # Either `normal` or `high`. For ACH and EFT payments, `high` represents a
      # same-day ACH or EFT transfer, respectively. For check payments, `high` can mean
      # an overnight check rather than standard mail.
      module Priority
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, ModernTreasury::PaymentOrder::Priority) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        HIGH =
          T.let(:high, ModernTreasury::PaymentOrder::Priority::TaggedSymbol)
        NORMAL =
          T.let(:normal, ModernTreasury::PaymentOrder::Priority::TaggedSymbol)

        sig do
          override.returns(
            T::Array[ModernTreasury::PaymentOrder::Priority::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      module ReceivingAccountType
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, ModernTreasury::PaymentOrder::ReceivingAccountType)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        INTERNAL_ACCOUNT =
          T.let(
            :internal_account,
            ModernTreasury::PaymentOrder::ReceivingAccountType::TaggedSymbol
          )
        EXTERNAL_ACCOUNT =
          T.let(
            :external_account,
            ModernTreasury::PaymentOrder::ReceivingAccountType::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[
              ModernTreasury::PaymentOrder::ReceivingAccountType::TaggedSymbol
            ]
          )
        end
        def self.values
        end
      end

      class ReferenceNumber < ModernTreasury::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              ModernTreasury::PaymentOrder::ReferenceNumber,
              ModernTreasury::Internal::AnyHash
            )
          end

        sig { returns(String) }
        attr_accessor :id

        sig { returns(Time) }
        attr_accessor :created_at

        # This field will be true if this object exists in the live environment or false
        # if it exists in the test environment.
        sig { returns(T::Boolean) }
        attr_accessor :live_mode

        sig { returns(String) }
        attr_accessor :object

        # The vendor reference number.
        sig { returns(String) }
        attr_accessor :reference_number

        # The type of the reference number. Referring to the vendor payment id.
        sig do
          returns(
            ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
          )
        end
        attr_accessor :reference_number_type

        sig { returns(Time) }
        attr_accessor :updated_at

        sig do
          params(
            id: String,
            created_at: Time,
            live_mode: T::Boolean,
            object: String,
            reference_number: String,
            reference_number_type:
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::OrSymbol,
            updated_at: Time
          ).returns(T.attached_class)
        end
        def self.new(
          id:,
          created_at:,
          # This field will be true if this object exists in the live environment or false
          # if it exists in the test environment.
          live_mode:,
          object:,
          # The vendor reference number.
          reference_number:,
          # The type of the reference number. Referring to the vendor payment id.
          reference_number_type:,
          updated_at:
        )
        end

        sig do
          override.returns(
            {
              id: String,
              created_at: Time,
              live_mode: T::Boolean,
              object: String,
              reference_number: String,
              reference_number_type:
                ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol,
              updated_at: Time
            }
          )
        end
        def to_hash
        end

        # The type of the reference number. Referring to the vendor payment id.
        module ReferenceNumberType
          extend ModernTreasury::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(
                Symbol,
                ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType
              )
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          ACH_ORIGINAL_TRACE_NUMBER =
            T.let(
              :ach_original_trace_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          ACH_TRACE_NUMBER =
            T.let(
              :ach_trace_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BANKPROV_PAYMENT_ACTIVITY_DATE =
            T.let(
              :bankprov_payment_activity_date,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BANKPROV_PAYMENT_ID =
            T.let(
              :bankprov_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BNK_DEV_PRENOTIFICATION_ID =
            T.let(
              :bnk_dev_prenotification_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BNK_DEV_TRANSFER_ID =
            T.let(
              :bnk_dev_transfer_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BOFA_END_TO_END_ID =
            T.let(
              :bofa_end_to_end_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BOFA_TRANSACTION_ID =
            T.let(
              :bofa_transaction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BRALE_TRANSFER_ID =
            T.let(
              :brale_transfer_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BRIDGE_DESTINATION_TRANSACTION_HASH =
            T.let(
              :bridge_destination_transaction_hash,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BRIDGE_SOURCE_TRANSACTION_HASH =
            T.let(
              :bridge_source_transaction_hash,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          BRIDGE_TRANSFER_ID =
            T.let(
              :bridge_transfer_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CHECK_NUMBER =
            T.let(
              :check_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CITIBANK_REFERENCE_NUMBER =
            T.let(
              :citibank_reference_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CITIBANK_WORLDLINK_CLEARING_SYSTEM_REFERENCE_NUMBER =
            T.let(
              :citibank_worldlink_clearing_system_reference_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          COLUMN_FX_QUOTE_ID =
            T.let(
              :column_fx_quote_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          COLUMN_REVERSAL_PAIR_TRANSFER_ID =
            T.let(
              :column_reversal_pair_transfer_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          COLUMN_TRANSFER_ID =
            T.let(
              :column_transfer_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CROSS_RIVER_PAYMENT_ID =
            T.let(
              :cross_river_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CROSS_RIVER_SERVICE_MESSAGE =
            T.let(
              :cross_river_service_message,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CROSS_RIVER_TRANSACTION_ID =
            T.let(
              :cross_river_transaction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CURRENCYCLOUD_CONVERSION_ID =
            T.let(
              :currencycloud_conversion_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          CURRENCYCLOUD_PAYMENT_ID =
            T.let(
              :currencycloud_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          DC_BANK_TRANSACTION_ID =
            T.let(
              :dc_bank_transaction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          DWOLLA_TRANSACTION_ID =
            T.let(
              :dwolla_transaction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          EFT_TRACE_NUMBER =
            T.let(
              :eft_trace_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          EVOLVE_TRANSACTION_ID =
            T.let(
              :evolve_transaction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          FEDWIRE_IMAD =
            T.let(
              :fedwire_imad,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          FEDWIRE_OMAD =
            T.let(
              :fedwire_omad,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          FIRST_REPUBLIC_INTERNAL_ID =
            T.let(
              :first_republic_internal_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          GOLDMAN_SACHS_COLLECTION_REQUEST_ID =
            T.let(
              :goldman_sachs_collection_request_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          GOLDMAN_SACHS_END_TO_END_ID =
            T.let(
              :goldman_sachs_end_to_end_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          GOLDMAN_SACHS_PAYMENT_REQUEST_ID =
            T.let(
              :goldman_sachs_payment_request_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          GOLDMAN_SACHS_REQUEST_ID =
            T.let(
              :goldman_sachs_request_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          GOLDMAN_SACHS_UNIQUE_PAYMENT_ID =
            T.let(
              :goldman_sachs_unique_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          INTERAC_MESSAGE_ID =
            T.let(
              :interac_message_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_CCN =
            T.let(
              :jpmc_ccn,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_CLEARING_SYSTEM_REFERENCE =
            T.let(
              :jpmc_clearing_system_reference,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_CUSTOMER_REFERENCE_ID =
            T.let(
              :jpmc_customer_reference_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_END_TO_END_ID =
            T.let(
              :jpmc_end_to_end_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_FIRM_ROOT_ID =
            T.let(
              :jpmc_firm_root_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_FX_TRN_ID =
            T.let(
              :jpmc_fx_trn_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_P3_ID =
            T.let(
              :jpmc_p3_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_PAYMENT_BATCH_ID =
            T.let(
              :jpmc_payment_batch_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_PAYMENT_INFORMATION_ID =
            T.let(
              :jpmc_payment_information_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_PAYMENT_RETURNED_DATETIME =
            T.let(
              :jpmc_payment_returned_datetime,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          JPMC_TRANSACTION_REFERENCE_NUMBER =
            T.let(
              :jpmc_transaction_reference_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          LOB_CHECK_ID =
            T.let(
              :lob_check_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          OTHER =
            T.let(
              :other,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PARTIAL_SWIFT_MIR =
            T.let(
              :partial_swift_mir,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PNC_CLEARING_REFERENCE =
            T.let(
              :pnc_clearing_reference,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PNC_INSTRUCTION_ID =
            T.let(
              :pnc_instruction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PNC_MULTIPAYMENT_ID =
            T.let(
              :pnc_multipayment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PNC_PAYMENT_TRACE_ID =
            T.let(
              :pnc_payment_trace_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PNC_REQUEST_FOR_PAYMENT_ID =
            T.let(
              :pnc_request_for_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          PNC_TRANSACTION_REFERENCE_NUMBER =
            T.let(
              :pnc_transaction_reference_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          RBC_WIRE_REFERENCE_ID =
            T.let(
              :rbc_wire_reference_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          RSPEC_VENDOR_PAYMENT_ID =
            T.let(
              :rspec_vendor_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          RTP_INSTRUCTION_ID =
            T.let(
              :rtp_instruction_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SIGNET_API_REFERENCE_ID =
            T.let(
              :signet_api_reference_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SIGNET_CONFIRMATION_ID =
            T.let(
              :signet_confirmation_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SIGNET_REQUEST_ID =
            T.let(
              :signet_request_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SILVERGATE_PAYMENT_ID =
            T.let(
              :silvergate_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SVB_END_TO_END_ID =
            T.let(
              :svb_end_to_end_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SVB_PAYMENT_ID =
            T.let(
              :svb_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SVB_TRANSACTION_CLEARED_FOR_SANCTIONS_REVIEW =
            T.let(
              :svb_transaction_cleared_for_sanctions_review,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SVB_TRANSACTION_HELD_FOR_SANCTIONS_REVIEW =
            T.let(
              :svb_transaction_held_for_sanctions_review,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SWIFT_MIR =
            T.let(
              :swift_mir,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          SWIFT_UETR =
            T.let(
              :swift_uetr,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          UMB_PRODUCT_PARTNER_ACCOUNT_NUMBER =
            T.let(
              :umb_product_partner_account_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          USBANK_PAYMENT_APPLICATION_REFERENCE_ID =
            T.let(
              :usbank_payment_application_reference_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          USBANK_PAYMENT_ID =
            T.let(
              :usbank_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          USBANK_PENDING_RTP_PAYMENT_ID =
            T.let(
              :usbank_pending_rtp_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          USBANK_POSTED_RTP_PAYMENT_ID =
            T.let(
              :usbank_posted_rtp_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          WELLS_FARGO_END_TO_END_ID =
            T.let(
              :wells_fargo_end_to_end_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          WELLS_FARGO_PAYMENT_ID =
            T.let(
              :wells_fargo_payment_id,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          WELLS_FARGO_TRACE_NUMBER =
            T.let(
              :wells_fargo_trace_number,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )
          WELLS_FARGO_UETR =
            T.let(
              :wells_fargo_uetr,
              ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[
                ModernTreasury::PaymentOrder::ReferenceNumber::ReferenceNumberType::TaggedSymbol
              ]
            )
          end
          def self.values
          end
        end
      end

      # The current status of the payment order.
      module Status
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, ModernTreasury::PaymentOrder::Status) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        APPROVED =
          T.let(:approved, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        CANCELLED =
          T.let(:cancelled, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        COMPLETED =
          T.let(:completed, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        DENIED =
          T.let(:denied, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        FAILED =
          T.let(:failed, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        NEEDS_APPROVAL =
          T.let(
            :needs_approval,
            ModernTreasury::PaymentOrder::Status::TaggedSymbol
          )
        PENDING =
          T.let(:pending, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        PROCESSING =
          T.let(:processing, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        RETURNED =
          T.let(:returned, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        REVERSED =
          T.let(:reversed, ModernTreasury::PaymentOrder::Status::TaggedSymbol)
        SENT = T.let(:sent, ModernTreasury::PaymentOrder::Status::TaggedSymbol)

        sig do
          override.returns(
            T::Array[ModernTreasury::PaymentOrder::Status::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The account to which the originating of this payment should be attributed to.
      # Can be a `virtual_account` or `internal_account`.
      module UltimateOriginatingAccount
        extend ModernTreasury::Internal::Type::Union

        Variants =
          T.type_alias do
            T.any(
              ModernTreasury::VirtualAccount,
              ModernTreasury::InternalAccount
            )
          end

        sig do
          override.returns(
            T::Array[
              ModernTreasury::PaymentOrder::UltimateOriginatingAccount::Variants
            ]
          )
        end
        def self.variants
        end
      end

      module UltimateOriginatingAccountType
        extend ModernTreasury::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(
              Symbol,
              ModernTreasury::PaymentOrder::UltimateOriginatingAccountType
            )
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        INTERNAL_ACCOUNT =
          T.let(
            :internal_account,
            ModernTreasury::PaymentOrder::UltimateOriginatingAccountType::TaggedSymbol
          )
        VIRTUAL_ACCOUNT =
          T.let(
            :virtual_account,
            ModernTreasury::PaymentOrder::UltimateOriginatingAccountType::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[
              ModernTreasury::PaymentOrder::UltimateOriginatingAccountType::TaggedSymbol
            ]
          )
        end
        def self.values
        end
      end
    end
  end
end
