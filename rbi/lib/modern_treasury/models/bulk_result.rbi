# typed: strong

module ModernTreasury
  module Models
    class BulkResult < ModernTreasury::BaseModel
      sig { returns(String) }
      def id
      end

      sig { params(_: String).returns(String) }
      def id=(_)
      end

      sig { returns(Time) }
      def created_at
      end

      sig { params(_: Time).returns(Time) }
      def created_at=(_)
      end

      # An object with type as indicated by `entity_type`. This is the result object
      #   that is generated by performing the requested action on the provided input
      #   `request_params`.
      sig do
        returns(
          T.any(
            ModernTreasury::Models::PaymentOrder,
            ModernTreasury::Models::ExpectedPayment,
            ModernTreasury::Models::LedgerTransaction,
            ModernTreasury::Models::Transaction,
            ModernTreasury::Models::BulkResult::Entity::BulkError
          )
        )
      end
      def entity
      end

      sig do
        params(
          _: T.any(
            ModernTreasury::Models::PaymentOrder,
            ModernTreasury::Models::ExpectedPayment,
            ModernTreasury::Models::LedgerTransaction,
            ModernTreasury::Models::Transaction,
            ModernTreasury::Models::BulkResult::Entity::BulkError
          )
        )
          .returns(
            T.any(
              ModernTreasury::Models::PaymentOrder,
              ModernTreasury::Models::ExpectedPayment,
              ModernTreasury::Models::LedgerTransaction,
              ModernTreasury::Models::Transaction,
              ModernTreasury::Models::BulkResult::Entity::BulkError
            )
          )
      end
      def entity=(_)
      end

      # Unique identifier for the result entity object.
      sig { returns(String) }
      def entity_id
      end

      sig { params(_: String).returns(String) }
      def entity_id=(_)
      end

      # The type of the result entity object. For a successful bulk result, this is the
      #   same as the `resource_type` of the bulk request. For a failed bulk result, this
      #   is always bulk_error
      sig { returns(ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol) }
      def entity_type
      end

      sig do
        params(_: ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
          .returns(ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
      end
      def entity_type=(_)
      end

      # This field will be true if this object exists in the live environment or false
      #   if it exists in the test environment.
      sig { returns(T::Boolean) }
      def live_mode
      end

      sig { params(_: T::Boolean).returns(T::Boolean) }
      def live_mode=(_)
      end

      sig { returns(String) }
      def object
      end

      sig { params(_: String).returns(String) }
      def object=(_)
      end

      # Unique identifier for the request that created this bulk result. This is the ID
      #   of the bulk request when `request_type` is bulk_request
      sig { returns(String) }
      def request_id
      end

      sig { params(_: String).returns(String) }
      def request_id=(_)
      end

      # An optional object that contains the provided input params for the request that
      #   created this result. This is an item in the `resources` array for the
      #   bulk_request
      sig { returns(T.nilable(T::Hash[Symbol, String])) }
      def request_params
      end

      sig { params(_: T.nilable(T::Hash[Symbol, String])).returns(T.nilable(T::Hash[Symbol, String])) }
      def request_params=(_)
      end

      # The type of the request that created this result. bulk_request is the only
      #   supported `request_type`
      sig { returns(ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol) }
      def request_type
      end

      sig do
        params(_: ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol)
          .returns(ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol)
      end
      def request_type=(_)
      end

      # One of successful or failed.
      sig { returns(ModernTreasury::Models::BulkResult::Status::TaggedSymbol) }
      def status
      end

      sig do
        params(_: ModernTreasury::Models::BulkResult::Status::TaggedSymbol)
          .returns(ModernTreasury::Models::BulkResult::Status::TaggedSymbol)
      end
      def status=(_)
      end

      sig { returns(Time) }
      def updated_at
      end

      sig { params(_: Time).returns(Time) }
      def updated_at=(_)
      end

      sig do
        params(
          id: String,
          created_at: Time,
          entity: T.any(
            ModernTreasury::Models::PaymentOrder,
            ModernTreasury::Models::ExpectedPayment,
            ModernTreasury::Models::LedgerTransaction,
            ModernTreasury::Models::Transaction,
            ModernTreasury::Models::BulkResult::Entity::BulkError
          ),
          entity_id: String,
          entity_type: ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol,
          live_mode: T::Boolean,
          object: String,
          request_id: String,
          request_params: T.nilable(T::Hash[Symbol, String]),
          request_type: ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol,
          status: ModernTreasury::Models::BulkResult::Status::TaggedSymbol,
          updated_at: Time
        )
          .returns(T.attached_class)
      end
      def self.new(
        id:,
        created_at:,
        entity:,
        entity_id:,
        entity_type:,
        live_mode:,
        object:,
        request_id:,
        request_params:,
        request_type:,
        status:,
        updated_at:
      )
      end

      sig do
        override
          .returns(
            {
              id: String,
              created_at: Time,
              entity: T.any(
                ModernTreasury::Models::PaymentOrder,
                ModernTreasury::Models::ExpectedPayment,
                ModernTreasury::Models::LedgerTransaction,
                ModernTreasury::Models::Transaction,
                ModernTreasury::Models::BulkResult::Entity::BulkError
              ),
              entity_id: String,
              entity_type: ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol,
              live_mode: T::Boolean,
              object: String,
              request_id: String,
              request_params: T.nilable(T::Hash[Symbol, String]),
              request_type: ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol,
              status: ModernTreasury::Models::BulkResult::Status::TaggedSymbol,
              updated_at: Time
            }
          )
      end
      def to_hash
      end

      # An object with type as indicated by `entity_type`. This is the result object
      #   that is generated by performing the requested action on the provided input
      #   `request_params`.
      module Entity
        extend ModernTreasury::Union

        Variants =
          type_template(:out) do
            {
              fixed: T.any(
                ModernTreasury::Models::PaymentOrder,
                ModernTreasury::Models::ExpectedPayment,
                ModernTreasury::Models::LedgerTransaction,
                ModernTreasury::Models::Transaction,
                ModernTreasury::Models::BulkResult::Entity::BulkError
              )
            }
          end

        class BulkError < ModernTreasury::BaseModel
          sig { returns(String) }
          def id
          end

          sig { params(_: String).returns(String) }
          def id=(_)
          end

          sig { returns(Time) }
          def created_at
          end

          sig { params(_: Time).returns(Time) }
          def created_at=(_)
          end

          # This field will be true if this object exists in the live environment or false
          #   if it exists in the test environment.
          sig { returns(T::Boolean) }
          def live_mode
          end

          sig { params(_: T::Boolean).returns(T::Boolean) }
          def live_mode=(_)
          end

          sig { returns(String) }
          def object
          end

          sig { params(_: String).returns(String) }
          def object=(_)
          end

          sig { returns(T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError]) }
          def request_errors
          end

          sig do
            params(_: T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError])
              .returns(T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError])
          end
          def request_errors=(_)
          end

          sig { returns(Time) }
          def updated_at
          end

          sig { params(_: Time).returns(Time) }
          def updated_at=(_)
          end

          sig do
            params(
              id: String,
              created_at: Time,
              live_mode: T::Boolean,
              object: String,
              request_errors: T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError],
              updated_at: Time
            )
              .returns(T.attached_class)
          end
          def self.new(id:, created_at:, live_mode:, object:, request_errors:, updated_at:)
          end

          sig do
            override
              .returns(
                {
                  id: String,
                  created_at: Time,
                  live_mode: T::Boolean,
                  object: String,
                  request_errors: T::Array[ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError],
                  updated_at: Time
                }
              )
          end
          def to_hash
          end

          class RequestError < ModernTreasury::BaseModel
            sig { returns(T.nilable(String)) }
            def code
            end

            sig { params(_: String).returns(String) }
            def code=(_)
            end

            sig { returns(T.nilable(String)) }
            def message
            end

            sig { params(_: String).returns(String) }
            def message=(_)
            end

            sig { returns(T.nilable(String)) }
            def parameter
            end

            sig { params(_: String).returns(String) }
            def parameter=(_)
            end

            sig { params(code: String, message: String, parameter: String).returns(T.attached_class) }
            def self.new(code: nil, message: nil, parameter: nil)
            end

            sig { override.returns({code: String, message: String, parameter: String}) }
            def to_hash
            end
          end
        end

        class << self
          sig do
            override
              .returns(
                [ModernTreasury::Models::PaymentOrder, ModernTreasury::Models::ExpectedPayment, ModernTreasury::Models::LedgerTransaction, ModernTreasury::Models::Transaction, ModernTreasury::Models::BulkResult::Entity::BulkError]
              )
          end
          def variants
          end
        end
      end

      # The type of the result entity object. For a successful bulk result, this is the
      #   same as the `resource_type` of the bulk request. For a failed bulk result, this
      #   is always bulk_error
      module EntityType
        extend ModernTreasury::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, ModernTreasury::Models::BulkResult::EntityType) }
        OrSymbol = T.type_alias { T.any(Symbol, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol) }

        PAYMENT_ORDER = T.let(:payment_order, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        LEDGER_TRANSACTION =
          T.let(:ledger_transaction, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        TRANSACTION = T.let(:transaction, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        EXPECTED_PAYMENT = T.let(:expected_payment, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)
        BULK_ERROR = T.let(:bulk_error, ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol)

        class << self
          sig { override.returns(T::Array[ModernTreasury::Models::BulkResult::EntityType::TaggedSymbol]) }
          def values
          end
        end
      end

      # The type of the request that created this result. bulk_request is the only
      #   supported `request_type`
      module RequestType
        extend ModernTreasury::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, ModernTreasury::Models::BulkResult::RequestType) }
        OrSymbol = T.type_alias { T.any(Symbol, ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol) }

        BULK_REQUEST = T.let(:bulk_request, ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol)

        class << self
          sig { override.returns(T::Array[ModernTreasury::Models::BulkResult::RequestType::TaggedSymbol]) }
          def values
          end
        end
      end

      # One of successful or failed.
      module Status
        extend ModernTreasury::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, ModernTreasury::Models::BulkResult::Status) }
        OrSymbol = T.type_alias { T.any(Symbol, ModernTreasury::Models::BulkResult::Status::TaggedSymbol) }

        PENDING = T.let(:pending, ModernTreasury::Models::BulkResult::Status::TaggedSymbol)
        SUCCESSFUL = T.let(:successful, ModernTreasury::Models::BulkResult::Status::TaggedSymbol)
        FAILED = T.let(:failed, ModernTreasury::Models::BulkResult::Status::TaggedSymbol)

        class << self
          sig { override.returns(T::Array[ModernTreasury::Models::BulkResult::Status::TaggedSymbol]) }
          def values
          end
        end
      end
    end
  end
end
