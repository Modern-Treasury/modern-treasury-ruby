# frozen_string_literal: true

module ModernTreasury
  module Models
    class BulkResult < ModernTreasury::BaseModel
      # @!attribute id
      #
      #   @return [String]
      required :id, String

      # @!attribute created_at
      #
      #   @return [Time]
      required :created_at, Time

      # @!attribute entity
      #   An object with type as indicated by `entity_type`. This is the result object that is generated by performing the requested action on the provided input `request_params`.
      #
      #   @return [ModernTreasury::Models::PaymentOrder, ModernTreasury::Models::ExpectedPayment, ModernTreasury::Models::LedgerTransaction, ModernTreasury::Models::Transaction, ModernTreasury::Models::BulkResult::Entity::BulkError]
      required :entity, union: -> { ModernTreasury::Models::BulkResult::Entity }

      # @!attribute entity_id
      #   Unique identifier for the result entity object.
      #
      #   @return [String]
      required :entity_id, String

      # @!attribute entity_type
      #   The type of the result entity object. For a successful bulk result, this is the same as the `resource_type` of the bulk request. For a failed bulk result, this is always bulk_error
      #
      #   @return [Symbol, ModernTreasury::Models::BulkResult::EntityType]
      required :entity_type, enum: -> { ModernTreasury::Models::BulkResult::EntityType }

      # @!attribute live_mode
      #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
      #
      #   @return [Boolean]
      required :live_mode, ModernTreasury::BooleanModel

      # @!attribute object
      #
      #   @return [String]
      required :object, String

      # @!attribute request_id
      #   Unique identifier for the request that created this bulk result. This is the ID of the bulk request when `request_type` is bulk_request
      #
      #   @return [String]
      required :request_id, String

      # @!attribute request_params
      #   An optional object that contains the provided input params for the request that created this result. This is an item in the `resources` array for the bulk_request
      #
      #   @return [Hash{Symbol => String}, nil]
      required :request_params, ModernTreasury::HashOf[String]

      # @!attribute request_type
      #   The type of the request that created this result. bulk_request is the only supported `request_type`
      #
      #   @return [Symbol, ModernTreasury::Models::BulkResult::RequestType]
      required :request_type, enum: -> { ModernTreasury::Models::BulkResult::RequestType }

      # @!attribute status
      #   One of successful or failed.
      #
      #   @return [Symbol, ModernTreasury::Models::BulkResult::Status]
      required :status, enum: -> { ModernTreasury::Models::BulkResult::Status }

      # @!attribute updated_at
      #
      #   @return [Time]
      required :updated_at, Time

      # @!parse
      #   # @param id [String]
      #   #
      #   # @param created_at [String]
      #   #
      #   # @param entity [ModernTreasury::Models::PaymentOrder, ModernTreasury::Models::ExpectedPayment, ModernTreasury::Models::LedgerTransaction, ModernTreasury::Models::Transaction, ModernTreasury::Models::BulkResult::Entity::BulkError] An object with type as indicated by `entity_type`. This is the result object
      #   #   that is generated by performing the requested action on the provided input
      #   #   `request_params`.
      #   #
      #   # @param entity_id [String] Unique identifier for the result entity object.
      #   #
      #   # @param entity_type [String] The type of the result entity object. For a successful bulk result, this is the
      #   #   same as the `resource_type` of the bulk request. For a failed bulk result, this
      #   #   is always bulk_error
      #   #
      #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
      #   #   if it exists in the test environment.
      #   #
      #   # @param object [String]
      #   #
      #   # @param request_id [String] Unique identifier for the request that created this bulk result. This is the ID
      #   #   of the bulk request when `request_type` is bulk_request
      #   #
      #   # @param request_params [Hash{Symbol => String}, nil] An optional object that contains the provided input params for the request that
      #   #   created this result. This is an item in the `resources` array for the
      #   #   bulk_request
      #   #
      #   # @param request_type [String] The type of the request that created this result. bulk_request is the only
      #   #   supported `request_type`
      #   #
      #   # @param status [String] One of successful or failed.
      #   #
      #   # @param updated_at [String]
      #   #
      #   def initialize(
      #     id:,
      #     created_at:,
      #     entity:,
      #     entity_id:,
      #     entity_type:,
      #     live_mode:,
      #     object:,
      #     request_id:,
      #     request_params:,
      #     request_type:,
      #     status:,
      #     updated_at:,
      #     **
      #   )
      #     super
      #   end

      # def initialize: (Hash | ModernTreasury::BaseModel) -> void

      # An object with type as indicated by `entity_type`. This is the result object that is generated by performing the requested action on the provided input `request_params`.
      #
      # @example
      #
      # ```ruby
      # case union
      # in ModernTreasury::Models::PaymentOrder
      #   # ...
      # in ModernTreasury::Models::ExpectedPayment
      #   # ...
      # in ModernTreasury::Models::LedgerTransaction
      #   # ...
      # in ModernTreasury::Models::Transaction
      #   # ...
      # in ModernTreasury::Models::BulkResult::Entity::BulkError
      #   # ...
      # end
      # ```
      class Entity < ModernTreasury::Union
        variant -> { ModernTreasury::Models::PaymentOrder }

        variant -> { ModernTreasury::Models::ExpectedPayment }

        variant -> { ModernTreasury::Models::LedgerTransaction }

        variant -> { ModernTreasury::Models::Transaction }

        variant -> { ModernTreasury::Models::BulkResult::Entity::BulkError }

        class BulkError < ModernTreasury::BaseModel
          # @!attribute id
          #
          #   @return [String]
          required :id, String

          # @!attribute created_at
          #
          #   @return [Time]
          required :created_at, Time

          # @!attribute live_mode
          #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
          #
          #   @return [Boolean]
          required :live_mode, ModernTreasury::BooleanModel

          # @!attribute object
          #
          #   @return [String]
          required :object, String

          # @!attribute request_errors
          #
          #   @return [Array<ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError>]
          required :request_errors,
                   ModernTreasury::ArrayOf[-> {
                     ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError
                   }]

          # @!attribute updated_at
          #
          #   @return [Time]
          required :updated_at, Time

          # @!parse
          #   # @param id [String]
          #   #
          #   # @param created_at [String]
          #   #
          #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
          #   #   if it exists in the test environment.
          #   #
          #   # @param object [String]
          #   #
          #   # @param request_errors [Array<ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError>]
          #   #
          #   # @param updated_at [String]
          #   #
          #   def initialize(id:, created_at:, live_mode:, object:, request_errors:, updated_at:, **) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          class RequestError < ModernTreasury::BaseModel
            # @!attribute code
            #
            #   @return [String]
            optional :code, String

            # @!attribute message
            #
            #   @return [String]
            optional :message, String

            # @!attribute parameter
            #
            #   @return [String]
            optional :parameter, String

            # @!parse
            #   # @param code [String]
            #   # @param message [String]
            #   # @param parameter [String]
            #   #
            #   def initialize(code: nil, message: nil, parameter: nil, **) = super

            # def initialize: (Hash | ModernTreasury::BaseModel) -> void
          end
        end
      end

      class PaymentOrder < ModernTreasury::BaseModel
        # @!attribute id
        #
        #   @return [String]
        required :id, String

        # @!attribute accounting
        #
        #   @return [ModernTreasury::Models::PaymentOrder::Accounting]
        required :accounting, -> { ModernTreasury::Models::PaymentOrder::Accounting }

        # @!attribute accounting_category_id
        #   The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.
        #
        #   @return [String, nil]
        required :accounting_category_id, String

        # @!attribute accounting_ledger_class_id
        #   The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.
        #
        #   @return [String, nil]
        required :accounting_ledger_class_id, String

        # @!attribute amount
        #   Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.
        #
        #   @return [Integer]
        required :amount, Integer

        # @!attribute charge_bearer
        #   The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::ChargeBearer, nil]
        required :charge_bearer, enum: -> { ModernTreasury::Models::PaymentOrder::ChargeBearer }

        # @!attribute compliance_rule_metadata
        #   Custom key-value pair for usage in compliance rules. Please contact support before making changes to this field.
        #
        #   @return [Hash{Symbol => Object}, nil]
        required :compliance_rule_metadata, ModernTreasury::HashOf[ModernTreasury::Unknown]

        # @!attribute counterparty_id
        #   If the payment order is tied to a specific Counterparty, their id will appear, otherwise `null`.
        #
        #   @return [String, nil]
        required :counterparty_id, String

        # @!attribute created_at
        #
        #   @return [Time]
        required :created_at, Time

        # @!attribute currency
        #   Defaults to the currency of the originating account.
        #
        #   @return [Symbol, ModernTreasury::Models::Currency]
        required :currency, enum: -> { ModernTreasury::Models::Currency }

        # @!attribute current_return
        #   If the payment order's status is `returned`, this will include the return object's data.
        #
        #   @return [ModernTreasury::Models::ReturnObject, nil]
        required :current_return, -> { ModernTreasury::Models::ReturnObject }

        # @!attribute decision_id
        #   The ID of the compliance decision for the payment order, if transaction monitoring is enabled.
        #
        #   @return [String, nil]
        required :decision_id, String

        # @!attribute description
        #   An optional description for internal use.
        #
        #   @return [String, nil]
        required :description, String

        # @!attribute direction
        #   One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::Direction]
        required :direction, enum: -> { ModernTreasury::Models::PaymentOrder::Direction }

        # @!attribute effective_date
        #   Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.
        #
        #   @return [Date]
        required :effective_date, Date

        # @!attribute expires_at
        #   RFP payments require an expires_at. This value must be past the effective_date.
        #
        #   @return [Time, nil]
        required :expires_at, Time

        # @!attribute foreign_exchange_contract
        #   If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.
        #
        #   @return [String, nil]
        required :foreign_exchange_contract, String

        # @!attribute foreign_exchange_indicator
        #   Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::ForeignExchangeIndicator, nil]
        required :foreign_exchange_indicator,
                 enum: -> { ModernTreasury::Models::PaymentOrder::ForeignExchangeIndicator }

        # @!attribute foreign_exchange_rate
        #   Associated serialized foreign exchange rate information.
        #
        #   @return [ModernTreasury::Models::PaymentOrder::ForeignExchangeRate, nil]
        required :foreign_exchange_rate, -> { ModernTreasury::Models::PaymentOrder::ForeignExchangeRate }

        # @!attribute ledger_transaction_id
        #   The ID of the ledger transaction linked to the payment order.
        #
        #   @return [String, nil]
        required :ledger_transaction_id, String

        # @!attribute live_mode
        #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
        #
        #   @return [Boolean]
        required :live_mode, ModernTreasury::BooleanModel

        # @!attribute metadata
        #   Additional data represented as key-value pairs. Both the key and value must be strings.
        #
        #   @return [Hash{Symbol => String}]
        required :metadata, ModernTreasury::HashOf[String]

        # @!attribute nsf_protected
        #   A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page.
        #
        #   @return [Boolean]
        required :nsf_protected, ModernTreasury::BooleanModel

        # @!attribute object
        #
        #   @return [String]
        required :object, String

        # @!attribute originating_account_id
        #   The ID of one of your organization's internal accounts.
        #
        #   @return [String]
        required :originating_account_id, String

        # @!attribute originating_party_name
        #   If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.
        #
        #   @return [String, nil]
        required :originating_party_name, String

        # @!attribute priority
        #   Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::Priority]
        required :priority, enum: -> { ModernTreasury::Models::PaymentOrder::Priority }

        # @!attribute process_after
        #   If present, Modern Treasury will not process the payment until after this time. If `process_after` is past the cutoff for `effective_date`, `process_after` will take precedence and `effective_date` will automatically update to reflect the earliest possible sending date after `process_after`. Format is ISO8601 timestamp.
        #
        #   @return [Time, nil]
        required :process_after, Time

        # @!attribute purpose
        #   For `wire`, this is usually the purpose which is transmitted via the "InstrForDbtrAgt" field in the ISO20022 file. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.
        #
        #   @return [String, nil]
        required :purpose, String

        # @!attribute receiving_account_id
        #   The receiving account ID. Can be an `external_account` or `internal_account`.
        #
        #   @return [String]
        required :receiving_account_id, String

        # @!attribute receiving_account_type
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::ReceivingAccountType]
        required :receiving_account_type,
                 enum: -> {
                   ModernTreasury::Models::PaymentOrder::ReceivingAccountType
                 }

        # @!attribute reference_numbers
        #
        #   @return [Array<ModernTreasury::Models::PaymentOrder::ReferenceNumber>]
        required :reference_numbers,
                 ModernTreasury::ArrayOf[-> { ModernTreasury::Models::PaymentOrder::ReferenceNumber }]

        # @!attribute remittance_information
        #   For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the "Originator to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        #
        #   @return [String, nil]
        required :remittance_information, String

        # @!attribute send_remittance_advice
        #   Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.
        #
        #   @return [Boolean, nil]
        required :send_remittance_advice, ModernTreasury::BooleanModel

        # @!attribute statement_descriptor
        #   An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.
        #
        #   @return [String, nil]
        required :statement_descriptor, String

        # @!attribute status
        #   The current status of the payment order.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::Status]
        required :status, enum: -> { ModernTreasury::Models::PaymentOrder::Status }

        # @!attribute subtype
        #   An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrderSubtype, nil]
        required :subtype, enum: -> { ModernTreasury::Models::PaymentOrderSubtype }

        # @!attribute transaction_ids
        #   The IDs of all the transactions associated to this payment order. Usually, you will only have a single transaction ID. However, if a payment order initially results in a Return, but gets redrafted and is later successfully completed, it can have many transactions.
        #
        #   @return [Array<String>]
        required :transaction_ids, ModernTreasury::ArrayOf[String]

        # @!attribute transaction_monitoring_enabled
        #   A flag that determines whether a payment order should go through transaction monitoring.
        #
        #   @return [Boolean]
        required :transaction_monitoring_enabled, ModernTreasury::BooleanModel

        # @!attribute type
        #   One of `ach`, `se_bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `nz_national_clearing_code`, `sic`, `signet`, `provexchange`, `zengin`.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrderType]
        required :type, enum: -> { ModernTreasury::Models::PaymentOrderType }

        # @!attribute ultimate_originating_account
        #   The account to which the originating of this payment should be attributed to. Can be a `virtual_account` or `internal_account`.
        #
        #   @return [ModernTreasury::Models::VirtualAccount, ModernTreasury::Models::InternalAccount, nil]
        required :ultimate_originating_account,
                 union: -> { ModernTreasury::Models::PaymentOrder::UltimateOriginatingAccount }

        # @!attribute ultimate_originating_account_id
        #   The ultimate originating account ID. Can be a `virtual_account` or `internal_account`.
        #
        #   @return [String, nil]
        required :ultimate_originating_account_id, String

        # @!attribute ultimate_originating_account_type
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrder::UltimateOriginatingAccountType, nil]
        required :ultimate_originating_account_type,
                 enum: -> { ModernTreasury::Models::PaymentOrder::UltimateOriginatingAccountType }

        # @!attribute ultimate_originating_party_identifier
        #   Identifier of the ultimate originator of the payment order.
        #
        #   @return [String, nil]
        required :ultimate_originating_party_identifier, String

        # @!attribute ultimate_originating_party_name
        #   Name of the ultimate originator of the payment order.
        #
        #   @return [String, nil]
        required :ultimate_originating_party_name, String

        # @!attribute ultimate_receiving_party_identifier
        #
        #   @return [String, nil]
        required :ultimate_receiving_party_identifier, String

        # @!attribute ultimate_receiving_party_name
        #
        #   @return [String, nil]
        required :ultimate_receiving_party_name, String

        # @!attribute updated_at
        #
        #   @return [Time]
        required :updated_at, Time

        # @!attribute vendor_attributes
        #   Additional vendor specific fields for this payment. Data must be represented as key-value pairs.
        #
        #   @return [Object, nil]
        required :vendor_attributes, ModernTreasury::Unknown

        # @!attribute vendor_failure_reason
        #   This field will be populated if a vendor failure occurs. Logic shouldn't be built on its value as it is free-form.
        #
        #   @return [String, nil]
        required :vendor_failure_reason, String

        # @!parse
        #   # @param id [String]
        #   #
        #   # @param accounting [ModernTreasury::Models::PaymentOrder::Accounting]
        #   #
        #   # @param accounting_category_id [String, nil] The ID of one of your accounting categories. Note that these will only be
        #   #   accessible if your accounting system has been connected.
        #   #
        #   # @param accounting_ledger_class_id [String, nil] The ID of one of your accounting ledger classes. Note that these will only be
        #   #   accessible if your accounting system has been connected.
        #   #
        #   # @param amount [Integer] Value in specified currency's smallest unit. e.g. $10 would be represented as
        #   #   1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.
        #   #
        #   # @param charge_bearer [String, nil] The party that will pay the fees for the payment order. Only applies to wire
        #   #   payment orders. Can be one of shared, sender, or receiver, which correspond
        #   #   respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
        #   #
        #   # @param compliance_rule_metadata [Hash{Symbol => Object}, nil] Custom key-value pair for usage in compliance rules. Please contact support
        #   #   before making changes to this field.
        #   #
        #   # @param counterparty_id [String, nil] If the payment order is tied to a specific Counterparty, their id will appear,
        #   #   otherwise `null`.
        #   #
        #   # @param created_at [String]
        #   #
        #   # @param currency [String] Defaults to the currency of the originating account.
        #   #
        #   # @param current_return [ModernTreasury::Models::ReturnObject, nil] If the payment order's status is `returned`, this will include the return
        #   #   object's data.
        #   #
        #   # @param decision_id [String, nil] The ID of the compliance decision for the payment order, if transaction
        #   #   monitoring is enabled.
        #   #
        #   # @param description [String, nil] An optional description for internal use.
        #   #
        #   # @param direction [String] One of `credit`, `debit`. Describes the direction money is flowing in the
        #   #   transaction. A `credit` moves money from your account to someone else's. A
        #   #   `debit` pulls money from someone else's account to your own. Note that wire,
        #   #   rtp, and check payments will always be `credit`.
        #   #
        #   # @param effective_date [String] Date transactions are to be posted to the participants' account. Defaults to the
        #   #   current business day or the next business day if the current day is a bank
        #   #   holiday or weekend. Format: yyyy-mm-dd.
        #   #
        #   # @param expires_at [String, nil] RFP payments require an expires_at. This value must be past the effective_date.
        #   #
        #   # @param foreign_exchange_contract [String, nil] If present, indicates a specific foreign exchange contract number that has been
        #   #   generated by your financial institution.
        #   #
        #   # @param foreign_exchange_indicator [String, nil] Indicates the type of FX transfer to initiate, can be either
        #   #   `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
        #   #   currency matches the originating account currency.
        #   #
        #   # @param foreign_exchange_rate [ModernTreasury::Models::PaymentOrder::ForeignExchangeRate, nil] Associated serialized foreign exchange rate information.
        #   #
        #   # @param ledger_transaction_id [String, nil] The ID of the ledger transaction linked to the payment order.
        #   #
        #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
        #   #   if it exists in the test environment.
        #   #
        #   # @param metadata [Hash{Symbol => String}] Additional data represented as key-value pairs. Both the key and value must be
        #   #   strings.
        #   #
        #   # @param nsf_protected [Boolean] A boolean to determine if NSF Protection is enabled for this payment order. Note
        #   #   that this setting must also be turned on in your organization settings page.
        #   #
        #   # @param object [String]
        #   #
        #   # @param originating_account_id [String] The ID of one of your organization's internal accounts.
        #   #
        #   # @param originating_party_name [String, nil] If present, this will replace your default company name on receiver's bank
        #   #   statement. This field can only be used for ACH payments currently. For ACH, only
        #   #   the first 16 characters of this string will be used. Any additional characters
        #   #   will be truncated.
        #   #
        #   # @param priority [String] Either `normal` or `high`. For ACH and EFT payments, `high` represents a
        #   #   same-day ACH or EFT transfer, respectively. For check payments, `high` can mean
        #   #   an overnight check rather than standard mail.
        #   #
        #   # @param process_after [String, nil] If present, Modern Treasury will not process the payment until after this time.
        #   #   If `process_after` is past the cutoff for `effective_date`, `process_after` will
        #   #   take precedence and `effective_date` will automatically update to reflect the
        #   #   earliest possible sending date after `process_after`. Format is ISO8601
        #   #   timestamp.
        #   #
        #   # @param purpose [String, nil] For `wire`, this is usually the purpose which is transmitted via the
        #   #   "InstrForDbtrAgt" field in the ISO20022 file. For `eft`, this field is the 3
        #   #   digit CPA Code that will be attached to the payment.
        #   #
        #   # @param receiving_account_id [String] The receiving account ID. Can be an `external_account` or `internal_account`.
        #   #
        #   # @param receiving_account_type [String]
        #   #
        #   # @param reference_numbers [Array<ModernTreasury::Models::PaymentOrder::ReferenceNumber>]
        #   #
        #   # @param remittance_information [String, nil] For `ach`, this field will be passed through on an addenda record. For `wire`
        #   #   payments the field will be passed through as the "Originator to Beneficiary
        #   #   Information", also known as OBI or Fedwire tag 6000.
        #   #
        #   # @param send_remittance_advice [Boolean, nil] Send an email to the counterparty when the payment order is sent to the bank. If
        #   #   `null`, `send_remittance_advice` on the Counterparty is used.
        #   #
        #   # @param statement_descriptor [String, nil] An optional descriptor which will appear in the receiver's statement. For
        #   #   `check` payments this field will be used as the memo line. For `ach` the maximum
        #   #   length is 10 characters. Note that for ACH payments, the name on your bank
        #   #   account will be included automatically by the bank, so you can use the
        #   #   characters for other useful information. For `eft` the maximum length is 15
        #   #   characters.
        #   #
        #   # @param status [String] The current status of the payment order.
        #   #
        #   # @param subtype [String, nil] An additional layer of classification for the type of payment order you are
        #   #   doing. This field is only used for `ach` payment orders currently. For `ach`
        #   #   payment orders, the `subtype` represents the SEC code. We currently support
        #   #   `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.
        #   #
        #   # @param transaction_ids [Array<String>] The IDs of all the transactions associated to this payment order. Usually, you
        #   #   will only have a single transaction ID. However, if a payment order initially
        #   #   results in a Return, but gets redrafted and is later successfully completed, it
        #   #   can have many transactions.
        #   #
        #   # @param transaction_monitoring_enabled [Boolean] A flag that determines whether a payment order should go through transaction
        #   #   monitoring.
        #   #
        #   # @param type [String] One of `ach`, `se_bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
        #   #   `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`,
        #   #   `nz_national_clearing_code`, `sic`, `signet`, `provexchange`, `zengin`.
        #   #
        #   # @param ultimate_originating_account [ModernTreasury::Models::VirtualAccount, ModernTreasury::Models::InternalAccount, nil] The account to which the originating of this payment should be attributed to.
        #   #   Can be a `virtual_account` or `internal_account`.
        #   #
        #   # @param ultimate_originating_account_id [String, nil] The ultimate originating account ID. Can be a `virtual_account` or
        #   #   `internal_account`.
        #   #
        #   # @param ultimate_originating_account_type [String, nil]
        #   #
        #   # @param ultimate_originating_party_identifier [String, nil] Identifier of the ultimate originator of the payment order.
        #   #
        #   # @param ultimate_originating_party_name [String, nil] Name of the ultimate originator of the payment order.
        #   #
        #   # @param ultimate_receiving_party_identifier [String, nil]
        #   #
        #   # @param ultimate_receiving_party_name [String, nil]
        #   #
        #   # @param updated_at [String]
        #   #
        #   # @param vendor_attributes [Object, nil] Additional vendor specific fields for this payment. Data must be represented as
        #   #   key-value pairs.
        #   #
        #   # @param vendor_failure_reason [String, nil] This field will be populated if a vendor failure occurs. Logic shouldn't be
        #   #   built on its value as it is free-form.
        #   #
        #   def initialize(
        #     id:,
        #     accounting:,
        #     accounting_category_id:,
        #     accounting_ledger_class_id:,
        #     amount:,
        #     charge_bearer:,
        #     compliance_rule_metadata:,
        #     counterparty_id:,
        #     created_at:,
        #     currency:,
        #     current_return:,
        #     decision_id:,
        #     description:,
        #     direction:,
        #     effective_date:,
        #     expires_at:,
        #     foreign_exchange_contract:,
        #     foreign_exchange_indicator:,
        #     foreign_exchange_rate:,
        #     ledger_transaction_id:,
        #     live_mode:,
        #     metadata:,
        #     nsf_protected:,
        #     object:,
        #     originating_account_id:,
        #     originating_party_name:,
        #     priority:,
        #     process_after:,
        #     purpose:,
        #     receiving_account_id:,
        #     receiving_account_type:,
        #     reference_numbers:,
        #     remittance_information:,
        #     send_remittance_advice:,
        #     statement_descriptor:,
        #     status:,
        #     subtype:,
        #     transaction_ids:,
        #     transaction_monitoring_enabled:,
        #     type:,
        #     ultimate_originating_account:,
        #     ultimate_originating_account_id:,
        #     ultimate_originating_account_type:,
        #     ultimate_originating_party_identifier:,
        #     ultimate_originating_party_name:,
        #     ultimate_receiving_party_identifier:,
        #     ultimate_receiving_party_name:,
        #     updated_at:,
        #     vendor_attributes:,
        #     vendor_failure_reason:,
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void

        class Accounting < ModernTreasury::BaseModel
          # @!attribute account_id
          #   The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.
          #
          #   @return [String, nil]
          optional :account_id, String

          # @!attribute class_id
          #   The ID of one of the class objects in your accounting system. Class objects track segments of your business independent of client or project. Note that these will only be accessible if your accounting system has been connected.
          #
          #   @return [String, nil]
          optional :class_id, String

          # @!parse
          #   # @param account_id [String, nil] The ID of one of your accounting categories. Note that these will only be
          #   #   accessible if your accounting system has been connected.
          #   #
          #   # @param class_id [String, nil] The ID of one of the class objects in your accounting system. Class objects
          #   #   track segments of your business independent of client or project. Note that
          #   #   these will only be accessible if your accounting system has been connected.
          #   #
          #   def initialize(account_id: nil, class_id: nil, **) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void
        end

        # The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :shared
        #   # ...
        # in :sender
        #   # ...
        # in :receiver
        #   # ...
        # end
        # ```
        class ChargeBearer < ModernTreasury::Enum
          SHARED = :shared
          SENDER = :sender
          RECEIVER = :receiver

          finalize!
        end

        # One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :credit
        #   # ...
        # in :debit
        #   # ...
        # end
        # ```
        class Direction < ModernTreasury::Enum
          CREDIT = :credit
          DEBIT = :debit

          finalize!
        end

        # Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :fixed_to_variable
        #   # ...
        # in :variable_to_fixed
        #   # ...
        # end
        # ```
        class ForeignExchangeIndicator < ModernTreasury::Enum
          FIXED_TO_VARIABLE = :fixed_to_variable
          VARIABLE_TO_FIXED = :variable_to_fixed

          finalize!
        end

        class ForeignExchangeRate < ModernTreasury::BaseModel
          # @!attribute base_amount
          #   Amount in the lowest denomination of the `base_currency` to convert, often called the "sell" amount.
          #
          #   @return [Integer]
          required :base_amount, Integer

          # @!attribute base_currency
          #   Currency to convert, often called the "sell" currency.
          #
          #   @return [Symbol, ModernTreasury::Models::Currency]
          required :base_currency, enum: -> { ModernTreasury::Models::Currency }

          # @!attribute exponent
          #   The exponent component of the rate. The decimal is calculated as `value` / (10 ^ `exponent`).
          #
          #   @return [Integer]
          required :exponent, Integer

          # @!attribute rate_string
          #   A string representation of the rate.
          #
          #   @return [String]
          required :rate_string, String

          # @!attribute target_amount
          #   Amount in the lowest denomination of the `target_currency`, often called the "buy" amount.
          #
          #   @return [Integer]
          required :target_amount, Integer

          # @!attribute target_currency
          #   Currency to convert the `base_currency` to, often called the "buy" currency.
          #
          #   @return [Symbol, ModernTreasury::Models::Currency]
          required :target_currency, enum: -> { ModernTreasury::Models::Currency }

          # @!attribute value
          #   The whole number component of the rate. The decimal is calculated as `value` / (10 ^ `exponent`).
          #
          #   @return [Integer]
          required :value, Integer

          # @!parse
          #   # Associated serialized foreign exchange rate information.
          #   #
          #   # @param base_amount [Integer] Amount in the lowest denomination of the `base_currency` to convert, often
          #   #   called the "sell" amount.
          #   #
          #   # @param base_currency [String] Currency to convert, often called the "sell" currency.
          #   #
          #   # @param exponent [Integer] The exponent component of the rate. The decimal is calculated as `value` / (10 ^
          #   #   `exponent`).
          #   #
          #   # @param rate_string [String] A string representation of the rate.
          #   #
          #   # @param target_amount [Integer] Amount in the lowest denomination of the `target_currency`, often called the
          #   #   "buy" amount.
          #   #
          #   # @param target_currency [String] Currency to convert the `base_currency` to, often called the "buy" currency.
          #   #
          #   # @param value [Integer] The whole number component of the rate. The decimal is calculated as `value` /
          #   #   (10 ^ `exponent`).
          #   #
          #   def initialize(base_amount:, base_currency:, exponent:, rate_string:, target_amount:, target_currency:, value:, **) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void
        end

        # Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :high
        #   # ...
        # in :normal
        #   # ...
        # end
        # ```
        class Priority < ModernTreasury::Enum
          HIGH = :high
          NORMAL = :normal

          finalize!
        end

        # @example
        #
        # ```ruby
        # case enum
        # in :internal_account
        #   # ...
        # in :external_account
        #   # ...
        # end
        # ```
        class ReceivingAccountType < ModernTreasury::Enum
          INTERNAL_ACCOUNT = :internal_account
          EXTERNAL_ACCOUNT = :external_account

          finalize!
        end

        class ReferenceNumber < ModernTreasury::BaseModel
          # @!attribute id
          #
          #   @return [String]
          required :id, String

          # @!attribute created_at
          #
          #   @return [Time]
          required :created_at, Time

          # @!attribute live_mode
          #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
          #
          #   @return [Boolean]
          required :live_mode, ModernTreasury::BooleanModel

          # @!attribute object
          #
          #   @return [String]
          required :object, String

          # @!attribute reference_number
          #   The vendor reference number.
          #
          #   @return [String]
          required :reference_number, String

          # @!attribute reference_number_type
          #   The type of the reference number. Referring to the vendor payment id.
          #
          #   @return [Symbol, ModernTreasury::Models::PaymentOrder::ReferenceNumber::ReferenceNumberType]
          required :reference_number_type,
                   enum: -> { ModernTreasury::Models::PaymentOrder::ReferenceNumber::ReferenceNumberType }

          # @!attribute updated_at
          #
          #   @return [Time]
          required :updated_at, Time

          # @!parse
          #   # @param id [String]
          #   #
          #   # @param created_at [String]
          #   #
          #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
          #   #   if it exists in the test environment.
          #   #
          #   # @param object [String]
          #   #
          #   # @param reference_number [String] The vendor reference number.
          #   #
          #   # @param reference_number_type [String] The type of the reference number. Referring to the vendor payment id.
          #   #
          #   # @param updated_at [String]
          #   #
          #   def initialize(id:, created_at:, live_mode:, object:, reference_number:, reference_number_type:, updated_at:, **) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          # The type of the reference number. Referring to the vendor payment id.
          #
          # @example
          #
          # ```ruby
          # case enum
          # in :ach_original_trace_number
          #   # ...
          # in :ach_trace_number
          #   # ...
          # in :bankprov_payment_activity_date
          #   # ...
          # in :bankprov_payment_id
          #   # ...
          # in :bnk_dev_prenotification_id
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class ReferenceNumberType < ModernTreasury::Enum
            ACH_ORIGINAL_TRACE_NUMBER = :ach_original_trace_number
            ACH_TRACE_NUMBER = :ach_trace_number
            BANKPROV_PAYMENT_ACTIVITY_DATE = :bankprov_payment_activity_date
            BANKPROV_PAYMENT_ID = :bankprov_payment_id
            BNK_DEV_PRENOTIFICATION_ID = :bnk_dev_prenotification_id
            BNK_DEV_TRANSFER_ID = :bnk_dev_transfer_id
            BOFA_END_TO_END_ID = :bofa_end_to_end_id
            BOFA_TRANSACTION_ID = :bofa_transaction_id
            CHECK_NUMBER = :check_number
            CITIBANK_REFERENCE_NUMBER = :citibank_reference_number
            CITIBANK_WORLDLINK_CLEARING_SYSTEM_REFERENCE_NUMBER = :citibank_worldlink_clearing_system_reference_number
            COLUMN_FX_QUOTE_ID = :column_fx_quote_id
            COLUMN_REVERSAL_PAIR_TRANSFER_ID = :column_reversal_pair_transfer_id
            COLUMN_TRANSFER_ID = :column_transfer_id
            CROSS_RIVER_PAYMENT_ID = :cross_river_payment_id
            CROSS_RIVER_SERVICE_MESSAGE = :cross_river_service_message
            CROSS_RIVER_TRANSACTION_ID = :cross_river_transaction_id
            CURRENCYCLOUD_CONVERSION_ID = :currencycloud_conversion_id
            CURRENCYCLOUD_PAYMENT_ID = :currencycloud_payment_id
            DC_BANK_TRANSACTION_ID = :dc_bank_transaction_id
            DWOLLA_TRANSACTION_ID = :dwolla_transaction_id
            EFT_TRACE_NUMBER = :eft_trace_number
            EVOLVE_TRANSACTION_ID = :evolve_transaction_id
            FEDWIRE_IMAD = :fedwire_imad
            FEDWIRE_OMAD = :fedwire_omad
            FIRST_REPUBLIC_INTERNAL_ID = :first_republic_internal_id
            GOLDMAN_SACHS_COLLECTION_REQUEST_ID = :goldman_sachs_collection_request_id
            GOLDMAN_SACHS_END_TO_END_ID = :goldman_sachs_end_to_end_id
            GOLDMAN_SACHS_PAYMENT_REQUEST_ID = :goldman_sachs_payment_request_id
            GOLDMAN_SACHS_REQUEST_ID = :goldman_sachs_request_id
            GOLDMAN_SACHS_UNIQUE_PAYMENT_ID = :goldman_sachs_unique_payment_id
            INTERAC_MESSAGE_ID = :interac_message_id
            JPMC_CCN = :jpmc_ccn
            JPMC_CLEARING_SYSTEM_REFERENCE = :jpmc_clearing_system_reference
            JPMC_CUSTOMER_REFERENCE_ID = :jpmc_customer_reference_id
            JPMC_END_TO_END_ID = :jpmc_end_to_end_id
            JPMC_FIRM_ROOT_ID = :jpmc_firm_root_id
            JPMC_FX_TRN_ID = :jpmc_fx_trn_id
            JPMC_P3_ID = :jpmc_p3_id
            JPMC_PAYMENT_BATCH_ID = :jpmc_payment_batch_id
            JPMC_PAYMENT_INFORMATION_ID = :jpmc_payment_information_id
            JPMC_PAYMENT_RETURNED_DATETIME = :jpmc_payment_returned_datetime
            LOB_CHECK_ID = :lob_check_id
            OTHER = :other
            PARTIAL_SWIFT_MIR = :partial_swift_mir
            PNC_CLEARING_REFERENCE = :pnc_clearing_reference
            PNC_INSTRUCTION_ID = :pnc_instruction_id
            PNC_MULTIPAYMENT_ID = :pnc_multipayment_id
            PNC_PAYMENT_TRACE_ID = :pnc_payment_trace_id
            PNC_TRANSACTION_REFERENCE_NUMBER = :pnc_transaction_reference_number
            RSPEC_VENDOR_PAYMENT_ID = :rspec_vendor_payment_id
            RTP_INSTRUCTION_ID = :rtp_instruction_id
            SIGNET_API_REFERENCE_ID = :signet_api_reference_id
            SIGNET_CONFIRMATION_ID = :signet_confirmation_id
            SIGNET_REQUEST_ID = :signet_request_id
            SILVERGATE_PAYMENT_ID = :silvergate_payment_id
            SVB_END_TO_END_ID = :svb_end_to_end_id
            SVB_PAYMENT_ID = :svb_payment_id
            SVB_TRANSACTION_CLEARED_FOR_SANCTIONS_REVIEW = :svb_transaction_cleared_for_sanctions_review
            SVB_TRANSACTION_HELD_FOR_SANCTIONS_REVIEW = :svb_transaction_held_for_sanctions_review
            SWIFT_MIR = :swift_mir
            SWIFT_UETR = :swift_uetr
            UMB_PRODUCT_PARTNER_ACCOUNT_NUMBER = :umb_product_partner_account_number
            USBANK_PAYMENT_APPLICATION_REFERENCE_ID = :usbank_payment_application_reference_id
            USBANK_PAYMENT_ID = :usbank_payment_id
            USBANK_PENDING_RTP_PAYMENT_ID = :usbank_pending_rtp_payment_id
            USBANK_POSTED_RTP_PAYMENT_ID = :usbank_posted_rtp_payment_id
            WELLS_FARGO_END_TO_END_ID = :wells_fargo_end_to_end_id
            WELLS_FARGO_PAYMENT_ID = :wells_fargo_payment_id
            WELLS_FARGO_TRACE_NUMBER = :wells_fargo_trace_number
            WELLS_FARGO_UETR = :wells_fargo_uetr

            finalize!
          end
        end

        # The current status of the payment order.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :approved
        #   # ...
        # in :cancelled
        #   # ...
        # in :completed
        #   # ...
        # in :denied
        #   # ...
        # in :failed
        #   # ...
        # in ...
        #   #...
        # end
        # ```
        class Status < ModernTreasury::Enum
          APPROVED = :approved
          CANCELLED = :cancelled
          COMPLETED = :completed
          DENIED = :denied
          FAILED = :failed
          NEEDS_APPROVAL = :needs_approval
          PENDING = :pending
          PROCESSING = :processing
          RETURNED = :returned
          REVERSED = :reversed
          SENT = :sent

          finalize!
        end

        # The account to which the originating of this payment should be attributed to. Can be a `virtual_account` or `internal_account`.
        #
        # @example
        #
        # ```ruby
        # case union
        # in ModernTreasury::Models::VirtualAccount
        #   # ...
        # in ModernTreasury::Models::InternalAccount
        #   # ...
        # end
        # ```
        class UltimateOriginatingAccount < ModernTreasury::Union
          variant -> { ModernTreasury::Models::VirtualAccount }

          variant -> { ModernTreasury::Models::InternalAccount }
        end

        class VirtualAccount < ModernTreasury::BaseModel
          # @!attribute id
          #
          #   @return [String]
          required :id, String

          # @!attribute account_details
          #   An array of account detail objects.
          #
          #   @return [Array<ModernTreasury::Models::AccountDetail>]
          required :account_details, ModernTreasury::ArrayOf[-> { ModernTreasury::Models::AccountDetail }]

          # @!attribute counterparty_id
          #   The ID of a counterparty that the virtual account belongs to. Optional.
          #
          #   @return [String, nil]
          required :counterparty_id, String

          # @!attribute created_at
          #
          #   @return [Time]
          required :created_at, Time

          # @!attribute credit_ledger_account_id
          #   The ID of a credit normal ledger account. When money enters the virtual account, this ledger account will be credited. Must be accompanied by a debit_ledger_account_id if present.
          #
          #   @return [String, nil]
          required :credit_ledger_account_id, String

          # @!attribute debit_ledger_account_id
          #   The ID of a debit normal ledger account. When money enters the virtual account, this ledger account will be debited. Must be accompanied by a credit_ledger_account_id if present.
          #
          #   @return [String, nil]
          required :debit_ledger_account_id, String

          # @!attribute description
          #   An optional free-form description for internal use.
          #
          #   @return [String, nil]
          required :description, String

          # @!attribute discarded_at
          #
          #   @return [Time, nil]
          required :discarded_at, Time

          # @!attribute internal_account_id
          #   The ID of the internal account that the virtual account is in.
          #
          #   @return [String]
          required :internal_account_id, String

          # @!attribute ledger_account_id
          #   If the virtual account links to a ledger account in Modern Treasury, the id of the ledger account will be populated here.
          #
          #   @return [String, nil]
          required :ledger_account_id, String

          # @!attribute live_mode
          #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
          #
          #   @return [Boolean]
          required :live_mode, ModernTreasury::BooleanModel

          # @!attribute metadata
          #   Additional data represented as key-value pairs. Both the key and value must be strings.
          #
          #   @return [Hash{Symbol => String}]
          required :metadata, ModernTreasury::HashOf[String]

          # @!attribute name
          #   The name of the virtual account.
          #
          #   @return [String]
          required :name, String

          # @!attribute object
          #
          #   @return [String]
          required :object, String

          # @!attribute routing_details
          #   An array of routing detail objects. These will be the routing details of the internal account.
          #
          #   @return [Array<ModernTreasury::Models::RoutingDetail>]
          required :routing_details, ModernTreasury::ArrayOf[-> { ModernTreasury::Models::RoutingDetail }]

          # @!attribute updated_at
          #
          #   @return [Time]
          required :updated_at, Time

          # @!parse
          #   # @param id [String]
          #   #
          #   # @param account_details [Array<ModernTreasury::Models::AccountDetail>] An array of account detail objects.
          #   #
          #   # @param counterparty_id [String, nil] The ID of a counterparty that the virtual account belongs to. Optional.
          #   #
          #   # @param created_at [String]
          #   #
          #   # @param credit_ledger_account_id [String, nil] The ID of a credit normal ledger account. When money enters the virtual account,
          #   #   this ledger account will be credited. Must be accompanied by a
          #   #   debit_ledger_account_id if present.
          #   #
          #   # @param debit_ledger_account_id [String, nil] The ID of a debit normal ledger account. When money enters the virtual account,
          #   #   this ledger account will be debited. Must be accompanied by a
          #   #   credit_ledger_account_id if present.
          #   #
          #   # @param description [String, nil] An optional free-form description for internal use.
          #   #
          #   # @param discarded_at [String, nil]
          #   #
          #   # @param internal_account_id [String] The ID of the internal account that the virtual account is in.
          #   #
          #   # @param ledger_account_id [String, nil] If the virtual account links to a ledger account in Modern Treasury, the id of
          #   #   the ledger account will be populated here.
          #   #
          #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
          #   #   if it exists in the test environment.
          #   #
          #   # @param metadata [Hash{Symbol => String}] Additional data represented as key-value pairs. Both the key and value must be
          #   #   strings.
          #   #
          #   # @param name [String] The name of the virtual account.
          #   #
          #   # @param object [String]
          #   #
          #   # @param routing_details [Array<ModernTreasury::Models::RoutingDetail>] An array of routing detail objects. These will be the routing details of the
          #   #   internal account.
          #   #
          #   # @param updated_at [String]
          #   #
          #   def initialize(
          #     id:,
          #     account_details:,
          #     counterparty_id:,
          #     created_at:,
          #     credit_ledger_account_id:,
          #     debit_ledger_account_id:,
          #     description:,
          #     discarded_at:,
          #     internal_account_id:,
          #     ledger_account_id:,
          #     live_mode:,
          #     metadata:,
          #     name:,
          #     object:,
          #     routing_details:,
          #     updated_at:,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void
        end

        class InternalAccount < ModernTreasury::BaseModel
          # @!attribute id
          #
          #   @return [String]
          required :id, String

          # @!attribute account_details
          #   An array of account detail objects.
          #
          #   @return [Array<ModernTreasury::Models::AccountDetail>]
          required :account_details, ModernTreasury::ArrayOf[-> { ModernTreasury::Models::AccountDetail }]

          # @!attribute account_type
          #   Can be checking, savings or other.
          #
          #   @return [Symbol, ModernTreasury::Models::InternalAccount::AccountType, nil]
          required :account_type, enum: -> { ModernTreasury::Models::InternalAccount::AccountType }

          # @!attribute connection
          #   Specifies which financial institution the accounts belong to.
          #
          #   @return [ModernTreasury::Models::Connection]
          required :connection, -> { ModernTreasury::Models::Connection }

          # @!attribute counterparty_id
          #   The Counterparty associated to this account.
          #
          #   @return [String, nil]
          required :counterparty_id, String

          # @!attribute created_at
          #
          #   @return [Time]
          required :created_at, Time

          # @!attribute currency
          #   The currency of the account.
          #
          #   @return [Symbol, ModernTreasury::Models::Currency]
          required :currency, enum: -> { ModernTreasury::Models::Currency }

          # @!attribute ledger_account_id
          #   If the internal account links to a ledger account in Modern Treasury, the id of the ledger account will be populated here.
          #
          #   @return [String, nil]
          required :ledger_account_id, String

          # @!attribute legal_entity_id
          #   The Legal Entity associated to this account
          #
          #   @return [String, nil]
          required :legal_entity_id, String

          # @!attribute live_mode
          #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
          #
          #   @return [Boolean]
          required :live_mode, ModernTreasury::BooleanModel

          # @!attribute metadata
          #   Additional data represented as key-value pairs. Both the key and value must be strings.
          #
          #   @return [Hash{Symbol => String}]
          required :metadata, ModernTreasury::HashOf[String]

          # @!attribute name
          #   A nickname for the account.
          #
          #   @return [String, nil]
          required :name, String

          # @!attribute object
          #
          #   @return [String]
          required :object, String

          # @!attribute parent_account_id
          #   The parent InternalAccount of this account.
          #
          #   @return [String, nil]
          required :parent_account_id, String

          # @!attribute party_address
          #   The address associated with the owner or null.
          #
          #   @return [ModernTreasury::Models::InternalAccount::PartyAddress, nil]
          required :party_address, -> { ModernTreasury::Models::InternalAccount::PartyAddress }

          # @!attribute party_name
          #   The legal name of the entity which owns the account.
          #
          #   @return [String]
          required :party_name, String

          # @!attribute party_type
          #   Either individual or business.
          #
          #   @return [Symbol, ModernTreasury::Models::InternalAccount::PartyType, nil]
          required :party_type, enum: -> { ModernTreasury::Models::InternalAccount::PartyType }

          # @!attribute routing_details
          #   An array of routing detail objects.
          #
          #   @return [Array<ModernTreasury::Models::RoutingDetail>]
          required :routing_details, ModernTreasury::ArrayOf[-> { ModernTreasury::Models::RoutingDetail }]

          # @!attribute updated_at
          #
          #   @return [Time]
          required :updated_at, Time

          # @!parse
          #   # @param id [String]
          #   #
          #   # @param account_details [Array<ModernTreasury::Models::AccountDetail>] An array of account detail objects.
          #   #
          #   # @param account_type [String, nil] Can be checking, savings or other.
          #   #
          #   # @param connection [ModernTreasury::Models::Connection] Specifies which financial institution the accounts belong to.
          #   #
          #   # @param counterparty_id [String, nil] The Counterparty associated to this account.
          #   #
          #   # @param created_at [String]
          #   #
          #   # @param currency [String] The currency of the account.
          #   #
          #   # @param ledger_account_id [String, nil] If the internal account links to a ledger account in Modern Treasury, the id of
          #   #   the ledger account will be populated here.
          #   #
          #   # @param legal_entity_id [String, nil] The Legal Entity associated to this account
          #   #
          #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
          #   #   if it exists in the test environment.
          #   #
          #   # @param metadata [Hash{Symbol => String}] Additional data represented as key-value pairs. Both the key and value must be
          #   #   strings.
          #   #
          #   # @param name [String, nil] A nickname for the account.
          #   #
          #   # @param object [String]
          #   #
          #   # @param parent_account_id [String, nil] The parent InternalAccount of this account.
          #   #
          #   # @param party_address [ModernTreasury::Models::InternalAccount::PartyAddress, nil] The address associated with the owner or null.
          #   #
          #   # @param party_name [String] The legal name of the entity which owns the account.
          #   #
          #   # @param party_type [String, nil] Either individual or business.
          #   #
          #   # @param routing_details [Array<ModernTreasury::Models::RoutingDetail>] An array of routing detail objects.
          #   #
          #   # @param updated_at [String]
          #   #
          #   def initialize(
          #     id:,
          #     account_details:,
          #     account_type:,
          #     connection:,
          #     counterparty_id:,
          #     created_at:,
          #     currency:,
          #     ledger_account_id:,
          #     legal_entity_id:,
          #     live_mode:,
          #     metadata:,
          #     name:,
          #     object:,
          #     parent_account_id:,
          #     party_address:,
          #     party_name:,
          #     party_type:,
          #     routing_details:,
          #     updated_at:,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          # Can be checking, savings or other.
          #
          # @example
          #
          # ```ruby
          # case enum
          # in :cash
          #   # ...
          # in :checking
          #   # ...
          # in :general_ledger
          #   # ...
          # in :loan
          #   # ...
          # in :non_resident
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class AccountType < ModernTreasury::Enum
            CASH = :cash
            CHECKING = :checking
            GENERAL_LEDGER = :general_ledger
            LOAN = :loan
            NON_RESIDENT = :non_resident
            OTHER = :other
            OVERDRAFT = :overdraft
            SAVINGS = :savings

            finalize!
          end

          class PartyAddress < ModernTreasury::BaseModel
            # @!attribute id
            #
            #   @return [String]
            required :id, String

            # @!attribute country
            #   Country code conforms to [ISO 3166-1 alpha-2]
            #
            #   @return [String, nil]
            required :country, String

            # @!attribute created_at
            #
            #   @return [Time]
            required :created_at, Time

            # @!attribute line1
            #
            #   @return [String, nil]
            required :line1, String

            # @!attribute line2
            #
            #   @return [String, nil]
            required :line2, String

            # @!attribute live_mode
            #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
            #
            #   @return [Boolean]
            required :live_mode, ModernTreasury::BooleanModel

            # @!attribute locality
            #   Locality or City.
            #
            #   @return [String, nil]
            required :locality, String

            # @!attribute object
            #
            #   @return [String]
            required :object, String

            # @!attribute postal_code
            #   The postal code of the address.
            #
            #   @return [String, nil]
            required :postal_code, String

            # @!attribute region
            #   Region or State.
            #
            #   @return [String, nil]
            required :region, String

            # @!attribute updated_at
            #
            #   @return [Time]
            required :updated_at, Time

            # @!parse
            #   # The address associated with the owner or null.
            #   #
            #   # @param id [String]
            #   #
            #   # @param country [String, nil] Country code conforms to [ISO 3166-1 alpha-2]
            #   #
            #   # @param created_at [String]
            #   #
            #   # @param line1 [String, nil]
            #   #
            #   # @param line2 [String, nil]
            #   #
            #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
            #   #   if it exists in the test environment.
            #   #
            #   # @param locality [String, nil] Locality or City.
            #   #
            #   # @param object [String]
            #   #
            #   # @param postal_code [String, nil] The postal code of the address.
            #   #
            #   # @param region [String, nil] Region or State.
            #   #
            #   # @param updated_at [String]
            #   #
            #   def initialize(
            #     id:,
            #     country:,
            #     created_at:,
            #     line1:,
            #     line2:,
            #     live_mode:,
            #     locality:,
            #     object:,
            #     postal_code:,
            #     region:,
            #     updated_at:,
            #     **
            #   )
            #     super
            #   end

            # def initialize: (Hash | ModernTreasury::BaseModel) -> void
          end

          # Either individual or business.
          #
          # @example
          #
          # ```ruby
          # case enum
          # in :business
          #   # ...
          # in :individual
          #   # ...
          # end
          # ```
          class PartyType < ModernTreasury::Enum
            BUSINESS = :business
            INDIVIDUAL = :individual

            finalize!
          end
        end

        # @example
        #
        # ```ruby
        # case enum
        # in :internal_account
        #   # ...
        # in :virtual_account
        #   # ...
        # end
        # ```
        class UltimateOriginatingAccountType < ModernTreasury::Enum
          INTERNAL_ACCOUNT = :internal_account
          VIRTUAL_ACCOUNT = :virtual_account

          finalize!
        end
      end

      class ExpectedPayment < ModernTreasury::BaseModel
        # @!attribute id
        #
        #   @return [String]
        required :id, String

        # @!attribute amount_lower_bound
        #   The lowest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.
        #
        #   @return [Integer, nil]
        required :amount_lower_bound, Integer

        # @!attribute amount_upper_bound
        #   The highest amount this expected payment may be equal to. Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.
        #
        #   @return [Integer, nil]
        required :amount_upper_bound, Integer

        # @!attribute counterparty_id
        #   The ID of the counterparty you expect for this payment.
        #
        #   @return [String, nil]
        required :counterparty_id, String

        # @!attribute created_at
        #
        #   @return [Time]
        required :created_at, Time

        # @!attribute currency
        #   Must conform to ISO 4217. Defaults to the currency of the internal account.
        #
        #   @return [Symbol, ModernTreasury::Models::Currency, nil]
        required :currency, enum: -> { ModernTreasury::Models::Currency }

        # @!attribute date_lower_bound
        #   The earliest date the payment may come in. Format: yyyy-mm-dd
        #
        #   @return [Date, nil]
        required :date_lower_bound, Date

        # @!attribute date_upper_bound
        #   The latest date the payment may come in. Format: yyyy-mm-dd
        #
        #   @return [Date, nil]
        required :date_upper_bound, Date

        # @!attribute description
        #   An optional description for internal use.
        #
        #   @return [String, nil]
        required :description, String

        # @!attribute direction
        #   One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.
        #
        #   @return [Symbol, ModernTreasury::Models::ExpectedPayment::Direction, nil]
        required :direction, enum: -> { ModernTreasury::Models::ExpectedPayment::Direction }

        # @!attribute internal_account_id
        #   The ID of the Internal Account for the expected payment.
        #
        #   @return [String, nil]
        required :internal_account_id, String

        # @!attribute ledger_transaction_id
        #   The ID of the ledger transaction linked to the expected payment.
        #
        #   @return [String, nil]
        required :ledger_transaction_id, String

        # @!attribute live_mode
        #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
        #
        #   @return [Boolean]
        required :live_mode, ModernTreasury::BooleanModel

        # @!attribute metadata
        #   Additional data represented as key-value pairs. Both the key and value must be strings.
        #
        #   @return [Hash{Symbol => String}]
        required :metadata, ModernTreasury::HashOf[String]

        # @!attribute object
        #
        #   @return [String]
        required :object, String

        # @!attribute reconciliation_filters
        #   The reconciliation filters you have for this payment.
        #
        #   @return [Object, nil]
        required :reconciliation_filters, ModernTreasury::Unknown

        # @!attribute reconciliation_groups
        #   The reconciliation groups you have for this payment.
        #
        #   @return [Object, nil]
        required :reconciliation_groups, ModernTreasury::Unknown

        # @!attribute reconciliation_method
        #   One of manual if this expected payment was manually reconciled in the dashboard, automatic if it was automatically reconciled by Modern Treasury, or null if it is unreconciled.
        #
        #   @return [Symbol, ModernTreasury::Models::ExpectedPayment::ReconciliationMethod, nil]
        required :reconciliation_method,
                 enum: -> { ModernTreasury::Models::ExpectedPayment::ReconciliationMethod }

        # @!attribute reconciliation_rule_variables
        #   An array of reconciliation rule variables for this payment.
        #
        #   @return [Array<ModernTreasury::Models::ReconciliationRule>, nil]
        required :reconciliation_rule_variables,
                 ModernTreasury::ArrayOf[-> { ModernTreasury::Models::ReconciliationRule }]

        # @!attribute remittance_information
        #   For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the "Originator to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        #
        #   @return [String, nil]
        required :remittance_information, String

        # @!attribute statement_descriptor
        #   The statement description you expect to see on the transaction. For ACH payments, this will be the full line item passed from the bank. For wire payments, this will be the OBI field on the wire. For check payments, this will be the memo field.
        #
        #   @return [String, nil]
        required :statement_descriptor, String

        # @!attribute status
        #   One of unreconciled, partially_reconciled, reconciled, or archived.
        #
        #   @return [Symbol, ModernTreasury::Models::ExpectedPayment::Status]
        required :status, enum: -> { ModernTreasury::Models::ExpectedPayment::Status }

        # @!attribute transaction_id
        #   The ID of the Transaction this expected payment object has been matched to.
        #
        #   @return [String, nil]
        required :transaction_id, String

        # @!attribute transaction_line_item_id
        #   The ID of the Transaction Line Item this expected payment has been matched to.
        #
        #   @return [String, nil]
        required :transaction_line_item_id, String

        # @!attribute type
        #   One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen, sepa, signet, wire.
        #
        #   @return [Symbol, ModernTreasury::Models::ExpectedPaymentType, nil]
        required :type, enum: -> { ModernTreasury::Models::ExpectedPaymentType }

        # @!attribute updated_at
        #
        #   @return [Time]
        required :updated_at, Time

        # @!parse
        #   # @param id [String]
        #   #
        #   # @param amount_lower_bound [Integer, nil] The lowest amount this expected payment may be equal to. Value in specified
        #   #   currency's smallest unit. e.g. $10 would be represented as 1000.
        #   #
        #   # @param amount_upper_bound [Integer, nil] The highest amount this expected payment may be equal to. Value in specified
        #   #   currency's smallest unit. e.g. $10 would be represented as 1000.
        #   #
        #   # @param counterparty_id [String, nil] The ID of the counterparty you expect for this payment.
        #   #
        #   # @param created_at [String]
        #   #
        #   # @param currency [String, nil] Must conform to ISO 4217. Defaults to the currency of the internal account.
        #   #
        #   # @param date_lower_bound [String, nil] The earliest date the payment may come in. Format: yyyy-mm-dd
        #   #
        #   # @param date_upper_bound [String, nil] The latest date the payment may come in. Format: yyyy-mm-dd
        #   #
        #   # @param description [String, nil] An optional description for internal use.
        #   #
        #   # @param direction [String, nil] One of credit or debit. When you are receiving money, use credit. When you are
        #   #   being charged, use debit.
        #   #
        #   # @param internal_account_id [String, nil] The ID of the Internal Account for the expected payment.
        #   #
        #   # @param ledger_transaction_id [String, nil] The ID of the ledger transaction linked to the expected payment.
        #   #
        #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
        #   #   if it exists in the test environment.
        #   #
        #   # @param metadata [Hash{Symbol => String}] Additional data represented as key-value pairs. Both the key and value must be
        #   #   strings.
        #   #
        #   # @param object [String]
        #   #
        #   # @param reconciliation_filters [Object, nil] The reconciliation filters you have for this payment.
        #   #
        #   # @param reconciliation_groups [Object, nil] The reconciliation groups you have for this payment.
        #   #
        #   # @param reconciliation_method [String, nil] One of manual if this expected payment was manually reconciled in the dashboard,
        #   #   automatic if it was automatically reconciled by Modern Treasury, or null if it
        #   #   is unreconciled.
        #   #
        #   # @param reconciliation_rule_variables [Array<ModernTreasury::Models::ReconciliationRule>, nil] An array of reconciliation rule variables for this payment.
        #   #
        #   # @param remittance_information [String, nil] For `ach`, this field will be passed through on an addenda record. For `wire`
        #   #   payments the field will be passed through as the "Originator to Beneficiary
        #   #   Information", also known as OBI or Fedwire tag 6000.
        #   #
        #   # @param statement_descriptor [String, nil] The statement description you expect to see on the transaction. For ACH
        #   #   payments, this will be the full line item passed from the bank. For wire
        #   #   payments, this will be the OBI field on the wire. For check payments, this will
        #   #   be the memo field.
        #   #
        #   # @param status [String] One of unreconciled, partially_reconciled, reconciled, or archived.
        #   #
        #   # @param transaction_id [String, nil] The ID of the Transaction this expected payment object has been matched to.
        #   #
        #   # @param transaction_line_item_id [String, nil] The ID of the Transaction Line Item this expected payment has been matched to.
        #   #
        #   # @param type [String, nil] One of: ach, au_becs, bacs, book, check, eft, interac, provxchange, rtp, sen,
        #   #   sepa, signet, wire.
        #   #
        #   # @param updated_at [String]
        #   #
        #   def initialize(
        #     id:,
        #     amount_lower_bound:,
        #     amount_upper_bound:,
        #     counterparty_id:,
        #     created_at:,
        #     currency:,
        #     date_lower_bound:,
        #     date_upper_bound:,
        #     description:,
        #     direction:,
        #     internal_account_id:,
        #     ledger_transaction_id:,
        #     live_mode:,
        #     metadata:,
        #     object:,
        #     reconciliation_filters:,
        #     reconciliation_groups:,
        #     reconciliation_method:,
        #     reconciliation_rule_variables:,
        #     remittance_information:,
        #     statement_descriptor:,
        #     status:,
        #     transaction_id:,
        #     transaction_line_item_id:,
        #     type:,
        #     updated_at:,
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void

        # One of credit or debit. When you are receiving money, use credit. When you are being charged, use debit.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :credit
        #   # ...
        # in :debit
        #   # ...
        # end
        # ```
        class Direction < ModernTreasury::Enum
          CREDIT = :credit
          DEBIT = :debit

          finalize!
        end

        # One of manual if this expected payment was manually reconciled in the dashboard, automatic if it was automatically reconciled by Modern Treasury, or null if it is unreconciled.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :automatic
        #   # ...
        # in :manual
        #   # ...
        # end
        # ```
        class ReconciliationMethod < ModernTreasury::Enum
          AUTOMATIC = :automatic
          MANUAL = :manual

          finalize!
        end

        # One of unreconciled, partially_reconciled, reconciled, or archived.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :archived
        #   # ...
        # in :partially_reconciled
        #   # ...
        # in :reconciled
        #   # ...
        # in :unreconciled
        #   # ...
        # end
        # ```
        class Status < ModernTreasury::Enum
          ARCHIVED = :archived
          PARTIALLY_RECONCILED = :partially_reconciled
          RECONCILED = :reconciled
          UNRECONCILED = :unreconciled

          finalize!
        end
      end

      class LedgerTransaction < ModernTreasury::BaseModel
        # @!attribute id
        #
        #   @return [String]
        required :id, String

        # @!attribute created_at
        #
        #   @return [Time]
        required :created_at, Time

        # @!attribute description
        #   An optional description for internal use.
        #
        #   @return [String, nil]
        required :description, String

        # @!attribute effective_at
        #   The timestamp (ISO8601 format) at which the ledger transaction happened for reporting purposes.
        #
        #   @return [Time]
        required :effective_at, Time

        # @!attribute effective_date
        #   The date (YYYY-MM-DD) on which the ledger transaction happened for reporting purposes.
        #
        #   @return [Date]
        required :effective_date, Date

        # @!attribute external_id
        #   A unique string to represent the ledger transaction. Only one pending or posted ledger transaction may have this ID in the ledger.
        #
        #   @return [String, nil]
        required :external_id, String

        # @!attribute ledger_entries
        #   An array of ledger entry objects.
        #
        #   @return [Array<ModernTreasury::Models::LedgerEntry>]
        required :ledger_entries, ModernTreasury::ArrayOf[-> { ModernTreasury::Models::LedgerEntry }]

        # @!attribute ledger_id
        #   The ID of the ledger this ledger transaction belongs to.
        #
        #   @return [String]
        required :ledger_id, String

        # @!attribute ledgerable_id
        #   If the ledger transaction can be reconciled to another object in Modern Treasury, the id will be populated here, otherwise null.
        #
        #   @return [String, nil]
        required :ledgerable_id, String

        # @!attribute ledgerable_type
        #   If the ledger transaction can be reconciled to another object in Modern Treasury, the type will be populated here, otherwise null. This can be one of payment_order, incoming_payment_detail, expected_payment, return, paper_item, or reversal.
        #
        #   @return [Symbol, ModernTreasury::Models::LedgerTransaction::LedgerableType, nil]
        required :ledgerable_type, enum: -> { ModernTreasury::Models::LedgerTransaction::LedgerableType }

        # @!attribute live_mode
        #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
        #
        #   @return [Boolean]
        required :live_mode, ModernTreasury::BooleanModel

        # @!attribute metadata
        #   Additional data represented as key-value pairs. Both the key and value must be strings.
        #
        #   @return [Hash{Symbol => String}]
        required :metadata, ModernTreasury::HashOf[String]

        # @!attribute object
        #
        #   @return [String]
        required :object, String

        # @!attribute posted_at
        #   The time on which the ledger transaction posted. This is null if the ledger transaction is pending.
        #
        #   @return [Time, nil]
        required :posted_at, Time

        # @!attribute reversed_by_ledger_transaction_id
        #   The ID of the ledger transaction that reversed this ledger transaction.
        #
        #   @return [String, nil]
        required :reversed_by_ledger_transaction_id, String

        # @!attribute reverses_ledger_transaction_id
        #   The ID of the original ledger transaction that this ledger transaction reverses.
        #
        #   @return [String, nil]
        required :reverses_ledger_transaction_id, String

        # @!attribute status
        #   To post a ledger transaction at creation, use `posted`.
        #
        #   @return [Symbol, ModernTreasury::Models::LedgerTransaction::Status]
        required :status, enum: -> { ModernTreasury::Models::LedgerTransaction::Status }

        # @!attribute updated_at
        #
        #   @return [Time]
        required :updated_at, Time

        # @!parse
        #   # @param id [String]
        #   #
        #   # @param created_at [String]
        #   #
        #   # @param description [String, nil] An optional description for internal use.
        #   #
        #   # @param effective_at [String] The timestamp (ISO8601 format) at which the ledger transaction happened for
        #   #   reporting purposes.
        #   #
        #   # @param effective_date [String] The date (YYYY-MM-DD) on which the ledger transaction happened for reporting
        #   #   purposes.
        #   #
        #   # @param external_id [String, nil] A unique string to represent the ledger transaction. Only one pending or posted
        #   #   ledger transaction may have this ID in the ledger.
        #   #
        #   # @param ledger_entries [Array<ModernTreasury::Models::LedgerEntry>] An array of ledger entry objects.
        #   #
        #   # @param ledger_id [String] The ID of the ledger this ledger transaction belongs to.
        #   #
        #   # @param ledgerable_id [String, nil] If the ledger transaction can be reconciled to another object in Modern
        #   #   Treasury, the id will be populated here, otherwise null.
        #   #
        #   # @param ledgerable_type [String, nil] If the ledger transaction can be reconciled to another object in Modern
        #   #   Treasury, the type will be populated here, otherwise null. This can be one of
        #   #   payment_order, incoming_payment_detail, expected_payment, return, paper_item, or
        #   #   reversal.
        #   #
        #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
        #   #   if it exists in the test environment.
        #   #
        #   # @param metadata [Hash{Symbol => String}] Additional data represented as key-value pairs. Both the key and value must be
        #   #   strings.
        #   #
        #   # @param object [String]
        #   #
        #   # @param posted_at [String, nil] The time on which the ledger transaction posted. This is null if the ledger
        #   #   transaction is pending.
        #   #
        #   # @param reversed_by_ledger_transaction_id [String, nil] The ID of the ledger transaction that reversed this ledger transaction.
        #   #
        #   # @param reverses_ledger_transaction_id [String, nil] The ID of the original ledger transaction that this ledger transaction reverses.
        #   #
        #   # @param status [String] To post a ledger transaction at creation, use `posted`.
        #   #
        #   # @param updated_at [String]
        #   #
        #   def initialize(
        #     id:,
        #     created_at:,
        #     description:,
        #     effective_at:,
        #     effective_date:,
        #     external_id:,
        #     ledger_entries:,
        #     ledger_id:,
        #     ledgerable_id:,
        #     ledgerable_type:,
        #     live_mode:,
        #     metadata:,
        #     object:,
        #     posted_at:,
        #     reversed_by_ledger_transaction_id:,
        #     reverses_ledger_transaction_id:,
        #     status:,
        #     updated_at:,
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void

        # If the ledger transaction can be reconciled to another object in Modern Treasury, the type will be populated here, otherwise null. This can be one of payment_order, incoming_payment_detail, expected_payment, return, paper_item, or reversal.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :expected_payment
        #   # ...
        # in :incoming_payment_detail
        #   # ...
        # in :paper_item
        #   # ...
        # in :payment_order
        #   # ...
        # in :return
        #   # ...
        # in ...
        #   #...
        # end
        # ```
        class LedgerableType < ModernTreasury::Enum
          EXPECTED_PAYMENT = :expected_payment
          INCOMING_PAYMENT_DETAIL = :incoming_payment_detail
          PAPER_ITEM = :paper_item
          PAYMENT_ORDER = :payment_order
          RETURN = :return
          REVERSAL = :reversal

          finalize!
        end

        # To post a ledger transaction at creation, use `posted`.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :archived
        #   # ...
        # in :pending
        #   # ...
        # in :posted
        #   # ...
        # end
        # ```
        class Status < ModernTreasury::Enum
          ARCHIVED = :archived
          PENDING = :pending
          POSTED = :posted

          finalize!
        end
      end

      class Transaction < ModernTreasury::BaseModel
        # @!attribute id
        #
        #   @return [String]
        required :id, String

        # @!attribute amount
        #   Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.
        #
        #   @return [Integer]
        required :amount, Integer

        # @!attribute as_of_date
        #   The date on which the transaction occurred.
        #
        #   @return [Date, nil]
        required :as_of_date, Date

        # @!attribute as_of_time
        #   The time on which the transaction occurred. Depending on the granularity of the timestamp information received from the bank, it may be `null`.
        #
        #   @return [String, nil]
        required :as_of_time, String

        # @!attribute as_of_timezone
        #   The timezone in which the `as_of_time` is represented. Can be `null` if the bank does not provide timezone info.
        #
        #   @return [String, nil]
        required :as_of_timezone, String

        # @!attribute created_at
        #
        #   @return [Time]
        required :created_at, Time

        # @!attribute currency
        #   Currency that this transaction is denominated in.
        #
        #   @return [Symbol, ModernTreasury::Models::Currency]
        required :currency, enum: -> { ModernTreasury::Models::Currency }

        # @!attribute custom_identifiers
        #   An object containing key-value pairs, each with a custom identifier as the key and a string value.
        #
        #   @return [Hash{Symbol => String}]
        required :custom_identifiers, ModernTreasury::HashOf[String]

        # @!attribute direction
        #   Either `credit` or `debit`.
        #
        #   @return [String]
        required :direction, String

        # @!attribute discarded_at
        #
        #   @return [Time, nil]
        required :discarded_at, Time

        # @!attribute foreign_exchange_rate
        #   Associated serialized foreign exchange rate information.
        #
        #   @return [ModernTreasury::Models::Transaction::ForeignExchangeRate, nil]
        required :foreign_exchange_rate, -> { ModernTreasury::Models::Transaction::ForeignExchangeRate }

        # @!attribute internal_account_id
        #   The ID of the relevant Internal Account.
        #
        #   @return [String]
        required :internal_account_id, String

        # @!attribute live_mode
        #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
        #
        #   @return [Boolean]
        required :live_mode, ModernTreasury::BooleanModel

        # @!attribute metadata
        #   Additional data represented as key-value pairs. Both the key and value must be strings.
        #
        #   @return [Hash{Symbol => String}]
        required :metadata, ModernTreasury::HashOf[String]

        # @!attribute object
        #
        #   @return [String]
        required :object, String

        # @!attribute posted
        #   This field will be `true` if the transaction has posted to the account.
        #
        #   @return [Boolean]
        required :posted, ModernTreasury::BooleanModel

        # @!attribute reconciled
        #   This field will be `true` if a transaction is reconciled by the Modern Treasury system. This means that it has transaction line items that sum up to the transaction's amount.
        #
        #   @return [Boolean]
        required :reconciled, ModernTreasury::BooleanModel

        # @!attribute type
        #   The type of the transaction. Examples could be `card, `ach`, `wire`, `check`, `rtp`, `book`, or `sen`.
        #
        #   @return [Symbol, ModernTreasury::Models::Transaction::Type]
        required :type, enum: -> { ModernTreasury::Models::Transaction::Type }

        # @!attribute updated_at
        #
        #   @return [Time]
        required :updated_at, Time

        # @!attribute vendor_code
        #   When applicable, the bank-given code that determines the transaction's category. For most banks this is the BAI2/BTRS transaction code.
        #
        #   @return [String, nil]
        required :vendor_code, String

        # @!attribute vendor_code_type
        #   The type of `vendor_code` being reported. Can be one of `bai2`, `bankprov`, `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`, `dwolla`, `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`, `silvergate`, `swift`, `us_bank`, or others.
        #
        #   @return [Symbol, ModernTreasury::Models::Transaction::VendorCodeType, nil]
        required :vendor_code_type, enum: -> { ModernTreasury::Models::Transaction::VendorCodeType }

        # @!attribute vendor_customer_id
        #   An identifier given to this transaction by the bank, often `null`.
        #
        #   @return [String, nil]
        required :vendor_customer_id, String

        # @!attribute vendor_id
        #   An identifier given to this transaction by the bank.
        #
        #   @return [String, nil]
        required :vendor_id, String

        # @!attribute details
        #   This field contains additional information that the bank provided about the transaction. This is structured data. Some of the data in here might overlap with what is in the `vendor_description`. For example, the OBI could be a part of the vendor description, and it would also be included in here. The attributes that are passed through the details field will vary based on your banking partner. Currently, the following keys may be in the details object: `originator_name`, `originator_to_beneficiary_information`.
        #
        #   @return [Hash{Symbol => String}]
        optional :details, ModernTreasury::HashOf[String]

        # @!attribute vendor_description
        #   The transaction detail text that often appears in on your bank statement and in your banking portal.
        #
        #   @return [String, nil]
        optional :vendor_description, String

        # @!parse
        #   # @param id [String]
        #   #
        #   # @param amount [Integer] Value in specified currency's smallest unit. e.g. $10 would be represented
        #   #   as 1000.
        #   #
        #   # @param as_of_date [String, nil] The date on which the transaction occurred.
        #   #
        #   # @param as_of_time [String, nil] The time on which the transaction occurred. Depending on the granularity of the
        #   #   timestamp information received from the bank, it may be `null`.
        #   #
        #   # @param as_of_timezone [String, nil] The timezone in which the `as_of_time` is represented. Can be `null` if the bank
        #   #   does not provide timezone info.
        #   #
        #   # @param created_at [String]
        #   #
        #   # @param currency [String] Currency that this transaction is denominated in.
        #   #
        #   # @param custom_identifiers [Hash{Symbol => String}] An object containing key-value pairs, each with a custom identifier as the key
        #   #   and a string value.
        #   #
        #   # @param direction [String] Either `credit` or `debit`.
        #   #
        #   # @param discarded_at [String, nil]
        #   #
        #   # @param foreign_exchange_rate [ModernTreasury::Models::Transaction::ForeignExchangeRate, nil] Associated serialized foreign exchange rate information.
        #   #
        #   # @param internal_account_id [String] The ID of the relevant Internal Account.
        #   #
        #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
        #   #   if it exists in the test environment.
        #   #
        #   # @param metadata [Hash{Symbol => String}] Additional data represented as key-value pairs. Both the key and value must be
        #   #   strings.
        #   #
        #   # @param object [String]
        #   #
        #   # @param posted [Boolean] This field will be `true` if the transaction has posted to the account.
        #   #
        #   # @param reconciled [Boolean] This field will be `true` if a transaction is reconciled by the Modern Treasury
        #   #   system. This means that it has transaction line items that sum up to the
        #   #   transaction's amount.
        #   #
        #   # @param type [String] The type of the transaction. Examples could be
        #   #   `card, `ach`, `wire`, `check`, `rtp`, `book`, or `sen`.
        #   #
        #   # @param updated_at [String]
        #   #
        #   # @param vendor_code [String, nil] When applicable, the bank-given code that determines the transaction's category.
        #   #   For most banks this is the BAI2/BTRS transaction code.
        #   #
        #   # @param vendor_code_type [String, nil] The type of `vendor_code` being reported. Can be one of `bai2`, `bankprov`,
        #   #   `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`, `dwolla`,
        #   #   `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`, `silvergate`,
        #   #   `swift`, `us_bank`, or others.
        #   #
        #   # @param vendor_customer_id [String, nil] An identifier given to this transaction by the bank, often `null`.
        #   #
        #   # @param vendor_id [String, nil] An identifier given to this transaction by the bank.
        #   #
        #   # @param details [Hash{Symbol => String}] This field contains additional information that the bank provided about the
        #   #   transaction. This is structured data. Some of the data in here might overlap
        #   #   with what is in the `vendor_description`. For example, the OBI could be a part
        #   #   of the vendor description, and it would also be included in here. The attributes
        #   #   that are passed through the details field will vary based on your banking
        #   #   partner. Currently, the following keys may be in the details object:
        #   #   `originator_name`, `originator_to_beneficiary_information`.
        #   #
        #   # @param vendor_description [String, nil] The transaction detail text that often appears in on your bank statement and in
        #   #   your banking portal.
        #   #
        #   def initialize(
        #     id:,
        #     amount:,
        #     as_of_date:,
        #     as_of_time:,
        #     as_of_timezone:,
        #     created_at:,
        #     currency:,
        #     custom_identifiers:,
        #     direction:,
        #     discarded_at:,
        #     foreign_exchange_rate:,
        #     internal_account_id:,
        #     live_mode:,
        #     metadata:,
        #     object:,
        #     posted:,
        #     reconciled:,
        #     type:,
        #     updated_at:,
        #     vendor_code:,
        #     vendor_code_type:,
        #     vendor_customer_id:,
        #     vendor_id:,
        #     details: nil,
        #     vendor_description: nil,
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void

        class ForeignExchangeRate < ModernTreasury::BaseModel
          # @!attribute base_amount
          #   Amount in the lowest denomination of the `base_currency` to convert, often called the "sell" amount.
          #
          #   @return [Integer]
          required :base_amount, Integer

          # @!attribute base_currency
          #   Currency to convert, often called the "sell" currency.
          #
          #   @return [Symbol, ModernTreasury::Models::Currency]
          required :base_currency, enum: -> { ModernTreasury::Models::Currency }

          # @!attribute exponent
          #   The exponent component of the rate. The decimal is calculated as `value` / (10 ^ `exponent`).
          #
          #   @return [Integer]
          required :exponent, Integer

          # @!attribute rate_string
          #   A string representation of the rate.
          #
          #   @return [String]
          required :rate_string, String

          # @!attribute target_amount
          #   Amount in the lowest denomination of the `target_currency`, often called the "buy" amount.
          #
          #   @return [Integer]
          required :target_amount, Integer

          # @!attribute target_currency
          #   Currency to convert the `base_currency` to, often called the "buy" currency.
          #
          #   @return [Symbol, ModernTreasury::Models::Currency]
          required :target_currency, enum: -> { ModernTreasury::Models::Currency }

          # @!attribute value
          #   The whole number component of the rate. The decimal is calculated as `value` / (10 ^ `exponent`).
          #
          #   @return [Integer]
          required :value, Integer

          # @!parse
          #   # Associated serialized foreign exchange rate information.
          #   #
          #   # @param base_amount [Integer] Amount in the lowest denomination of the `base_currency` to convert, often
          #   #   called the "sell" amount.
          #   #
          #   # @param base_currency [String] Currency to convert, often called the "sell" currency.
          #   #
          #   # @param exponent [Integer] The exponent component of the rate. The decimal is calculated as `value` / (10 ^
          #   #   `exponent`).
          #   #
          #   # @param rate_string [String] A string representation of the rate.
          #   #
          #   # @param target_amount [Integer] Amount in the lowest denomination of the `target_currency`, often called the
          #   #   "buy" amount.
          #   #
          #   # @param target_currency [String] Currency to convert the `base_currency` to, often called the "buy" currency.
          #   #
          #   # @param value [Integer] The whole number component of the rate. The decimal is calculated as `value` /
          #   #   (10 ^ `exponent`).
          #   #
          #   def initialize(base_amount:, base_currency:, exponent:, rate_string:, target_amount:, target_currency:, value:, **) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void
        end

        # The type of the transaction. Examples could be `card, `ach`, `wire`, `check`, `rtp`, `book`, or `sen`.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :ach
        #   # ...
        # in :au_becs
        #   # ...
        # in :bacs
        #   # ...
        # in :book
        #   # ...
        # in :card
        #   # ...
        # in ...
        #   #...
        # end
        # ```
        class Type < ModernTreasury::Enum
          ACH = :ach
          AU_BECS = :au_becs
          BACS = :bacs
          BOOK = :book
          CARD = :card
          CHATS = :chats
          CHECK = :check
          CROSS_BORDER = :cross_border
          DK_NETS = :dk_nets
          EFT = :eft
          HU_ICS = :hu_ics
          INTERAC = :interac
          MASAV = :masav
          MX_CCEN = :mx_ccen
          NEFT = :neft
          NICS = :nics
          NZ_BECS = :nz_becs
          PL_ELIXIR = :pl_elixir
          PROVXCHANGE = :provxchange
          RO_SENT = :ro_sent
          RTP = :rtp
          SE_BANKGIROT = :se_bankgirot
          SEN = :sen
          SEPA = :sepa
          SG_GIRO = :sg_giro
          SIC = :sic
          SIGNET = :signet
          SKNBI = :sknbi
          WIRE = :wire
          ZENGIN = :zengin
          OTHER = :other

          finalize!
        end

        # The type of `vendor_code` being reported. Can be one of `bai2`, `bankprov`, `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`, `dwolla`, `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`, `silvergate`, `swift`, `us_bank`, or others.
        #
        # @example
        #
        # ```ruby
        # case enum
        # in :bai2
        #   # ...
        # in :bankprov
        #   # ...
        # in :bnk_dev
        #   # ...
        # in :cleartouch
        #   # ...
        # in :column
        #   # ...
        # in ...
        #   #...
        # end
        # ```
        class VendorCodeType < ModernTreasury::Enum
          BAI2 = :bai2
          BANKPROV = :bankprov
          BNK_DEV = :bnk_dev
          CLEARTOUCH = :cleartouch
          COLUMN = :column
          CROSS_RIVER = :cross_river
          CURRENCYCLOUD = :currencycloud
          DC_BANK = :dc_bank
          DWOLLA = :dwolla
          EVOLVE = :evolve
          GOLDMAN_SACHS = :goldman_sachs
          ISO20022 = :iso20022
          JPMC = :jpmc
          MX = :mx
          PLAID = :plaid
          PNC = :pnc
          RSPEC_VENDOR = :rspec_vendor
          SIGNET = :signet
          SILVERGATE = :silvergate
          SWIFT = :swift
          US_BANK = :us_bank
          USER = :user

          finalize!
        end
      end

      class BulkError < ModernTreasury::BaseModel
        # @!attribute id
        #
        #   @return [String]
        required :id, String

        # @!attribute created_at
        #
        #   @return [Time]
        required :created_at, Time

        # @!attribute live_mode
        #   This field will be true if this object exists in the live environment or false if it exists in the test environment.
        #
        #   @return [Boolean]
        required :live_mode, ModernTreasury::BooleanModel

        # @!attribute object
        #
        #   @return [String]
        required :object, String

        # @!attribute request_errors
        #
        #   @return [Array<ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError>]
        required :request_errors,
                 ModernTreasury::ArrayOf[-> {
                   ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError
                 }]

        # @!attribute updated_at
        #
        #   @return [Time]
        required :updated_at, Time

        # @!parse
        #   # @param id [String]
        #   #
        #   # @param created_at [String]
        #   #
        #   # @param live_mode [Boolean] This field will be true if this object exists in the live environment or false
        #   #   if it exists in the test environment.
        #   #
        #   # @param object [String]
        #   #
        #   # @param request_errors [Array<ModernTreasury::Models::BulkResult::Entity::BulkError::RequestError>]
        #   #
        #   # @param updated_at [String]
        #   #
        #   def initialize(id:, created_at:, live_mode:, object:, request_errors:, updated_at:, **) = super

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void

        class RequestError < ModernTreasury::BaseModel
          # @!attribute code
          #
          #   @return [String]
          optional :code, String

          # @!attribute message
          #
          #   @return [String]
          optional :message, String

          # @!attribute parameter
          #
          #   @return [String]
          optional :parameter, String

          # @!parse
          #   # @param code [String]
          #   # @param message [String]
          #   # @param parameter [String]
          #   #
          #   def initialize(code: nil, message: nil, parameter: nil, **) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void
        end
      end

      # The type of the result entity object. For a successful bulk result, this is the same as the `resource_type` of the bulk request. For a failed bulk result, this is always bulk_error
      #
      # @example
      #
      # ```ruby
      # case enum
      # in :payment_order
      #   # ...
      # in :ledger_transaction
      #   # ...
      # in :transaction
      #   # ...
      # in :expected_payment
      #   # ...
      # in :bulk_error
      #   # ...
      # end
      # ```
      class EntityType < ModernTreasury::Enum
        PAYMENT_ORDER = :payment_order
        LEDGER_TRANSACTION = :ledger_transaction
        TRANSACTION = :transaction
        EXPECTED_PAYMENT = :expected_payment
        BULK_ERROR = :bulk_error

        finalize!
      end

      # The type of the request that created this result. bulk_request is the only supported `request_type`
      #
      # @example
      #
      # ```ruby
      # case enum
      # in :bulk_request
      #   # ...
      # end
      # ```
      class RequestType < ModernTreasury::Enum
        BULK_REQUEST = :bulk_request

        finalize!
      end

      # One of successful or failed.
      #
      # @example
      #
      # ```ruby
      # case enum
      # in :pending
      #   # ...
      # in :successful
      #   # ...
      # in :failed
      #   # ...
      # end
      # ```
      class Status < ModernTreasury::Enum
        PENDING = :pending
        SUCCESSFUL = :successful
        FAILED = :failed

        finalize!
      end
    end
  end
end
