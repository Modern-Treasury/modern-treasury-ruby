# frozen_string_literal: true

module ModernTreasury
  module Models
    class PaymentOrderUpdateParams < ModernTreasury::BaseModel
      # @!attribute accounting
      #
      #   @return [ModernTreasury::Models::PaymentOrderUpdateParams::Accounting]
      optional :accounting, -> { ModernTreasury::Models::PaymentOrderUpdateParams::Accounting }

      # @!attribute accounting_category_id
      #   The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.
      #
      #   @return [String]
      optional :accounting_category_id, String

      # @!attribute accounting_ledger_class_id
      #   The ID of one of your accounting ledger classes. Note that these will only be accessible if your accounting system has been connected.
      #
      #   @return [String]
      optional :accounting_ledger_class_id, String

      # @!attribute amount
      #   Value in specified currency's smallest unit. e.g. $10 would be represented as 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.
      #
      #   @return [Integer]
      optional :amount, Integer

      # @!attribute charge_bearer
      #   The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ChargeBearer]
      optional :charge_bearer, enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::ChargeBearer }

      # @!attribute counterparty_id
      #   Required when receiving_account_id is passed the ID of an external account.
      #
      #   @return [String]
      optional :counterparty_id, String

      # @!attribute currency
      #   Defaults to the currency of the originating account.
      #
      #   @return [Symbol, ModernTreasury::Models::Currency]
      optional :currency, enum: -> { ModernTreasury::Models::Currency }

      # @!attribute description
      #   An optional description for internal use.
      #
      #   @return [String]
      optional :description, String

      # @!attribute direction
      #   One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::Direction]
      optional :direction, enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::Direction }

      # @!attribute effective_date
      #   Date transactions are to be posted to the participants' account. Defaults to the current business day or the next business day if the current day is a bank holiday or weekend. Format: yyyy-mm-dd.
      #
      #   @return [Date]
      optional :effective_date, Date

      # @!attribute expires_at
      #   RFP payments require an expires_at. This value must be past the effective_date.
      #
      #   @return [Time]
      optional :expires_at, Time

      # @!attribute fallback_type
      #   A payment type to fallback to if the original type is not valid for the receiving account. Currently, this only supports falling back from RTP to ACH (type=rtp and fallback_type=ach)
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::FallbackType]
      optional :fallback_type, enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::FallbackType }

      # @!attribute foreign_exchange_contract
      #   If present, indicates a specific foreign exchange contract number that has been generated by your financial institution.
      #
      #   @return [String]
      optional :foreign_exchange_contract, String

      # @!attribute foreign_exchange_indicator
      #   Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ForeignExchangeIndicator]
      optional :foreign_exchange_indicator,
               enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::ForeignExchangeIndicator }

      # @!attribute line_items
      #   An array of line items that must sum up to the amount of the payment order.
      #
      #   @return [Array<ModernTreasury::Models::PaymentOrderUpdateParams::LineItem>]
      optional :line_items,
               ModernTreasury::ArrayOf.new(-> { ModernTreasury::Models::PaymentOrderUpdateParams::LineItem })

      # @!attribute metadata
      #   Additional data represented as key-value pairs. Both the key and value must be strings.
      #
      #   @return [Hash]
      optional :metadata, Hash

      # @!attribute nsf_protected
      #   A boolean to determine if NSF Protection is enabled for this payment order. Note that this setting must also be turned on in your organization settings page.
      #
      #   @return [Boolean]
      optional :nsf_protected, ModernTreasury::BooleanModel

      # @!attribute originating_account_id
      #   The ID of one of your organization's internal accounts.
      #
      #   @return [String]
      optional :originating_account_id, String

      # @!attribute originating_party_name
      #   If present, this will replace your default company name on receiver's bank statement. This field can only be used for ACH payments currently. For ACH, only the first 16 characters of this string will be used. Any additional characters will be truncated.
      #
      #   @return [String]
      optional :originating_party_name, String

      # @!attribute priority
      #   Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::Priority]
      optional :priority, enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::Priority }

      # @!attribute process_after
      #   If present, Modern Treasury will not process the payment until after this time. If `process_after` is past the cutoff for `effective_date`, `process_after` will take precedence and `effective_date` will automatically update to reflect the earliest possible sending date after `process_after`. Format is ISO8601 timestamp.
      #
      #   @return [Time]
      optional :process_after, Time

      # @!attribute purpose
      #   For `wire`, this is usually the purpose which is transmitted via the "InstrForDbtrAgt" field in the ISO20022 file. For `eft`, this field is the 3 digit CPA Code that will be attached to the payment.
      #
      #   @return [String]
      optional :purpose, String

      # @!attribute receiving_account
      #   Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.
      #
      #   @return [ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount]
      optional :receiving_account, -> { ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount }

      # @!attribute receiving_account_id
      #   Either `receiving_account` or `receiving_account_id` must be present. When using `receiving_account_id`, you may pass the id of an external account or an internal account.
      #
      #   @return [String]
      optional :receiving_account_id, String

      # @!attribute remittance_information
      #   For `ach`, this field will be passed through on an addenda record. For `wire` payments the field will be passed through as the "Originator to Beneficiary Information", also known as OBI or Fedwire tag 6000.
      #
      #   @return [String]
      optional :remittance_information, String

      # @!attribute send_remittance_advice
      #   Send an email to the counterparty when the payment order is sent to the bank. If `null`, `send_remittance_advice` on the Counterparty is used.
      #
      #   @return [Boolean]
      optional :send_remittance_advice, ModernTreasury::BooleanModel

      # @!attribute statement_descriptor
      #   An optional descriptor which will appear in the receiver's statement. For `check` payments this field will be used as the memo line. For `ach` the maximum length is 10 characters. Note that for ACH payments, the name on your bank account will be included automatically by the bank, so you can use the characters for other useful information. For `eft` the maximum length is 15 characters.
      #
      #   @return [String]
      optional :statement_descriptor, String

      # @!attribute status
      #   To cancel a payment order, use `cancelled`. To redraft a returned payment order, use `approved`. To undo approval on a denied or approved payment order, use `needs_approval`.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::Status]
      optional :status, enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::Status }

      # @!attribute subtype
      #   An additional layer of classification for the type of payment order you are doing. This field is only used for `ach` payment orders currently. For `ach`  payment orders, the `subtype`  represents the SEC code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderSubtype]
      optional :subtype, enum: -> { ModernTreasury::Models::PaymentOrderSubtype }

      # @!attribute type
      #   One of `ach`, `se_bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`, `bacs`, `au_becs`, `interac`, `neft`, `nics`, `nz_national_clearing_code`, `sic`, `signet`, `provexchange`, `zengin`.
      #
      #   @return [Symbol, ModernTreasury::Models::PaymentOrderType]
      optional :type, enum: -> { ModernTreasury::Models::PaymentOrderType }

      # @!attribute ultimate_originating_party_identifier
      #   This represents the identifier by which the person is known to the receiver when using the CIE subtype for ACH payments. Only the first 22 characters of this string will be used. Any additional characters will be truncated.
      #
      #   @return [String]
      optional :ultimate_originating_party_identifier, String

      # @!attribute ultimate_originating_party_name
      #   This represents the name of the person that the payment is on behalf of when using the CIE subtype for ACH payments. Only the first 15 characters of this string will be used. Any additional characters will be truncated.
      #
      #   @return [String]
      optional :ultimate_originating_party_name, String

      # @!attribute ultimate_receiving_party_identifier
      #   This represents the name of the merchant that the payment is being sent to when using the CIE subtype for ACH payments. Only the first 22 characters of this string will be used. Any additional characters will be truncated.
      #
      #   @return [String]
      optional :ultimate_receiving_party_identifier, String

      # @!attribute ultimate_receiving_party_name
      #   This represents the identifier by which the merchant is known to the person initiating an ACH payment with CIE subtype. Only the first 15 characters of this string will be used. Any additional characters will be truncated.
      #
      #   @return [String]
      optional :ultimate_receiving_party_name, String

      class Accounting < ModernTreasury::BaseModel
        # @!attribute account_id
        #   The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.
        #
        #   @return [String]
        optional :account_id, String

        # @!attribute class_id
        #   The ID of one of the class objects in your accounting system. Class objects track segments of your business independent of client or project. Note that these will only be accessible if your accounting system has been connected.
        #
        #   @return [String]
        optional :class_id, String

        # @!parse
        #   # @param account_id [String, nil] The ID of one of your accounting categories. Note that these will only be
        #   #   accessible if your accounting system has been connected.
        #   #
        #   # @param class_id [String, nil] The ID of one of the class objects in your accounting system. Class objects
        #   #   track segments of your business independent of client or project. Note that
        #   #   these will only be accessible if your accounting system has been connected.
        #   #
        #   def initialize(account_id: nil, class_id: nil) = super

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void
      end

      # The party that will pay the fees for the payment order. Only applies to wire payment orders. Can be one of shared, sender, or receiver, which correspond respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
      class ChargeBearer < ModernTreasury::Enum
        SHARED = :shared
        SENDER = :sender
        RECEIVER = :receiver
      end

      # One of `credit`, `debit`. Describes the direction money is flowing in the transaction. A `credit` moves money from your account to someone else's. A `debit` pulls money from someone else's account to your own. Note that wire, rtp, and check payments will always be `credit`.
      class Direction < ModernTreasury::Enum
        CREDIT = :credit
        DEBIT = :debit
      end

      # A payment type to fallback to if the original type is not valid for the receiving account. Currently, this only supports falling back from RTP to ACH (type=rtp and fallback_type=ach)
      class FallbackType < ModernTreasury::Enum
        ACH = :ach
      end

      # Indicates the type of FX transfer to initiate, can be either `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order currency matches the originating account currency.
      class ForeignExchangeIndicator < ModernTreasury::Enum
        FIXED_TO_VARIABLE = :fixed_to_variable
        VARIABLE_TO_FIXED = :variable_to_fixed
      end

      class LineItem < ModernTreasury::BaseModel
        # @!attribute amount
        #   Value in specified currency's smallest unit. e.g. $10 would be represented as 1000.
        #
        #   @return [Integer]
        required :amount, Integer

        # @!attribute accounting_category_id
        #   The ID of one of your accounting categories. Note that these will only be accessible if your accounting system has been connected.
        #
        #   @return [String]
        optional :accounting_category_id, String

        # @!attribute description
        #   A free-form description of the line item.
        #
        #   @return [String]
        optional :description, String

        # @!attribute metadata
        #   Additional data represented as key-value pairs. Both the key and value must be strings.
        #
        #   @return [Hash]
        optional :metadata, Hash

        # @!parse
        #   # @param amount [Integer] Value in specified currency's smallest unit. e.g. $10 would be represented
        #   #   as 1000.
        #   #
        #   # @param accounting_category_id [String, nil] The ID of one of your accounting categories. Note that these will only be
        #   #   accessible if your accounting system has been connected.
        #   #
        #   # @param description [String, nil] A free-form description of the line item.
        #   #
        #   # @param metadata [Hash, nil] Additional data represented as key-value pairs. Both the key and value must be
        #   #   strings.
        #   #
        #   def initialize(amount:, accounting_category_id: nil, description: nil, metadata: nil) = super

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void
      end

      # Either `normal` or `high`. For ACH and EFT payments, `high` represents a same-day ACH or EFT transfer, respectively. For check payments, `high` can mean an overnight check rather than standard mail.
      class Priority < ModernTreasury::Enum
        HIGH = :high
        NORMAL = :normal
      end

      class ReceivingAccount < ModernTreasury::BaseModel
        # @!attribute account_details
        #
        #   @return [Array<ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::AccountDetail>]
        optional :account_details,
                 ModernTreasury::ArrayOf.new(
                   -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::AccountDetail
                   }
                 )

        # @!attribute account_type
        #   Can be `checking`, `savings` or `other`.
        #
        #   @return [Symbol, ModernTreasury::Models::ExternalAccountType]
        optional :account_type, enum: -> { ModernTreasury::Models::ExternalAccountType }

        # @!attribute contact_details
        #
        #   @return [Array<ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::ContactDetail>]
        optional :contact_details,
                 ModernTreasury::ArrayOf.new(
                   -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::ContactDetail
                   }
                 )

        # @!attribute ledger_account
        #   Specifies a ledger account object that will be created with the external account. The resulting ledger account is linked to the external account for auto-ledgering Payment objects. See https://docs.moderntreasury.com/docs/linking-to-other-modern-treasury-objects for more details.
        #
        #   @return [ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::LedgerAccount]
        optional :ledger_account,
                 -> { ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::LedgerAccount }

        # @!attribute metadata
        #   Additional data represented as key-value pairs. Both the key and value must be strings.
        #
        #   @return [Hash]
        optional :metadata, Hash

        # @!attribute name
        #   A nickname for the external account. This is only for internal usage and won't affect any payments
        #
        #   @return [String]
        optional :name, String

        # @!attribute party_address
        #   Required if receiving wire payments.
        #
        #   @return [ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::PartyAddress]
        optional :party_address,
                 -> { ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::PartyAddress }

        # @!attribute party_identifier
        #
        #   @return [String]
        optional :party_identifier, String

        # @!attribute party_name
        #   If this value isn't provided, it will be inherited from the counterparty's name.
        #
        #   @return [String]
        optional :party_name, String

        # @!attribute party_type
        #   Either `individual` or `business`.
        #
        #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::PartyType]
        optional :party_type,
                 enum: -> { ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::PartyType }

        # @!attribute plaid_processor_token
        #   If you've enabled the Modern Treasury + Plaid integration in your Plaid account, you can pass the processor token in this field.
        #
        #   @return [String]
        optional :plaid_processor_token, String

        # @!attribute routing_details
        #
        #   @return [Array<ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::RoutingDetail>]
        optional :routing_details,
                 ModernTreasury::ArrayOf.new(
                   -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::RoutingDetail
                   }
                 )

        # @!parse
        #   # Either `receiving_account` or `receiving_account_id` must be present. When using
        #   #   `receiving_account_id`, you may pass the id of an external account or an
        #   #   internal account.
        #   #
        #   # @param account_details [Array<Object>, nil]
        #   #
        #   # @param account_type [String, nil] Can be `checking`, `savings` or `other`.
        #   #
        #   # @param contact_details [Array<Object>, nil]
        #   #
        #   # @param ledger_account [Object, nil] Specifies a ledger account object that will be created with the external
        #   #   account. The resulting ledger account is linked to the external account for
        #   #   auto-ledgering Payment objects. See
        #   #   https://docs.moderntreasury.com/docs/linking-to-other-modern-treasury-objects
        #   #   for more details.
        #   #
        #   # @param metadata [Hash, nil] Additional data represented as key-value pairs. Both the key and value must be
        #   #   strings.
        #   #
        #   # @param name [String, nil] A nickname for the external account. This is only for internal usage and won't
        #   #   affect any payments
        #   #
        #   # @param party_address [Object, nil] Required if receiving wire payments.
        #   #
        #   # @param party_identifier [String, nil]
        #   #
        #   # @param party_name [String, nil] If this value isn't provided, it will be inherited from the counterparty's name.
        #   #
        #   # @param party_type [String, nil] Either `individual` or `business`.
        #   #
        #   # @param plaid_processor_token [String, nil] If you've enabled the Modern Treasury + Plaid integration in your Plaid account,
        #   #   you can pass the processor token in this field.
        #   #
        #   # @param routing_details [Array<Object>, nil]
        #   #
        #   def initialize(
        #     account_details: nil,
        #     account_type: nil,
        #     contact_details: nil,
        #     ledger_account: nil,
        #     metadata: nil,
        #     name: nil,
        #     party_address: nil,
        #     party_identifier: nil,
        #     party_name: nil,
        #     party_type: nil,
        #     plaid_processor_token: nil,
        #     routing_details: nil
        #   )
        #     super
        #   end

        # def initialize: (Hash | ModernTreasury::BaseModel) -> void

        class AccountDetail < ModernTreasury::BaseModel
          # @!attribute account_number
          #
          #   @return [String]
          required :account_number, String

          # @!attribute account_number_type
          #
          #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::AccountDetail::AccountNumberType]
          optional :account_number_type,
                   enum: -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::AccountDetail::AccountNumberType
                   }

          # @!parse
          #   # @param account_number [String]
          #   # @param account_number_type [String, nil]
          #   #
          #   def initialize(account_number:, account_number_type: nil) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          class AccountNumberType < ModernTreasury::Enum
            AU_NUMBER = :au_number
            CLABE = :clabe
            HK_NUMBER = :hk_number
            IBAN = :iban
            ID_NUMBER = :id_number
            NZ_NUMBER = :nz_number
            OTHER = :other
            PAN = :pan
            SG_NUMBER = :sg_number
            WALLET_ADDRESS = :wallet_address
          end
        end

        class ContactDetail < ModernTreasury::BaseModel
          # @!attribute contact_identifier
          #
          #   @return [String]
          optional :contact_identifier, String

          # @!attribute contact_identifier_type
          #
          #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::ContactDetail::ContactIdentifierType]
          optional :contact_identifier_type,
                   enum: -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::ContactDetail::ContactIdentifierType
                   }

          # @!parse
          #   # @param contact_identifier [String, nil]
          #   # @param contact_identifier_type [String, nil]
          #   #
          #   def initialize(contact_identifier: nil, contact_identifier_type: nil) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          class ContactIdentifierType < ModernTreasury::Enum
            EMAIL = :email
            PHONE_NUMBER = :phone_number
            WEBSITE = :website
          end
        end

        class LedgerAccount < ModernTreasury::BaseModel
          # @!attribute currency
          #   The currency of the ledger account.
          #
          #   @return [String]
          required :currency, String

          # @!attribute ledger_id
          #   The id of the ledger that this account belongs to.
          #
          #   @return [String]
          required :ledger_id, String

          # @!attribute name
          #   The name of the ledger account.
          #
          #   @return [String]
          required :name, String

          # @!attribute normal_balance
          #   The normal balance of the ledger account.
          #
          #   @return [Symbol, ModernTreasury::Models::TransactionDirection]
          required :normal_balance, enum: -> { ModernTreasury::Models::TransactionDirection }

          # @!attribute currency_exponent
          #   The currency exponent of the ledger account.
          #
          #   @return [Integer]
          optional :currency_exponent, Integer

          # @!attribute description
          #   The description of the ledger account.
          #
          #   @return [String]
          optional :description, String

          # @!attribute ledger_account_category_ids
          #   The array of ledger account category ids that this ledger account should be a child of.
          #
          #   @return [Array<String>]
          optional :ledger_account_category_ids, ModernTreasury::ArrayOf.new(String)

          # @!attribute ledgerable_id
          #   If the ledger account links to another object in Modern Treasury, the id will be populated here, otherwise null.
          #
          #   @return [String]
          optional :ledgerable_id, String

          # @!attribute ledgerable_type
          #   If the ledger account links to another object in Modern Treasury, the type will be populated here, otherwise null. The value is one of internal_account or external_account.
          #
          #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::LedgerAccount::LedgerableType]
          optional :ledgerable_type,
                   enum: -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::LedgerAccount::LedgerableType
                   }

          # @!attribute metadata
          #   Additional data represented as key-value pairs. Both the key and value must be strings.
          #
          #   @return [Hash]
          optional :metadata, Hash

          # @!parse
          #   # Specifies a ledger account object that will be created with the external
          #   #   account. The resulting ledger account is linked to the external account for
          #   #   auto-ledgering Payment objects. See
          #   #   https://docs.moderntreasury.com/docs/linking-to-other-modern-treasury-objects
          #   #   for more details.
          #   #
          #   # @param currency [String] The currency of the ledger account.
          #   #
          #   # @param ledger_id [String] The id of the ledger that this account belongs to.
          #   #
          #   # @param name [String] The name of the ledger account.
          #   #
          #   # @param normal_balance [String] The normal balance of the ledger account.
          #   #
          #   # @param currency_exponent [Integer, nil] The currency exponent of the ledger account.
          #   #
          #   # @param description [String, nil] The description of the ledger account.
          #   #
          #   # @param ledger_account_category_ids [Array<String>, nil] The array of ledger account category ids that this ledger account should be a
          #   #   child of.
          #   #
          #   # @param ledgerable_id [String, nil] If the ledger account links to another object in Modern Treasury, the id will be
          #   #   populated here, otherwise null.
          #   #
          #   # @param ledgerable_type [String, nil] If the ledger account links to another object in Modern Treasury, the type will
          #   #   be populated here, otherwise null. The value is one of internal_account or
          #   #   external_account.
          #   #
          #   # @param metadata [Hash, nil] Additional data represented as key-value pairs. Both the key and value must be
          #   #   strings.
          #   #
          #   def initialize(
          #     currency:,
          #     ledger_id:,
          #     name:,
          #     normal_balance:,
          #     currency_exponent: nil,
          #     description: nil,
          #     ledger_account_category_ids: nil,
          #     ledgerable_id: nil,
          #     ledgerable_type: nil,
          #     metadata: nil
          #   )
          #     super
          #   end

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          # If the ledger account links to another object in Modern Treasury, the type will be populated here, otherwise null. The value is one of internal_account or external_account.
          class LedgerableType < ModernTreasury::Enum
            COUNTERPARTY = :counterparty
            EXTERNAL_ACCOUNT = :external_account
            INTERNAL_ACCOUNT = :internal_account
            VIRTUAL_ACCOUNT = :virtual_account
          end
        end

        class PartyAddress < ModernTreasury::BaseModel
          # @!attribute country
          #   Country code conforms to [ISO 3166-1 alpha-2]
          #
          #   @return [String]
          optional :country, String

          # @!attribute line1
          #
          #   @return [String]
          optional :line1, String

          # @!attribute line2
          #
          #   @return [String]
          optional :line2, String

          # @!attribute locality
          #   Locality or City.
          #
          #   @return [String]
          optional :locality, String

          # @!attribute postal_code
          #   The postal code of the address.
          #
          #   @return [String]
          optional :postal_code, String

          # @!attribute region
          #   Region or State.
          #
          #   @return [String]
          optional :region, String

          # @!parse
          #   # Required if receiving wire payments.
          #   #
          #   # @param country [String, nil] Country code conforms to [ISO 3166-1 alpha-2]
          #   #
          #   # @param line1 [String, nil]
          #   #
          #   # @param line2 [String, nil]
          #   #
          #   # @param locality [String, nil] Locality or City.
          #   #
          #   # @param postal_code [String, nil] The postal code of the address.
          #   #
          #   # @param region [String, nil] Region or State.
          #   #
          #   def initialize(country: nil, line1: nil, line2: nil, locality: nil, postal_code: nil, region: nil) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void
        end

        # Either `individual` or `business`.
        class PartyType < ModernTreasury::Enum
          BUSINESS = :business
          INDIVIDUAL = :individual
        end

        class RoutingDetail < ModernTreasury::BaseModel
          # @!attribute routing_number
          #
          #   @return [String]
          required :routing_number, String

          # @!attribute routing_number_type
          #
          #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::RoutingDetail::RoutingNumberType]
          required :routing_number_type,
                   enum: -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::RoutingDetail::RoutingNumberType
                   }

          # @!attribute payment_type
          #
          #   @return [Symbol, ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::RoutingDetail::PaymentType]
          optional :payment_type,
                   enum: -> {
                     ModernTreasury::Models::PaymentOrderUpdateParams::ReceivingAccount::RoutingDetail::PaymentType
                   }

          # @!parse
          #   # @param routing_number [String]
          #   # @param routing_number_type [String]
          #   # @param payment_type [String, nil]
          #   #
          #   def initialize(routing_number:, routing_number_type:, payment_type: nil) = super

          # def initialize: (Hash | ModernTreasury::BaseModel) -> void

          class RoutingNumberType < ModernTreasury::Enum
            ABA = :aba
            AU_BSB = :au_bsb
            BR_CODIGO = :br_codigo
            CA_CPA = :ca_cpa
            CHIPS = :chips
            CNAPS = :cnaps
            DK_INTERBANK_CLEARING_CODE = :dk_interbank_clearing_code
            GB_SORT_CODE = :gb_sort_code
            HK_INTERBANK_CLEARING_CODE = :hk_interbank_clearing_code
            HU_INTERBANK_CLEARING_CODE = :hu_interbank_clearing_code
            ID_SKNBI_CODE = :id_sknbi_code
            IN_IFSC = :in_ifsc
            JP_ZENGIN_CODE = :jp_zengin_code
            MY_BRANCH_CODE = :my_branch_code
            MX_BANK_IDENTIFIER = :mx_bank_identifier
            NZ_NATIONAL_CLEARING_CODE = :nz_national_clearing_code
            PL_NATIONAL_CLEARING_CODE = :pl_national_clearing_code
            SE_BANKGIRO_CLEARING_CODE = :se_bankgiro_clearing_code
            SWIFT = :swift
            ZA_NATIONAL_CLEARING_CODE = :za_national_clearing_code
          end

          class PaymentType < ModernTreasury::Enum
            ACH = :ach
            AU_BECS = :au_becs
            BACS = :bacs
            BOOK = :book
            CARD = :card
            CHATS = :chats
            CHECK = :check
            CROSS_BORDER = :cross_border
            DK_NETS = :dk_nets
            EFT = :eft
            HU_ICS = :hu_ics
            INTERAC = :interac
            MASAV = :masav
            MX_CCEN = :mx_ccen
            NEFT = :neft
            NICS = :nics
            NZ_BECS = :nz_becs
            PL_ELIXIR = :pl_elixir
            PROVXCHANGE = :provxchange
            RO_SENT = :ro_sent
            RTP = :rtp
            SE_BANKGIROT = :se_bankgirot
            SEN = :sen
            SEPA = :sepa
            SG_GIRO = :sg_giro
            SIC = :sic
            SIGNET = :signet
            SKNBI = :sknbi
            WIRE = :wire
            ZENGIN = :zengin
          end
        end
      end

      # To cancel a payment order, use `cancelled`. To redraft a returned payment order, use `approved`. To undo approval on a denied or approved payment order, use `needs_approval`.
      class Status < ModernTreasury::Enum
        APPROVED = :approved
        CANCELLED = :cancelled
        COMPLETED = :completed
        DENIED = :denied
        FAILED = :failed
        NEEDS_APPROVAL = :needs_approval
        PENDING = :pending
        PROCESSING = :processing
        RETURNED = :returned
        REVERSED = :reversed
        SENT = :sent
      end
    end
  end
end
