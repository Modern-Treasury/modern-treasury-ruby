module ModernTreasury
  module Models
    type counterparty_create_params =
      {
        name: String?,
        body_external_id: String?,
        accounting: ModernTreasury::CounterpartyCreateParams::Accounting,
        accounts: ::Array[ModernTreasury::CounterpartyCreateParams::Account],
        email: String?,
        ledger_type: ModernTreasury::Models::CounterpartyCreateParams::ledger_type,
        legal_entity: ModernTreasury::CounterpartyCreateParams::LegalEntity,
        legal_entity_id: String?,
        metadata: ::Hash[Symbol, String],
        send_remittance_advice: bool,
        taxpayer_identifier: String,
        verification_status: ModernTreasury::Models::CounterpartyCreateParams::verification_status
      }
      & ModernTreasury::Internal::Type::request_parameters

    class CounterpartyCreateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor name: String?

      attr_accessor body_external_id: String?

      attr_reader accounting: ModernTreasury::CounterpartyCreateParams::Accounting?

      def accounting=: (
        ModernTreasury::CounterpartyCreateParams::Accounting
      ) -> ModernTreasury::CounterpartyCreateParams::Accounting

      attr_reader accounts: ::Array[ModernTreasury::CounterpartyCreateParams::Account]?

      def accounts=: (
        ::Array[ModernTreasury::CounterpartyCreateParams::Account]
      ) -> ::Array[ModernTreasury::CounterpartyCreateParams::Account]

      attr_accessor email: String?

      attr_reader ledger_type: ModernTreasury::Models::CounterpartyCreateParams::ledger_type?

      def ledger_type=: (
        ModernTreasury::Models::CounterpartyCreateParams::ledger_type
      ) -> ModernTreasury::Models::CounterpartyCreateParams::ledger_type

      attr_reader legal_entity: ModernTreasury::CounterpartyCreateParams::LegalEntity?

      def legal_entity=: (
        ModernTreasury::CounterpartyCreateParams::LegalEntity
      ) -> ModernTreasury::CounterpartyCreateParams::LegalEntity

      attr_accessor legal_entity_id: String?

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader send_remittance_advice: bool?

      def send_remittance_advice=: (bool) -> bool

      attr_reader taxpayer_identifier: String?

      def taxpayer_identifier=: (String) -> String

      attr_reader verification_status: ModernTreasury::Models::CounterpartyCreateParams::verification_status?

      def verification_status=: (
        ModernTreasury::Models::CounterpartyCreateParams::verification_status
      ) -> ModernTreasury::Models::CounterpartyCreateParams::verification_status

      def initialize: (
        name: String?,
        ?body_external_id: String?,
        ?accounting: ModernTreasury::CounterpartyCreateParams::Accounting,
        ?accounts: ::Array[ModernTreasury::CounterpartyCreateParams::Account],
        ?email: String?,
        ?ledger_type: ModernTreasury::Models::CounterpartyCreateParams::ledger_type,
        ?legal_entity: ModernTreasury::CounterpartyCreateParams::LegalEntity,
        ?legal_entity_id: String?,
        ?metadata: ::Hash[Symbol, String],
        ?send_remittance_advice: bool,
        ?taxpayer_identifier: String,
        ?verification_status: ModernTreasury::Models::CounterpartyCreateParams::verification_status,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> {
        name: String?,
        body_external_id: String?,
        accounting: ModernTreasury::CounterpartyCreateParams::Accounting,
        accounts: ::Array[ModernTreasury::CounterpartyCreateParams::Account],
        email: String?,
        ledger_type: ModernTreasury::Models::CounterpartyCreateParams::ledger_type,
        legal_entity: ModernTreasury::CounterpartyCreateParams::LegalEntity,
        legal_entity_id: String?,
        metadata: ::Hash[Symbol, String],
        send_remittance_advice: bool,
        taxpayer_identifier: String,
        verification_status: ModernTreasury::Models::CounterpartyCreateParams::verification_status,
        request_options: ModernTreasury::RequestOptions
      }

      type accounting =
        {
          type: ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_
        }

      class Accounting < ModernTreasury::Internal::Type::BaseModel
        attr_reader type: ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_?

        def type=: (
          ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_
        ) -> ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_

        def initialize: (
          ?type: ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_
        ) -> void

        def to_hash: -> {
          type: ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_
        }

        type type_ = :customer | :vendor

        module Type
          extend ModernTreasury::Internal::Type::Enum

          CUSTOMER: :customer
          VENDOR: :vendor

          def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::Accounting::type_]
        end
      end

      type account =
        {
          account_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::AccountDetail],
          account_type: ModernTreasury::Models::external_account_type,
          contact_details: ::Array[ModernTreasury::ContactDetailCreateRequest],
          external_id: String?,
          ledger_account: ModernTreasury::LedgerAccountCreateRequest,
          metadata: ::Hash[Symbol, String],
          name: String?,
          party_address: ModernTreasury::AddressRequest,
          party_identifier: String,
          party_name: String,
          party_type: ModernTreasury::Models::CounterpartyCreateParams::Account::party_type?,
          plaid_processor_token: String,
          routing_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::RoutingDetail]
        }

      class Account < ModernTreasury::Internal::Type::BaseModel
        attr_reader account_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::AccountDetail]?

        def account_details=: (
          ::Array[ModernTreasury::CounterpartyCreateParams::Account::AccountDetail]
        ) -> ::Array[ModernTreasury::CounterpartyCreateParams::Account::AccountDetail]

        attr_reader account_type: ModernTreasury::Models::external_account_type?

        def account_type=: (
          ModernTreasury::Models::external_account_type
        ) -> ModernTreasury::Models::external_account_type

        attr_reader contact_details: ::Array[ModernTreasury::ContactDetailCreateRequest]?

        def contact_details=: (
          ::Array[ModernTreasury::ContactDetailCreateRequest]
        ) -> ::Array[ModernTreasury::ContactDetailCreateRequest]

        attr_accessor external_id: String?

        attr_reader ledger_account: ModernTreasury::LedgerAccountCreateRequest?

        def ledger_account=: (
          ModernTreasury::LedgerAccountCreateRequest
        ) -> ModernTreasury::LedgerAccountCreateRequest

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_accessor name: String?

        attr_reader party_address: ModernTreasury::AddressRequest?

        def party_address=: (
          ModernTreasury::AddressRequest
        ) -> ModernTreasury::AddressRequest

        attr_reader party_identifier: String?

        def party_identifier=: (String) -> String

        attr_reader party_name: String?

        def party_name=: (String) -> String

        attr_accessor party_type: ModernTreasury::Models::CounterpartyCreateParams::Account::party_type?

        attr_reader plaid_processor_token: String?

        def plaid_processor_token=: (String) -> String

        attr_reader routing_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::RoutingDetail]?

        def routing_details=: (
          ::Array[ModernTreasury::CounterpartyCreateParams::Account::RoutingDetail]
        ) -> ::Array[ModernTreasury::CounterpartyCreateParams::Account::RoutingDetail]

        def initialize: (
          ?account_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::AccountDetail],
          ?account_type: ModernTreasury::Models::external_account_type,
          ?contact_details: ::Array[ModernTreasury::ContactDetailCreateRequest],
          ?external_id: String?,
          ?ledger_account: ModernTreasury::LedgerAccountCreateRequest,
          ?metadata: ::Hash[Symbol, String],
          ?name: String?,
          ?party_address: ModernTreasury::AddressRequest,
          ?party_identifier: String,
          ?party_name: String,
          ?party_type: ModernTreasury::Models::CounterpartyCreateParams::Account::party_type?,
          ?plaid_processor_token: String,
          ?routing_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::RoutingDetail]
        ) -> void

        def to_hash: -> {
          account_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::AccountDetail],
          account_type: ModernTreasury::Models::external_account_type,
          contact_details: ::Array[ModernTreasury::ContactDetailCreateRequest],
          external_id: String?,
          ledger_account: ModernTreasury::LedgerAccountCreateRequest,
          metadata: ::Hash[Symbol, String],
          name: String?,
          party_address: ModernTreasury::AddressRequest,
          party_identifier: String,
          party_name: String,
          party_type: ModernTreasury::Models::CounterpartyCreateParams::Account::party_type?,
          plaid_processor_token: String,
          routing_details: ::Array[ModernTreasury::CounterpartyCreateParams::Account::RoutingDetail]
        }

        type account_detail =
          {
            account_number: String,
            account_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type
          }

        class AccountDetail < ModernTreasury::Internal::Type::BaseModel
          attr_accessor account_number: String

          attr_reader account_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type?

          def account_number_type=: (
            ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type
          ) -> ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type

          def initialize: (
            account_number: String,
            ?account_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type
          ) -> void

          def to_hash: -> {
            account_number: String,
            account_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type
          }

          type account_number_type =
            :au_number
            | :base_address
            | :clabe
            | :ethereum_address
            | :hk_number
            | :iban
            | :id_number
            | :nz_number
            | :other
            | :pan
            | :polygon_address
            | :sg_number
            | :solana_address
            | :wallet_address

          module AccountNumberType
            extend ModernTreasury::Internal::Type::Enum

            AU_NUMBER: :au_number
            BASE_ADDRESS: :base_address
            CLABE: :clabe
            ETHEREUM_ADDRESS: :ethereum_address
            HK_NUMBER: :hk_number
            IBAN: :iban
            ID_NUMBER: :id_number
            NZ_NUMBER: :nz_number
            OTHER: :other
            PAN: :pan
            POLYGON_ADDRESS: :polygon_address
            SG_NUMBER: :sg_number
            SOLANA_ADDRESS: :solana_address
            WALLET_ADDRESS: :wallet_address

            def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::Account::AccountDetail::account_number_type]
          end
        end

        type party_type = :business | :individual

        module PartyType
          extend ModernTreasury::Internal::Type::Enum

          BUSINESS: :business
          INDIVIDUAL: :individual

          def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::Account::party_type]
        end

        type routing_detail =
          {
            routing_number: String,
            routing_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::routing_number_type,
            payment_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type
          }

        class RoutingDetail < ModernTreasury::Internal::Type::BaseModel
          attr_accessor routing_number: String

          attr_accessor routing_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::routing_number_type

          attr_reader payment_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type?

          def payment_type=: (
            ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type
          ) -> ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type

          def initialize: (
            routing_number: String,
            routing_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::routing_number_type,
            ?payment_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type
          ) -> void

          def to_hash: -> {
            routing_number: String,
            routing_number_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::routing_number_type,
            payment_type: ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type
          }

          type routing_number_type =
            :aba
            | :au_bsb
            | :br_codigo
            | :ca_cpa
            | :chips
            | :cnaps
            | :dk_interbank_clearing_code
            | :gb_sort_code
            | :hk_interbank_clearing_code
            | :hu_interbank_clearing_code
            | :id_sknbi_code
            | :il_bank_code
            | :in_ifsc
            | :jp_zengin_code
            | :my_branch_code
            | :mx_bank_identifier
            | :nz_national_clearing_code
            | :pl_national_clearing_code
            | :se_bankgiro_clearing_code
            | :sg_interbank_clearing_code
            | :swift
            | :za_national_clearing_code

          module RoutingNumberType
            extend ModernTreasury::Internal::Type::Enum

            ABA: :aba
            AU_BSB: :au_bsb
            BR_CODIGO: :br_codigo
            CA_CPA: :ca_cpa
            CHIPS: :chips
            CNAPS: :cnaps
            DK_INTERBANK_CLEARING_CODE: :dk_interbank_clearing_code
            GB_SORT_CODE: :gb_sort_code
            HK_INTERBANK_CLEARING_CODE: :hk_interbank_clearing_code
            HU_INTERBANK_CLEARING_CODE: :hu_interbank_clearing_code
            ID_SKNBI_CODE: :id_sknbi_code
            IL_BANK_CODE: :il_bank_code
            IN_IFSC: :in_ifsc
            JP_ZENGIN_CODE: :jp_zengin_code
            MY_BRANCH_CODE: :my_branch_code
            MX_BANK_IDENTIFIER: :mx_bank_identifier
            NZ_NATIONAL_CLEARING_CODE: :nz_national_clearing_code
            PL_NATIONAL_CLEARING_CODE: :pl_national_clearing_code
            SE_BANKGIRO_CLEARING_CODE: :se_bankgiro_clearing_code
            SG_INTERBANK_CLEARING_CODE: :sg_interbank_clearing_code
            SWIFT: :swift
            ZA_NATIONAL_CLEARING_CODE: :za_national_clearing_code

            def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::routing_number_type]
          end

          type payment_type =
            :ach
            | :au_becs
            | :bacs
            | :base
            | :book
            | :card
            | :chats
            | :check
            | :cross_border
            | :dk_nets
            | :eft
            | :ethereum
            | :gb_fps
            | :hu_ics
            | :interac
            | :masav
            | :mx_ccen
            | :neft
            | :nics
            | :nz_becs
            | :pl_elixir
            | :polygon
            | :provxchange
            | :ro_sent
            | :rtp
            | :se_bankgirot
            | :sen
            | :sepa
            | :sg_giro
            | :sic
            | :signet
            | :sknbi
            | :solana
            | :wire
            | :zengin

          module PaymentType
            extend ModernTreasury::Internal::Type::Enum

            ACH: :ach
            AU_BECS: :au_becs
            BACS: :bacs
            BASE: :base
            BOOK: :book
            CARD: :card
            CHATS: :chats
            CHECK: :check
            CROSS_BORDER: :cross_border
            DK_NETS: :dk_nets
            EFT: :eft
            ETHEREUM: :ethereum
            GB_FPS: :gb_fps
            HU_ICS: :hu_ics
            INTERAC: :interac
            MASAV: :masav
            MX_CCEN: :mx_ccen
            NEFT: :neft
            NICS: :nics
            NZ_BECS: :nz_becs
            PL_ELIXIR: :pl_elixir
            POLYGON: :polygon
            PROVXCHANGE: :provxchange
            RO_SENT: :ro_sent
            RTP: :rtp
            SE_BANKGIROT: :se_bankgirot
            SEN: :sen
            SEPA: :sepa
            SG_GIRO: :sg_giro
            SIC: :sic
            SIGNET: :signet
            SKNBI: :sknbi
            SOLANA: :solana
            WIRE: :wire
            ZENGIN: :zengin

            def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::Account::RoutingDetail::payment_type]
          end
        end
      end

      type ledger_type = :customer | :vendor

      module LedgerType
        extend ModernTreasury::Internal::Type::Enum

        CUSTOMER: :customer
        VENDOR: :vendor

        def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::ledger_type]
      end

      type legal_entity =
        {
          legal_entity_type: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_entity_type,
          addresses: ::Array[ModernTreasury::LegalEntityAddressCreateRequest],
          bank_settings: ModernTreasury::LegalEntityBankSettings?,
          business_name: String?,
          citizenship_country: String?,
          compliance_details: ModernTreasury::LegalEntityComplianceDetail?,
          date_formed: Date?,
          date_of_birth: Date?,
          doing_business_as_names: ::Array[String],
          email: String?,
          first_name: String?,
          identifications: ::Array[ModernTreasury::IdentificationCreateRequest],
          industry_classifications: ::Array[ModernTreasury::LegalEntityIndustryClassification],
          last_name: String?,
          legal_entity_associations: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation]?,
          legal_structure: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_structure?,
          metadata: ::Hash[Symbol, String],
          middle_name: String?,
          phone_numbers: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::PhoneNumber],
          politically_exposed_person: bool?,
          preferred_name: String?,
          prefix: String?,
          risk_rating: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::risk_rating?,
          suffix: String?,
          wealth_and_employment_details: ModernTreasury::LegalEntityWealthEmploymentDetail?,
          website: String?
        }

      class LegalEntity < ModernTreasury::Internal::Type::BaseModel
        attr_accessor legal_entity_type: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_entity_type

        attr_reader addresses: ::Array[ModernTreasury::LegalEntityAddressCreateRequest]?

        def addresses=: (
          ::Array[ModernTreasury::LegalEntityAddressCreateRequest]
        ) -> ::Array[ModernTreasury::LegalEntityAddressCreateRequest]

        attr_accessor bank_settings: ModernTreasury::LegalEntityBankSettings?

        attr_accessor business_name: String?

        attr_accessor citizenship_country: String?

        attr_accessor compliance_details: ModernTreasury::LegalEntityComplianceDetail?

        attr_accessor date_formed: Date?

        attr_accessor date_of_birth: Date?

        attr_reader doing_business_as_names: ::Array[String]?

        def doing_business_as_names=: (::Array[String]) -> ::Array[String]

        attr_accessor email: String?

        attr_accessor first_name: String?

        attr_reader identifications: ::Array[ModernTreasury::IdentificationCreateRequest]?

        def identifications=: (
          ::Array[ModernTreasury::IdentificationCreateRequest]
        ) -> ::Array[ModernTreasury::IdentificationCreateRequest]

        attr_reader industry_classifications: ::Array[ModernTreasury::LegalEntityIndustryClassification]?

        def industry_classifications=: (
          ::Array[ModernTreasury::LegalEntityIndustryClassification]
        ) -> ::Array[ModernTreasury::LegalEntityIndustryClassification]

        attr_accessor last_name: String?

        attr_accessor legal_entity_associations: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation]?

        attr_accessor legal_structure: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_structure?

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_accessor middle_name: String?

        attr_reader phone_numbers: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::PhoneNumber]?

        def phone_numbers=: (
          ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::PhoneNumber]
        ) -> ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::PhoneNumber]

        attr_accessor politically_exposed_person: bool?

        attr_accessor preferred_name: String?

        attr_accessor prefix: String?

        attr_accessor risk_rating: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::risk_rating?

        attr_accessor suffix: String?

        attr_accessor wealth_and_employment_details: ModernTreasury::LegalEntityWealthEmploymentDetail?

        attr_accessor website: String?

        def initialize: (
          legal_entity_type: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_entity_type,
          ?addresses: ::Array[ModernTreasury::LegalEntityAddressCreateRequest],
          ?bank_settings: ModernTreasury::LegalEntityBankSettings?,
          ?business_name: String?,
          ?citizenship_country: String?,
          ?compliance_details: ModernTreasury::LegalEntityComplianceDetail?,
          ?date_formed: Date?,
          ?date_of_birth: Date?,
          ?doing_business_as_names: ::Array[String],
          ?email: String?,
          ?first_name: String?,
          ?identifications: ::Array[ModernTreasury::IdentificationCreateRequest],
          ?industry_classifications: ::Array[ModernTreasury::LegalEntityIndustryClassification],
          ?last_name: String?,
          ?legal_entity_associations: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation]?,
          ?legal_structure: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_structure?,
          ?metadata: ::Hash[Symbol, String],
          ?middle_name: String?,
          ?phone_numbers: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::PhoneNumber],
          ?politically_exposed_person: bool?,
          ?preferred_name: String?,
          ?prefix: String?,
          ?risk_rating: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::risk_rating?,
          ?suffix: String?,
          ?wealth_and_employment_details: ModernTreasury::LegalEntityWealthEmploymentDetail?,
          ?website: String?
        ) -> void

        def to_hash: -> {
          legal_entity_type: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_entity_type,
          addresses: ::Array[ModernTreasury::LegalEntityAddressCreateRequest],
          bank_settings: ModernTreasury::LegalEntityBankSettings?,
          business_name: String?,
          citizenship_country: String?,
          compliance_details: ModernTreasury::LegalEntityComplianceDetail?,
          date_formed: Date?,
          date_of_birth: Date?,
          doing_business_as_names: ::Array[String],
          email: String?,
          first_name: String?,
          identifications: ::Array[ModernTreasury::IdentificationCreateRequest],
          industry_classifications: ::Array[ModernTreasury::LegalEntityIndustryClassification],
          last_name: String?,
          legal_entity_associations: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation]?,
          legal_structure: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_structure?,
          metadata: ::Hash[Symbol, String],
          middle_name: String?,
          phone_numbers: ::Array[ModernTreasury::CounterpartyCreateParams::LegalEntity::PhoneNumber],
          politically_exposed_person: bool?,
          preferred_name: String?,
          prefix: String?,
          risk_rating: ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::risk_rating?,
          suffix: String?,
          wealth_and_employment_details: ModernTreasury::LegalEntityWealthEmploymentDetail?,
          website: String?
        }

        type legal_entity_type = :business | :individual

        module LegalEntityType
          extend ModernTreasury::Internal::Type::Enum

          BUSINESS: :business
          INDIVIDUAL: :individual

          def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_entity_type]
        end

        type legal_entity_association =
          {
            relationship_types: ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation::relationship_type],
            child_legal_entity: ModernTreasury::ChildLegalEntityCreate,
            child_legal_entity_id: String,
            ownership_percentage: Integer?,
            title: String?
          }

        class LegalEntityAssociation < ModernTreasury::Internal::Type::BaseModel
          attr_accessor relationship_types: ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation::relationship_type]

          attr_reader child_legal_entity: ModernTreasury::ChildLegalEntityCreate?

          def child_legal_entity=: (
            ModernTreasury::ChildLegalEntityCreate
          ) -> ModernTreasury::ChildLegalEntityCreate

          attr_reader child_legal_entity_id: String?

          def child_legal_entity_id=: (String) -> String

          attr_accessor ownership_percentage: Integer?

          attr_accessor title: String?

          def initialize: (
            relationship_types: ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation::relationship_type],
            ?child_legal_entity: ModernTreasury::ChildLegalEntityCreate,
            ?child_legal_entity_id: String,
            ?ownership_percentage: Integer?,
            ?title: String?
          ) -> void

          def to_hash: -> {
            relationship_types: ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation::relationship_type],
            child_legal_entity: ModernTreasury::ChildLegalEntityCreate,
            child_legal_entity_id: String,
            ownership_percentage: Integer?,
            title: String?
          }

          type relationship_type =
            :authorized_signer | :beneficial_owner | :control_person

          module RelationshipType
            extend ModernTreasury::Internal::Type::Enum

            AUTHORIZED_SIGNER: :authorized_signer
            BENEFICIAL_OWNER: :beneficial_owner
            CONTROL_PERSON: :control_person

            def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::LegalEntityAssociation::relationship_type]
          end
        end

        type legal_structure =
          :corporation
          | :llc
          | :non_profit
          | :partnership
          | :sole_proprietorship
          | :trust

        module LegalStructure
          extend ModernTreasury::Internal::Type::Enum

          CORPORATION: :corporation
          LLC: :llc
          NON_PROFIT: :non_profit
          PARTNERSHIP: :partnership
          SOLE_PROPRIETORSHIP: :sole_proprietorship
          TRUST: :trust

          def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::legal_structure]
        end

        type phone_number = { phone_number: String }

        class PhoneNumber < ModernTreasury::Internal::Type::BaseModel
          attr_reader phone_number: String?

          def phone_number=: (String) -> String

          def initialize: (?phone_number: String) -> void

          def to_hash: -> { phone_number: String }
        end

        type risk_rating = :low | :medium | :high

        module RiskRating
          extend ModernTreasury::Internal::Type::Enum

          LOW: :low
          MEDIUM: :medium
          HIGH: :high

          def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::LegalEntity::risk_rating]
        end
      end

      type verification_status =
        :denied | :needs_approval | :unverified | :verified

      module VerificationStatus
        extend ModernTreasury::Internal::Type::Enum

        DENIED: :denied
        NEEDS_APPROVAL: :needs_approval
        UNVERIFIED: :unverified
        VERIFIED: :verified

        def self?.values: -> ::Array[ModernTreasury::Models::CounterpartyCreateParams::verification_status]
      end
    end
  end
end
