module ModernTreasury
  module Models
    type counterparty =
      {
        id: String,
        accounts: ::Array[ModernTreasury::Counterparty::Account],
        created_at: Time,
        discarded_at: Time?,
        email: String?,
        legal_entity_id: String?,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        name: String?,
        object: String,
        send_remittance_advice: bool,
        updated_at: Time,
        verification_status: ModernTreasury::Models::Counterparty::verification_status
      }

    class Counterparty < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor accounts: ::Array[ModernTreasury::Counterparty::Account]

      attr_accessor created_at: Time

      attr_accessor discarded_at: Time?

      attr_accessor email: String?

      attr_accessor legal_entity_id: String?

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor name: String?

      attr_accessor object: String

      attr_accessor send_remittance_advice: bool

      attr_accessor updated_at: Time

      attr_accessor verification_status: ModernTreasury::Models::Counterparty::verification_status

      def initialize: (
        id: String,
        accounts: ::Array[ModernTreasury::Counterparty::Account],
        created_at: Time,
        discarded_at: Time?,
        email: String?,
        legal_entity_id: String?,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        name: String?,
        object: String,
        send_remittance_advice: bool,
        updated_at: Time,
        verification_status: ModernTreasury::Models::Counterparty::verification_status
      ) -> void

      def to_hash: -> {
        id: String,
        accounts: ::Array[ModernTreasury::Counterparty::Account],
        created_at: Time,
        discarded_at: Time?,
        email: String?,
        legal_entity_id: String?,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        name: String?,
        object: String,
        send_remittance_advice: bool,
        updated_at: Time,
        verification_status: ModernTreasury::Models::Counterparty::verification_status
      }

      type account =
        {
          id: String,
          account_details: ::Array[ModernTreasury::AccountDetail],
          account_type: ModernTreasury::Models::external_account_type,
          contact_details: ::Array[ModernTreasury::ContactDetail],
          created_at: Time,
          discarded_at: Time?,
          ledger_account_id: String?,
          live_mode: bool,
          metadata: ::Hash[Symbol, String],
          name: String?,
          object: String,
          party_address: ModernTreasury::Address?,
          party_name: String,
          party_type: ModernTreasury::Models::Counterparty::Account::party_type?,
          routing_details: ::Array[ModernTreasury::RoutingDetail],
          updated_at: Time,
          verification_source: ModernTreasury::Models::Counterparty::Account::verification_source?,
          verification_status: ModernTreasury::Models::Counterparty::Account::verification_status
        }

      class Account < ModernTreasury::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader account_details: ::Array[ModernTreasury::AccountDetail]?

        def account_details=: (
          ::Array[ModernTreasury::AccountDetail]
        ) -> ::Array[ModernTreasury::AccountDetail]

        attr_reader account_type: ModernTreasury::Models::external_account_type?

        def account_type=: (
          ModernTreasury::Models::external_account_type
        ) -> ModernTreasury::Models::external_account_type

        attr_reader contact_details: ::Array[ModernTreasury::ContactDetail]?

        def contact_details=: (
          ::Array[ModernTreasury::ContactDetail]
        ) -> ::Array[ModernTreasury::ContactDetail]

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        attr_accessor discarded_at: Time?

        attr_accessor ledger_account_id: String?

        attr_reader live_mode: bool?

        def live_mode=: (bool) -> bool

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_accessor name: String?

        attr_reader object: String?

        def object=: (String) -> String

        attr_accessor party_address: ModernTreasury::Address?

        attr_reader party_name: String?

        def party_name=: (String) -> String

        attr_accessor party_type: ModernTreasury::Models::Counterparty::Account::party_type?

        attr_reader routing_details: ::Array[ModernTreasury::RoutingDetail]?

        def routing_details=: (
          ::Array[ModernTreasury::RoutingDetail]
        ) -> ::Array[ModernTreasury::RoutingDetail]

        attr_reader updated_at: Time?

        def updated_at=: (Time) -> Time

        attr_accessor verification_source: ModernTreasury::Models::Counterparty::Account::verification_source?

        attr_reader verification_status: ModernTreasury::Models::Counterparty::Account::verification_status?

        def verification_status=: (
          ModernTreasury::Models::Counterparty::Account::verification_status
        ) -> ModernTreasury::Models::Counterparty::Account::verification_status

        def initialize: (
          ?id: String,
          ?account_details: ::Array[ModernTreasury::AccountDetail],
          ?account_type: ModernTreasury::Models::external_account_type,
          ?contact_details: ::Array[ModernTreasury::ContactDetail],
          ?created_at: Time,
          ?discarded_at: Time?,
          ?ledger_account_id: String?,
          ?live_mode: bool,
          ?metadata: ::Hash[Symbol, String],
          ?name: String?,
          ?object: String,
          ?party_address: ModernTreasury::Address?,
          ?party_name: String,
          ?party_type: ModernTreasury::Models::Counterparty::Account::party_type?,
          ?routing_details: ::Array[ModernTreasury::RoutingDetail],
          ?updated_at: Time,
          ?verification_source: ModernTreasury::Models::Counterparty::Account::verification_source?,
          ?verification_status: ModernTreasury::Models::Counterparty::Account::verification_status
        ) -> void

        def to_hash: -> {
          id: String,
          account_details: ::Array[ModernTreasury::AccountDetail],
          account_type: ModernTreasury::Models::external_account_type,
          contact_details: ::Array[ModernTreasury::ContactDetail],
          created_at: Time,
          discarded_at: Time?,
          ledger_account_id: String?,
          live_mode: bool,
          metadata: ::Hash[Symbol, String],
          name: String?,
          object: String,
          party_address: ModernTreasury::Address?,
          party_name: String,
          party_type: ModernTreasury::Models::Counterparty::Account::party_type?,
          routing_details: ::Array[ModernTreasury::RoutingDetail],
          updated_at: Time,
          verification_source: ModernTreasury::Models::Counterparty::Account::verification_source?,
          verification_status: ModernTreasury::Models::Counterparty::Account::verification_status
        }

        type party_type = :business | :individual

        module PartyType
          extend ModernTreasury::Internal::Type::Enum

          BUSINESS: :business
          INDIVIDUAL: :individual

          def self?.values: -> ::Array[ModernTreasury::Models::Counterparty::Account::party_type]
        end

        type verification_source = :ach_prenote | :microdeposits | :plaid

        module VerificationSource
          extend ModernTreasury::Internal::Type::Enum

          ACH_PRENOTE: :ach_prenote
          MICRODEPOSITS: :microdeposits
          PLAID: :plaid

          def self?.values: -> ::Array[ModernTreasury::Models::Counterparty::Account::verification_source]
        end

        type verification_status =
          :pending_verification | :unverified | :verified

        module VerificationStatus
          extend ModernTreasury::Internal::Type::Enum

          PENDING_VERIFICATION: :pending_verification
          UNVERIFIED: :unverified
          VERIFIED: :verified

          def self?.values: -> ::Array[ModernTreasury::Models::Counterparty::Account::verification_status]
        end
      end

      type verification_status =
        :denied | :needs_approval | :unverified | :verified

      module VerificationStatus
        extend ModernTreasury::Internal::Type::Enum

        DENIED: :denied
        NEEDS_APPROVAL: :needs_approval
        UNVERIFIED: :unverified
        VERIFIED: :verified

        def self?.values: -> ::Array[ModernTreasury::Models::Counterparty::verification_status]
      end
    end
  end
end
