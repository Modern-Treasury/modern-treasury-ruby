module ModernTreasury
  module Models
    type connection_legal_entity_create_params =
      {
        connection_id: String,
        legal_entity: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity,
        legal_entity_id: String
      }
      & ModernTreasury::request_parameters

    class ConnectionLegalEntityCreateParams < ModernTreasury::BaseModel
      extend ModernTreasury::RequestParameters::Converter
      include ModernTreasury::RequestParameters

      attr_accessor connection_id: String

      attr_reader legal_entity: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity?

      def legal_entity=: (
        ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity
      ) -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity

      attr_reader legal_entity_id: String?

      def legal_entity_id=: (String) -> String

      def initialize: (
        connection_id: String,
        ?legal_entity: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity,
        ?legal_entity_id: String,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> ModernTreasury::Models::connection_legal_entity_create_params

      type legal_entity =
        {
          addresses: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address],
          bank_settings: ModernTreasury::Models::BankSettings?,
          business_name: String?,
          citizenship_country: String?,
          date_formed: Date?,
          date_of_birth: Date?,
          doing_business_as_names: ::Array[String],
          email: String?,
          first_name: String?,
          identifications: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification],
          last_name: String?,
          legal_entity_associations: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation]?,
          legal_entity_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_type,
          legal_structure: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_structure?,
          metadata: ::Hash[Symbol, String],
          middle_name: String?,
          phone_numbers: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::PhoneNumber],
          politically_exposed_person: bool?,
          preferred_name: String?,
          prefix: String?,
          risk_rating: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::risk_rating?,
          suffix: String?,
          wealth_and_employment_details: ModernTreasury::Models::WealthAndEmploymentDetails?,
          website: String?
        }

      class LegalEntity < ModernTreasury::BaseModel
        attr_reader addresses: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address]?

        def addresses=: (
          ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address]
        ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address]

        attr_accessor bank_settings: ModernTreasury::Models::BankSettings?

        attr_accessor business_name: String?

        attr_accessor citizenship_country: String?

        attr_accessor date_formed: Date?

        attr_accessor date_of_birth: Date?

        attr_reader doing_business_as_names: ::Array[String]?

        def doing_business_as_names=: (::Array[String]) -> ::Array[String]

        attr_accessor email: String?

        attr_accessor first_name: String?

        attr_reader identifications: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification]?

        def identifications=: (
          ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification]
        ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification]

        attr_accessor last_name: String?

        attr_accessor legal_entity_associations: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation]?

        attr_reader legal_entity_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_type?

        def legal_entity_type=: (
          ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_type
        ) -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_type

        attr_accessor legal_structure: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_structure?

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_accessor middle_name: String?

        attr_reader phone_numbers: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::PhoneNumber]?

        def phone_numbers=: (
          ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::PhoneNumber]
        ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::PhoneNumber]

        attr_accessor politically_exposed_person: bool?

        attr_accessor preferred_name: String?

        attr_accessor prefix: String?

        attr_accessor risk_rating: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::risk_rating?

        attr_accessor suffix: String?

        attr_accessor wealth_and_employment_details: ModernTreasury::Models::WealthAndEmploymentDetails?

        attr_accessor website: String?

        def initialize: (
          ?addresses: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address],
          ?bank_settings: ModernTreasury::Models::BankSettings?,
          ?business_name: String?,
          ?citizenship_country: String?,
          ?date_formed: Date?,
          ?date_of_birth: Date?,
          ?doing_business_as_names: ::Array[String],
          ?email: String?,
          ?first_name: String?,
          ?identifications: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification],
          ?last_name: String?,
          ?legal_entity_associations: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation]?,
          ?legal_entity_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_type,
          ?legal_structure: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_structure?,
          ?metadata: ::Hash[Symbol, String],
          ?middle_name: String?,
          ?phone_numbers: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::PhoneNumber],
          ?politically_exposed_person: bool?,
          ?preferred_name: String?,
          ?prefix: String?,
          ?risk_rating: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::risk_rating?,
          ?suffix: String?,
          ?wealth_and_employment_details: ModernTreasury::Models::WealthAndEmploymentDetails?,
          ?website: String?
        ) -> void

        def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::legal_entity

        type address =
          {
            country: String?,
            :line1 => String?,
            locality: String?,
            postal_code: String?,
            region: String?,
            address_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address::address_type],
            :line2 => String?
          }

        class Address < ModernTreasury::BaseModel
          attr_accessor country: String?

          attr_accessor line1: String?

          attr_accessor locality: String?

          attr_accessor postal_code: String?

          attr_accessor region: String?

          attr_reader address_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address::address_type]?

          def address_types=: (
            ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address::address_type]
          ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address::address_type]

          attr_accessor line2: String?

          def initialize: (
            country: String?,
            line1: String?,
            locality: String?,
            postal_code: String?,
            region: String?,
            ?address_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address::address_type],
            ?line2: String?
          ) -> void

          def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::address

          type address_type =
            :business | :mailing | :other | :po_box | :residential

          module AddressType
            extend ModernTreasury::Enum

            BUSINESS: :business
            MAILING: :mailing
            OTHER: :other
            PO_BOX: :po_box
            RESIDENTIAL: :residential

            def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Address::address_type]
          end
        end

        type identification =
          {
            id_number: String,
            id_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification::id_type,
            issuing_country: String?
          }

        class Identification < ModernTreasury::BaseModel
          attr_accessor id_number: String

          attr_accessor id_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification::id_type

          attr_accessor issuing_country: String?

          def initialize: (
            id_number: String,
            id_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification::id_type,
            ?issuing_country: String?
          ) -> void

          def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::identification

          type id_type =
            :ar_cuil
            | :ar_cuit
            | :br_cnpj
            | :br_cpf
            | :cl_run
            | :cl_rut
            | :co_cedulas
            | :co_nit
            | :hn_id
            | :hn_rtn
            | :in_lei
            | :kr_brn
            | :kr_crn
            | :kr_rrn
            | :passport
            | :sa_tin
            | :sa_vat
            | :us_ein
            | :us_itin
            | :us_ssn
            | :vn_tin

          module IDType
            extend ModernTreasury::Enum

            AR_CUIL: :ar_cuil
            AR_CUIT: :ar_cuit
            BR_CNPJ: :br_cnpj
            BR_CPF: :br_cpf
            CL_RUN: :cl_run
            CL_RUT: :cl_rut
            CO_CEDULAS: :co_cedulas
            CO_NIT: :co_nit
            HN_ID: :hn_id
            HN_RTN: :hn_rtn
            IN_LEI: :in_lei
            KR_BRN: :kr_brn
            KR_CRN: :kr_crn
            KR_RRN: :kr_rrn
            PASSPORT: :passport
            SA_TIN: :sa_tin
            SA_VAT: :sa_vat
            US_EIN: :us_ein
            US_ITIN: :us_itin
            US_SSN: :us_ssn
            VN_TIN: :vn_tin

            def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::Identification::id_type]
          end
        end

        type legal_entity_association =
          {
            relationship_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::relationship_type],
            child_legal_entity: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity,
            child_legal_entity_id: String,
            ownership_percentage: Integer?,
            title: String?
          }

        class LegalEntityAssociation < ModernTreasury::BaseModel
          attr_accessor relationship_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::relationship_type]

          attr_reader child_legal_entity: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity?

          def child_legal_entity=: (
            ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity
          ) -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity

          attr_reader child_legal_entity_id: String?

          def child_legal_entity_id=: (String) -> String

          attr_accessor ownership_percentage: Integer?

          attr_accessor title: String?

          def initialize: (
            relationship_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::relationship_type],
            ?child_legal_entity: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity,
            ?child_legal_entity_id: String,
            ?ownership_percentage: Integer?,
            ?title: String?
          ) -> void

          def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_association

          type relationship_type = :beneficial_owner | :control_person

          module RelationshipType
            extend ModernTreasury::Enum

            BENEFICIAL_OWNER: :beneficial_owner
            CONTROL_PERSON: :control_person

            def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::relationship_type]
          end

          type child_legal_entity =
            {
              addresses: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address],
              bank_settings: ModernTreasury::Models::BankSettings?,
              business_name: String?,
              citizenship_country: String?,
              date_formed: Date?,
              date_of_birth: Date?,
              doing_business_as_names: ::Array[String],
              email: String?,
              first_name: String?,
              identifications: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification],
              last_name: String?,
              legal_entity_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_entity_type,
              legal_structure: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_structure?,
              metadata: ::Hash[Symbol, String],
              middle_name: String?,
              phone_numbers: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::PhoneNumber],
              politically_exposed_person: bool?,
              preferred_name: String?,
              prefix: String?,
              risk_rating: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::risk_rating?,
              suffix: String?,
              wealth_and_employment_details: ModernTreasury::Models::WealthAndEmploymentDetails?,
              website: String?
            }

          class ChildLegalEntity < ModernTreasury::BaseModel
            attr_reader addresses: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address]?

            def addresses=: (
              ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address]
            ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address]

            attr_accessor bank_settings: ModernTreasury::Models::BankSettings?

            attr_accessor business_name: String?

            attr_accessor citizenship_country: String?

            attr_accessor date_formed: Date?

            attr_accessor date_of_birth: Date?

            attr_reader doing_business_as_names: ::Array[String]?

            def doing_business_as_names=: (::Array[String]) -> ::Array[String]

            attr_accessor email: String?

            attr_accessor first_name: String?

            attr_reader identifications: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification]?

            def identifications=: (
              ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification]
            ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification]

            attr_accessor last_name: String?

            attr_reader legal_entity_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_entity_type?

            def legal_entity_type=: (
              ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_entity_type
            ) -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_entity_type

            attr_accessor legal_structure: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_structure?

            attr_reader metadata: ::Hash[Symbol, String]?

            def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

            attr_accessor middle_name: String?

            attr_reader phone_numbers: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::PhoneNumber]?

            def phone_numbers=: (
              ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::PhoneNumber]
            ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::PhoneNumber]

            attr_accessor politically_exposed_person: bool?

            attr_accessor preferred_name: String?

            attr_accessor prefix: String?

            attr_accessor risk_rating: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::risk_rating?

            attr_accessor suffix: String?

            attr_accessor wealth_and_employment_details: ModernTreasury::Models::WealthAndEmploymentDetails?

            attr_accessor website: String?

            def initialize: (
              ?addresses: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address],
              ?bank_settings: ModernTreasury::Models::BankSettings?,
              ?business_name: String?,
              ?citizenship_country: String?,
              ?date_formed: Date?,
              ?date_of_birth: Date?,
              ?doing_business_as_names: ::Array[String],
              ?email: String?,
              ?first_name: String?,
              ?identifications: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification],
              ?last_name: String?,
              ?legal_entity_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_entity_type,
              ?legal_structure: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_structure?,
              ?metadata: ::Hash[Symbol, String],
              ?middle_name: String?,
              ?phone_numbers: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::PhoneNumber],
              ?politically_exposed_person: bool?,
              ?preferred_name: String?,
              ?prefix: String?,
              ?risk_rating: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::risk_rating?,
              ?suffix: String?,
              ?wealth_and_employment_details: ModernTreasury::Models::WealthAndEmploymentDetails?,
              ?website: String?
            ) -> void

            def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::child_legal_entity

            type address =
              {
                country: String?,
                :line1 => String?,
                locality: String?,
                postal_code: String?,
                region: String?,
                address_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address::address_type],
                :line2 => String?
              }

            class Address < ModernTreasury::BaseModel
              attr_accessor country: String?

              attr_accessor line1: String?

              attr_accessor locality: String?

              attr_accessor postal_code: String?

              attr_accessor region: String?

              attr_reader address_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address::address_type]?

              def address_types=: (
                ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address::address_type]
              ) -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address::address_type]

              attr_accessor line2: String?

              def initialize: (
                country: String?,
                line1: String?,
                locality: String?,
                postal_code: String?,
                region: String?,
                ?address_types: ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address::address_type],
                ?line2: String?
              ) -> void

              def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::address

              type address_type =
                :business | :mailing | :other | :po_box | :residential

              module AddressType
                extend ModernTreasury::Enum

                BUSINESS: :business
                MAILING: :mailing
                OTHER: :other
                PO_BOX: :po_box
                RESIDENTIAL: :residential

                def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Address::address_type]
              end
            end

            type identification =
              {
                id_number: String,
                id_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification::id_type,
                issuing_country: String?
              }

            class Identification < ModernTreasury::BaseModel
              attr_accessor id_number: String

              attr_accessor id_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification::id_type

              attr_accessor issuing_country: String?

              def initialize: (
                id_number: String,
                id_type: ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification::id_type,
                ?issuing_country: String?
              ) -> void

              def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::identification

              type id_type =
                :ar_cuil
                | :ar_cuit
                | :br_cnpj
                | :br_cpf
                | :cl_run
                | :cl_rut
                | :co_cedulas
                | :co_nit
                | :hn_id
                | :hn_rtn
                | :in_lei
                | :kr_brn
                | :kr_crn
                | :kr_rrn
                | :passport
                | :sa_tin
                | :sa_vat
                | :us_ein
                | :us_itin
                | :us_ssn
                | :vn_tin

              module IDType
                extend ModernTreasury::Enum

                AR_CUIL: :ar_cuil
                AR_CUIT: :ar_cuit
                BR_CNPJ: :br_cnpj
                BR_CPF: :br_cpf
                CL_RUN: :cl_run
                CL_RUT: :cl_rut
                CO_CEDULAS: :co_cedulas
                CO_NIT: :co_nit
                HN_ID: :hn_id
                HN_RTN: :hn_rtn
                IN_LEI: :in_lei
                KR_BRN: :kr_brn
                KR_CRN: :kr_crn
                KR_RRN: :kr_rrn
                PASSPORT: :passport
                SA_TIN: :sa_tin
                SA_VAT: :sa_vat
                US_EIN: :us_ein
                US_ITIN: :us_itin
                US_SSN: :us_ssn
                VN_TIN: :vn_tin

                def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::Identification::id_type]
              end
            end

            type legal_entity_type = :business | :individual

            module LegalEntityType
              extend ModernTreasury::Enum

              BUSINESS: :business
              INDIVIDUAL: :individual

              def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_entity_type]
            end

            type legal_structure =
              :corporation
              | :llc
              | :non_profit
              | :partnership
              | :sole_proprietorship
              | :trust

            module LegalStructure
              extend ModernTreasury::Enum

              CORPORATION: :corporation
              LLC: :llc
              NON_PROFIT: :non_profit
              PARTNERSHIP: :partnership
              SOLE_PROPRIETORSHIP: :sole_proprietorship
              TRUST: :trust

              def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::legal_structure]
            end

            type phone_number = { phone_number: String }

            class PhoneNumber < ModernTreasury::BaseModel
              attr_reader phone_number: String?

              def phone_number=: (String) -> String

              def initialize: (?phone_number: String) -> void

              def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::phone_number
            end

            type risk_rating = :low | :medium | :high

            module RiskRating
              extend ModernTreasury::Enum

              LOW: :low
              MEDIUM: :medium
              HIGH: :high

              def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::LegalEntityAssociation::ChildLegalEntity::risk_rating]
            end
          end
        end

        type legal_entity_type = :business | :individual

        module LegalEntityType
          extend ModernTreasury::Enum

          BUSINESS: :business
          INDIVIDUAL: :individual

          def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_entity_type]
        end

        type legal_structure =
          :corporation
          | :llc
          | :non_profit
          | :partnership
          | :sole_proprietorship
          | :trust

        module LegalStructure
          extend ModernTreasury::Enum

          CORPORATION: :corporation
          LLC: :llc
          NON_PROFIT: :non_profit
          PARTNERSHIP: :partnership
          SOLE_PROPRIETORSHIP: :sole_proprietorship
          TRUST: :trust

          def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::legal_structure]
        end

        type phone_number = { phone_number: String }

        class PhoneNumber < ModernTreasury::BaseModel
          attr_reader phone_number: String?

          def phone_number=: (String) -> String

          def initialize: (?phone_number: String) -> void

          def to_hash: -> ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::phone_number
        end

        type risk_rating = :low | :medium | :high

        module RiskRating
          extend ModernTreasury::Enum

          LOW: :low
          MEDIUM: :medium
          HIGH: :high

          def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntityCreateParams::LegalEntity::risk_rating]
        end
      end
    end
  end
end
