module ModernTreasury
  module Models
    type foreign_exchange_quote =
      {
        id: String,
        created_at: Time,
        effective_at: Time,
        expires_at: Time,
        foreign_exchange_indicator: String,
        foreign_exchange_rate: ModernTreasury::ForeignExchangeRate,
        internal_account_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        updated_at: Time,
        vendor_id: String
      }

    class ForeignExchangeQuote < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor effective_at: Time

      attr_accessor expires_at: Time

      attr_accessor foreign_exchange_indicator: String

      attr_accessor foreign_exchange_rate: ModernTreasury::ForeignExchangeRate

      attr_accessor internal_account_id: String

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor object: String

      attr_accessor updated_at: Time

      attr_reader vendor_id: String?

      def vendor_id=: (String) -> String

      def initialize: (
        id: String,
        created_at: Time,
        effective_at: Time,
        expires_at: Time,
        foreign_exchange_indicator: String,
        foreign_exchange_rate: ModernTreasury::ForeignExchangeRate,
        internal_account_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        updated_at: Time,
        ?vendor_id: String
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Time,
        effective_at: Time,
        expires_at: Time,
        foreign_exchange_indicator: String,
        foreign_exchange_rate: ModernTreasury::ForeignExchangeRate,
        internal_account_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        updated_at: Time,
        vendor_id: String
      }
    end
  end
end
