module ModernTreasury
  module Models
    type routing_number_lookup_request =
      {
        bank_address: ModernTreasury::Models::RoutingNumberLookupRequest::BankAddress,
        bank_name: String,
        routing_number: String,
        routing_number_type: ModernTreasury::Models::RoutingNumberLookupRequest::routing_number_type,
        sanctions: ::Hash[Symbol, top],
        supported_payment_types: ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::supported_payment_type]
      }

    class RoutingNumberLookupRequest < ModernTreasury::BaseModel
      attr_reader bank_address: ModernTreasury::Models::RoutingNumberLookupRequest::BankAddress?

      def bank_address=: (
        ModernTreasury::Models::RoutingNumberLookupRequest::BankAddress
      ) -> ModernTreasury::Models::RoutingNumberLookupRequest::BankAddress

      attr_reader bank_name: String?

      def bank_name=: (String) -> String

      attr_reader routing_number: String?

      def routing_number=: (String) -> String

      attr_reader routing_number_type: ModernTreasury::Models::RoutingNumberLookupRequest::routing_number_type?

      def routing_number_type=: (
        ModernTreasury::Models::RoutingNumberLookupRequest::routing_number_type
      ) -> ModernTreasury::Models::RoutingNumberLookupRequest::routing_number_type

      attr_reader sanctions: ::Hash[Symbol, top]?

      def sanctions=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

      attr_reader supported_payment_types: ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::supported_payment_type]?

      def supported_payment_types=: (
        ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::supported_payment_type]
      ) -> ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::supported_payment_type]

      def initialize: (
        ?bank_address: ModernTreasury::Models::RoutingNumberLookupRequest::BankAddress,
        ?bank_name: String,
        ?routing_number: String,
        ?routing_number_type: ModernTreasury::Models::RoutingNumberLookupRequest::routing_number_type,
        ?sanctions: ::Hash[Symbol, top],
        ?supported_payment_types: ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::supported_payment_type]
      ) -> void

      def to_hash: -> ModernTreasury::Models::routing_number_lookup_request

      type bank_address =
        {
          country: String?,
          :line1 => String?,
          :line2 => String?,
          locality: String?,
          postal_code: String?,
          region: String?
        }

      class BankAddress < ModernTreasury::BaseModel
        attr_accessor country: String?

        attr_accessor line1: String?

        attr_accessor line2: String?

        attr_accessor locality: String?

        attr_accessor postal_code: String?

        attr_accessor region: String?

        def initialize: (
          ?country: String?,
          ?line1: String?,
          ?line2: String?,
          ?locality: String?,
          ?postal_code: String?,
          ?region: String?
        ) -> void

        def to_hash: -> ModernTreasury::Models::RoutingNumberLookupRequest::bank_address
      end

      type routing_number_type =
        :aba
        | :au_bsb
        | :ca_cpa
        | :gb_sort_code
        | :in_ifsc
        | :nz_national_clearing_code
        | :se_bankgiro_clearing_code
        | :swift

      module RoutingNumberType
        extend ModernTreasury::Enum

        ABA: :aba
        AU_BSB: :au_bsb
        CA_CPA: :ca_cpa
        GB_SORT_CODE: :gb_sort_code
        IN_IFSC: :in_ifsc
        NZ_NATIONAL_CLEARING_CODE: :nz_national_clearing_code
        SE_BANKGIRO_CLEARING_CODE: :se_bankgiro_clearing_code
        SWIFT: :swift

        def self.values: -> ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::routing_number_type]
      end

      type supported_payment_type =
        :ach
        | :au_becs
        | :bacs
        | :book
        | :card
        | :chats
        | :check
        | :cross_border
        | :dk_nets
        | :eft
        | :hu_ics
        | :interac
        | :masav
        | :mx_ccen
        | :neft
        | :nics
        | :nz_becs
        | :pl_elixir
        | :provxchange
        | :ro_sent
        | :rtp
        | :se_bankgirot
        | :sen
        | :sepa
        | :sg_giro
        | :sic
        | :signet
        | :sknbi
        | :wire
        | :zengin

      module SupportedPaymentType
        extend ModernTreasury::Enum

        ACH: :ach
        AU_BECS: :au_becs
        BACS: :bacs
        BOOK: :book
        CARD: :card
        CHATS: :chats
        CHECK: :check
        CROSS_BORDER: :cross_border
        DK_NETS: :dk_nets
        EFT: :eft
        HU_ICS: :hu_ics
        INTERAC: :interac
        MASAV: :masav
        MX_CCEN: :mx_ccen
        NEFT: :neft
        NICS: :nics
        NZ_BECS: :nz_becs
        PL_ELIXIR: :pl_elixir
        PROVXCHANGE: :provxchange
        RO_SENT: :ro_sent
        RTP: :rtp
        SE_BANKGIROT: :se_bankgirot
        SEN: :sen
        SEPA: :sepa
        SG_GIRO: :sg_giro
        SIC: :sic
        SIGNET: :signet
        SKNBI: :sknbi
        WIRE: :wire
        ZENGIN: :zengin

        def self.values: -> ::Array[ModernTreasury::Models::RoutingNumberLookupRequest::supported_payment_type]
      end
    end
  end
end
