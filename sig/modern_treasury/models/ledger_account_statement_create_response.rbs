module ModernTreasury
  module Models
    type ledger_account_statement_create_response =
      {
        id: String,
        created_at: Time,
        description: String?,
        effective_at_lower_bound: Time,
        effective_at_upper_bound: Time,
        ending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance,
        ledger_account_id: String,
        ledger_account_lock_version: Integer,
        ledger_account_normal_balance: ModernTreasury::Models::transaction_direction,
        ledger_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        starting_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance,
        updated_at: Time
      }

    class LedgerAccountStatementCreateResponse < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor description: String?

      attr_accessor effective_at_lower_bound: Time

      attr_accessor effective_at_upper_bound: Time

      attr_accessor ending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance

      attr_accessor ledger_account_id: String

      attr_accessor ledger_account_lock_version: Integer

      attr_accessor ledger_account_normal_balance: ModernTreasury::Models::transaction_direction

      attr_accessor ledger_id: String

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor object: String

      attr_accessor starting_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance

      attr_accessor updated_at: Time

      def initialize: (
        id: String,
        created_at: Time,
        description: String?,
        effective_at_lower_bound: Time,
        effective_at_upper_bound: Time,
        ending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance,
        ledger_account_id: String,
        ledger_account_lock_version: Integer,
        ledger_account_normal_balance: ModernTreasury::Models::transaction_direction,
        ledger_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        starting_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance,
        updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Time,
        description: String?,
        effective_at_lower_bound: Time,
        effective_at_upper_bound: Time,
        ending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance,
        ledger_account_id: String,
        ledger_account_lock_version: Integer,
        ledger_account_normal_balance: ModernTreasury::Models::transaction_direction,
        ledger_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        starting_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance,
        updated_at: Time
      }

      type ending_balance =
        {
          available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::AvailableBalance,
          pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PendingBalance,
          posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PostedBalance
        }

      class EndingBalance < ModernTreasury::Internal::Type::BaseModel
        attr_accessor available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::AvailableBalance

        attr_accessor pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PendingBalance

        attr_accessor posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PostedBalance

        def initialize: (
          available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::AvailableBalance,
          pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PendingBalance,
          posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PostedBalance
        ) -> void

        def to_hash: -> {
          available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::AvailableBalance,
          pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PendingBalance,
          posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::EndingBalance::PostedBalance
        }

        type available_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class AvailableBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void

          def to_hash: -> {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }
        end

        type pending_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class PendingBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void

          def to_hash: -> {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }
        end

        type posted_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class PostedBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void

          def to_hash: -> {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }
        end
      end

      type starting_balance =
        {
          available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::AvailableBalance,
          pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PendingBalance,
          posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PostedBalance
        }

      class StartingBalance < ModernTreasury::Internal::Type::BaseModel
        attr_accessor available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::AvailableBalance

        attr_accessor pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PendingBalance

        attr_accessor posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PostedBalance

        def initialize: (
          available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::AvailableBalance,
          pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PendingBalance,
          posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PostedBalance
        ) -> void

        def to_hash: -> {
          available_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::AvailableBalance,
          pending_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PendingBalance,
          posted_balance: ModernTreasury::Models::LedgerAccountStatementCreateResponse::StartingBalance::PostedBalance
        }

        type available_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class AvailableBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void

          def to_hash: -> {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }
        end

        type pending_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class PendingBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void

          def to_hash: -> {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }
        end

        type posted_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class PostedBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void

          def to_hash: -> {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }
        end
      end
    end
  end
end
