module ModernTreasury
  module Models
    type invoice_update_params =
      {
        contact_details: ::Array[ModernTreasury::InvoiceUpdateParams::ContactDetail],
        counterparty_billing_address: ModernTreasury::InvoiceUpdateParams::CounterpartyBillingAddress?,
        counterparty_id: String,
        counterparty_shipping_address: ModernTreasury::InvoiceUpdateParams::CounterpartyShippingAddress?,
        currency: ModernTreasury::Models::currency,
        description: String,
        due_date: Time,
        fallback_payment_method: String?,
        ingest_ledger_entries: bool?,
        invoice_line_items: ::Array[ModernTreasury::InvoiceUpdateParams::InvoiceLineItem]?,
        invoicer_address: ModernTreasury::InvoiceUpdateParams::InvoicerAddress?,
        ledger_account_settlement_id: String?,
        metadata: ::Hash[Symbol, String]?,
        notification_email_addresses: ::Array[String]?,
        notifications_enabled: bool,
        originating_account_id: String,
        payment_effective_date: Date,
        payment_method: ModernTreasury::Models::InvoiceUpdateParams::payment_method,
        payment_type: ModernTreasury::Models::payment_order_type,
        receiving_account_id: String,
        recipient_email: String?,
        recipient_name: String?,
        remind_after_overdue_days: ::Array[Integer]?,
        status: String,
        virtual_account_id: String?
      }
      & ModernTreasury::Internal::Type::request_parameters

    class InvoiceUpdateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_reader contact_details: ::Array[ModernTreasury::InvoiceUpdateParams::ContactDetail]?

      def contact_details=: (
        ::Array[ModernTreasury::InvoiceUpdateParams::ContactDetail]
      ) -> ::Array[ModernTreasury::InvoiceUpdateParams::ContactDetail]

      attr_accessor counterparty_billing_address: ModernTreasury::InvoiceUpdateParams::CounterpartyBillingAddress?

      attr_reader counterparty_id: String?

      def counterparty_id=: (String) -> String

      attr_accessor counterparty_shipping_address: ModernTreasury::InvoiceUpdateParams::CounterpartyShippingAddress?

      attr_reader currency: ModernTreasury::Models::currency?

      def currency=: (
        ModernTreasury::Models::currency
      ) -> ModernTreasury::Models::currency

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader due_date: Time?

      def due_date=: (Time) -> Time

      attr_accessor fallback_payment_method: String?

      attr_accessor ingest_ledger_entries: bool?

      attr_accessor invoice_line_items: ::Array[ModernTreasury::InvoiceUpdateParams::InvoiceLineItem]?

      attr_accessor invoicer_address: ModernTreasury::InvoiceUpdateParams::InvoicerAddress?

      attr_accessor ledger_account_settlement_id: String?

      attr_accessor metadata: ::Hash[Symbol, String]?

      attr_accessor notification_email_addresses: ::Array[String]?

      attr_reader notifications_enabled: bool?

      def notifications_enabled=: (bool) -> bool

      attr_reader originating_account_id: String?

      def originating_account_id=: (String) -> String

      attr_reader payment_effective_date: Date?

      def payment_effective_date=: (Date) -> Date

      attr_reader payment_method: ModernTreasury::Models::InvoiceUpdateParams::payment_method?

      def payment_method=: (
        ModernTreasury::Models::InvoiceUpdateParams::payment_method
      ) -> ModernTreasury::Models::InvoiceUpdateParams::payment_method

      attr_reader payment_type: ModernTreasury::Models::payment_order_type?

      def payment_type=: (
        ModernTreasury::Models::payment_order_type
      ) -> ModernTreasury::Models::payment_order_type

      attr_reader receiving_account_id: String?

      def receiving_account_id=: (String) -> String

      attr_accessor recipient_email: String?

      attr_accessor recipient_name: String?

      attr_accessor remind_after_overdue_days: ::Array[Integer]?

      attr_reader status: String?

      def status=: (String) -> String

      attr_accessor virtual_account_id: String?

      def initialize: (
        ?contact_details: ::Array[ModernTreasury::InvoiceUpdateParams::ContactDetail],
        ?counterparty_billing_address: ModernTreasury::InvoiceUpdateParams::CounterpartyBillingAddress?,
        ?counterparty_id: String,
        ?counterparty_shipping_address: ModernTreasury::InvoiceUpdateParams::CounterpartyShippingAddress?,
        ?currency: ModernTreasury::Models::currency,
        ?description: String,
        ?due_date: Time,
        ?fallback_payment_method: String?,
        ?ingest_ledger_entries: bool?,
        ?invoice_line_items: ::Array[ModernTreasury::InvoiceUpdateParams::InvoiceLineItem]?,
        ?invoicer_address: ModernTreasury::InvoiceUpdateParams::InvoicerAddress?,
        ?ledger_account_settlement_id: String?,
        ?metadata: ::Hash[Symbol, String]?,
        ?notification_email_addresses: ::Array[String]?,
        ?notifications_enabled: bool,
        ?originating_account_id: String,
        ?payment_effective_date: Date,
        ?payment_method: ModernTreasury::Models::InvoiceUpdateParams::payment_method,
        ?payment_type: ModernTreasury::Models::payment_order_type,
        ?receiving_account_id: String,
        ?recipient_email: String?,
        ?recipient_name: String?,
        ?remind_after_overdue_days: ::Array[Integer]?,
        ?status: String,
        ?virtual_account_id: String?,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      type contact_detail =
        {
          id: String,
          contact_identifier: String,
          contact_identifier_type: ModernTreasury::InvoiceUpdateParams::ContactDetail::contact_identifier_type,
          created_at: Time,
          discarded_at: Time?,
          live_mode: bool,
          object: String,
          updated_at: Time
        }

      class ContactDetail < ModernTreasury::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor contact_identifier: String

        attr_accessor contact_identifier_type: ModernTreasury::InvoiceUpdateParams::ContactDetail::contact_identifier_type

        attr_accessor created_at: Time

        attr_accessor discarded_at: Time?

        attr_accessor live_mode: bool

        attr_accessor object: String

        attr_accessor updated_at: Time

        def initialize: (
          id: String,
          contact_identifier: String,
          contact_identifier_type: ModernTreasury::InvoiceUpdateParams::ContactDetail::contact_identifier_type,
          created_at: Time,
          discarded_at: Time?,
          live_mode: bool,
          object: String,
          updated_at: Time
        ) -> void

        type contact_identifier_type = :email | :phone_number | :website

        module ContactIdentifierType
          extend ModernTreasury::Internal::Type::Enum

          EMAIL: :email
          PHONE_NUMBER: :phone_number
          WEBSITE: :website

          def self?.values: -> ::Array[ModernTreasury::InvoiceUpdateParams::ContactDetail::contact_identifier_type]
        end
      end

      type counterparty_billing_address =
        {
          country: String,
          :line1 => String,
          locality: String,
          postal_code: String,
          region: String,
          :line2 => String
        }

      class CounterpartyBillingAddress < ModernTreasury::Internal::Type::BaseModel
        attr_accessor country: String

        attr_accessor line1: String

        attr_accessor locality: String

        attr_accessor postal_code: String

        attr_accessor region: String

        attr_reader line2: String?

        def line2=: (String) -> String

        def initialize: (
          country: String,
          line1: String,
          locality: String,
          postal_code: String,
          region: String,
          ?line2: String
        ) -> void
      end

      type counterparty_shipping_address =
        {
          country: String,
          :line1 => String,
          locality: String,
          postal_code: String,
          region: String,
          :line2 => String
        }

      class CounterpartyShippingAddress < ModernTreasury::Internal::Type::BaseModel
        attr_accessor country: String

        attr_accessor line1: String

        attr_accessor locality: String

        attr_accessor postal_code: String

        attr_accessor region: String

        attr_reader line2: String?

        def line2=: (String) -> String

        def initialize: (
          country: String,
          line1: String,
          locality: String,
          postal_code: String,
          region: String,
          ?line2: String
        ) -> void
      end

      type invoice_line_item =
        {
          name: String,
          unit_amount: Integer,
          description: String,
          direction: String,
          metadata: ::Hash[Symbol, String],
          quantity: Integer,
          unit_amount_decimal: String
        }

      class InvoiceLineItem < ModernTreasury::Internal::Type::BaseModel
        attr_accessor name: String

        attr_accessor unit_amount: Integer

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader direction: String?

        def direction=: (String) -> String

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_reader quantity: Integer?

        def quantity=: (Integer) -> Integer

        attr_reader unit_amount_decimal: String?

        def unit_amount_decimal=: (String) -> String

        def initialize: (
          name: String,
          unit_amount: Integer,
          ?description: String,
          ?direction: String,
          ?metadata: ::Hash[Symbol, String],
          ?quantity: Integer,
          ?unit_amount_decimal: String
        ) -> void
      end

      type invoicer_address =
        {
          country: String,
          :line1 => String,
          locality: String,
          postal_code: String,
          region: String,
          :line2 => String
        }

      class InvoicerAddress < ModernTreasury::Internal::Type::BaseModel
        attr_accessor country: String

        attr_accessor line1: String

        attr_accessor locality: String

        attr_accessor postal_code: String

        attr_accessor region: String

        attr_reader line2: String?

        def line2=: (String) -> String

        def initialize: (
          country: String,
          line1: String,
          locality: String,
          postal_code: String,
          region: String,
          ?line2: String
        ) -> void
      end

      type payment_method = :ui | :manual | :automatic

      module PaymentMethod
        extend ModernTreasury::Internal::Type::Enum

        UI: :ui
        MANUAL: :manual
        AUTOMATIC: :automatic

        def self?.values: -> ::Array[ModernTreasury::Models::InvoiceUpdateParams::payment_method]
      end
    end
  end
end
