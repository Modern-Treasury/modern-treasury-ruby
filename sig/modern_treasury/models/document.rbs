module ModernTreasury
  module Models
    type document =
      {
        id: String,
        created_at: Time,
        discarded_at: Time?,
        document_details: ::Array[ModernTreasury::Document::DocumentDetail],
        document_type: String?,
        documentable_id: String,
        documentable_type: ModernTreasury::Models::Document::documentable_type,
        file: ModernTreasury::Document::File,
        live_mode: bool,
        object: String,
        source: String,
        updated_at: Time
      }

    class Document < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor discarded_at: Time?

      attr_accessor document_details: ::Array[ModernTreasury::Document::DocumentDetail]

      attr_accessor document_type: String?

      attr_accessor documentable_id: String

      attr_accessor documentable_type: ModernTreasury::Models::Document::documentable_type

      attr_accessor file: ModernTreasury::Document::File

      attr_accessor live_mode: bool

      attr_accessor object: String

      attr_accessor source: String

      attr_accessor updated_at: Time

      def initialize: (
        id: String,
        created_at: Time,
        discarded_at: Time?,
        document_details: ::Array[ModernTreasury::Document::DocumentDetail],
        document_type: String?,
        documentable_id: String,
        documentable_type: ModernTreasury::Models::Document::documentable_type,
        file: ModernTreasury::Document::File,
        live_mode: bool,
        object: String,
        source: String,
        updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Time,
        discarded_at: Time?,
        document_details: ::Array[ModernTreasury::Document::DocumentDetail],
        document_type: String?,
        documentable_id: String,
        documentable_type: ModernTreasury::Models::Document::documentable_type,
        file: ModernTreasury::Document::File,
        live_mode: bool,
        object: String,
        source: String,
        updated_at: Time
      }

      type document_detail =
        {
          id: String,
          created_at: Time,
          discarded_at: Time?,
          document_identifier: String,
          document_identifier_type: String,
          live_mode: bool,
          object: String,
          updated_at: Time
        }

      class DocumentDetail < ModernTreasury::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Time

        attr_accessor discarded_at: Time?

        attr_accessor document_identifier: String

        attr_accessor document_identifier_type: String

        attr_accessor live_mode: bool

        attr_accessor object: String

        attr_accessor updated_at: Time

        def initialize: (
          id: String,
          created_at: Time,
          discarded_at: Time?,
          document_identifier: String,
          document_identifier_type: String,
          live_mode: bool,
          object: String,
          updated_at: Time
        ) -> void

        def to_hash: -> {
          id: String,
          created_at: Time,
          discarded_at: Time?,
          document_identifier: String,
          document_identifier_type: String,
          live_mode: bool,
          object: String,
          updated_at: Time
        }
      end

      type documentable_type =
        :counterparty
        | :expected_payment
        | :external_account
        | :identification
        | :incoming_payment_detail
        | :internal_account
        | :organization
        | :paper_item
        | :payment_order
        | :transaction
        | :connection

      module DocumentableType
        extend ModernTreasury::Internal::Type::Enum

        COUNTERPARTY: :counterparty
        EXPECTED_PAYMENT: :expected_payment
        EXTERNAL_ACCOUNT: :external_account
        IDENTIFICATION: :identification
        INCOMING_PAYMENT_DETAIL: :incoming_payment_detail
        INTERNAL_ACCOUNT: :internal_account
        ORGANIZATION: :organization
        PAPER_ITEM: :paper_item
        PAYMENT_ORDER: :payment_order
        TRANSACTION: :transaction
        CONNECTION: :connection

        def self?.values: -> ::Array[ModernTreasury::Models::Document::documentable_type]
      end

      type file = { content_type: String, filename: String, size: Integer }

      class File < ModernTreasury::Internal::Type::BaseModel
        attr_reader content_type: String?

        def content_type=: (String) -> String

        attr_reader filename: String?

        def filename=: (String) -> String

        attr_reader size: Integer?

        def size=: (Integer) -> Integer

        def initialize: (
          ?content_type: String,
          ?filename: String,
          ?size: Integer
        ) -> void

        def to_hash: -> {
          content_type: String,
          filename: String,
          size: Integer
        }
      end
    end
  end
end
