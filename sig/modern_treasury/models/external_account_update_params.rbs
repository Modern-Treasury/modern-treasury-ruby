module ModernTreasury
  module Models
    type external_account_update_params =
      {
        account_type: ModernTreasury::Models::external_account_type,
        counterparty_id: String?,
        metadata: ::Hash[Symbol, String],
        name: String?,
        party_address: ModernTreasury::ExternalAccountUpdateParams::PartyAddress,
        party_name: String,
        party_type: ModernTreasury::Models::ExternalAccountUpdateParams::party_type?
      }
      & ModernTreasury::Internal::Type::request_parameters

    class ExternalAccountUpdateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_reader account_type: ModernTreasury::Models::external_account_type?

      def account_type=: (
        ModernTreasury::Models::external_account_type
      ) -> ModernTreasury::Models::external_account_type

      attr_accessor counterparty_id: String?

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_accessor name: String?

      attr_reader party_address: ModernTreasury::ExternalAccountUpdateParams::PartyAddress?

      def party_address=: (
        ModernTreasury::ExternalAccountUpdateParams::PartyAddress
      ) -> ModernTreasury::ExternalAccountUpdateParams::PartyAddress

      attr_reader party_name: String?

      def party_name=: (String) -> String

      attr_accessor party_type: ModernTreasury::Models::ExternalAccountUpdateParams::party_type?

      def initialize: (
        ?account_type: ModernTreasury::Models::external_account_type,
        ?counterparty_id: String?,
        ?metadata: ::Hash[Symbol, String],
        ?name: String?,
        ?party_address: ModernTreasury::ExternalAccountUpdateParams::PartyAddress,
        ?party_name: String,
        ?party_type: ModernTreasury::Models::ExternalAccountUpdateParams::party_type?,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> {
        account_type: ModernTreasury::Models::external_account_type,
        counterparty_id: String?,
        metadata: ::Hash[Symbol, String],
        name: String?,
        party_address: ModernTreasury::ExternalAccountUpdateParams::PartyAddress,
        party_name: String,
        party_type: ModernTreasury::Models::ExternalAccountUpdateParams::party_type?,
        request_options: ModernTreasury::RequestOptions
      }

      type party_address =
        {
          country: String?,
          :line1 => String?,
          :line2 => String?,
          locality: String?,
          postal_code: String?,
          region: String?
        }

      class PartyAddress < ModernTreasury::Internal::Type::BaseModel
        attr_accessor country: String?

        attr_accessor line1: String?

        attr_accessor line2: String?

        attr_accessor locality: String?

        attr_accessor postal_code: String?

        attr_accessor region: String?

        def initialize: (
          ?country: String?,
          ?line1: String?,
          ?line2: String?,
          ?locality: String?,
          ?postal_code: String?,
          ?region: String?
        ) -> void

        def to_hash: -> {
          country: String?,
          :line1 => String?,
          :line2 => String?,
          locality: String?,
          postal_code: String?,
          region: String?
        }
      end

      type party_type = :business | :individual

      module PartyType
        extend ModernTreasury::Internal::Type::Enum

        BUSINESS: :business
        INDIVIDUAL: :individual

        def self?.values: -> ::Array[ModernTreasury::Models::ExternalAccountUpdateParams::party_type]
      end
    end
  end
end
