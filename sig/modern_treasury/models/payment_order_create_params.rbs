module ModernTreasury
  module Models
    type payment_order_create_params =
      {
        amount: Integer,
        direction: ModernTreasury::Models::PaymentOrderCreateParams::direction,
        originating_account_id: String,
        type: ModernTreasury::Models::payment_order_type,
        accounting: ModernTreasury::PaymentOrderCreateParams::Accounting,
        accounting_category_id: String?,
        accounting_ledger_class_id: String?,
        charge_bearer: ModernTreasury::Models::PaymentOrderCreateParams::charge_bearer?,
        currency: ModernTreasury::Models::currency,
        description: String?,
        documents: ::Array[ModernTreasury::PaymentOrderCreateParams::Document],
        effective_date: Date,
        expires_at: Time?,
        fallback_type: ModernTreasury::Models::PaymentOrderCreateParams::fallback_type,
        foreign_exchange_contract: String?,
        foreign_exchange_indicator: ModernTreasury::Models::PaymentOrderCreateParams::foreign_exchange_indicator?,
        ledger_transaction: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction,
        ledger_transaction_id: String,
        line_items: ::Array[ModernTreasury::PaymentOrderCreateParams::LineItem],
        metadata: ::Hash[Symbol, String],
        nsf_protected: bool,
        originating_party_name: String?,
        priority: ModernTreasury::Models::PaymentOrderCreateParams::priority,
        process_after: Time?,
        purpose: String?,
        receiving_account: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount,
        receiving_account_id: String,
        remittance_information: String?,
        send_remittance_advice: bool?,
        statement_descriptor: String?,
        subtype: ModernTreasury::Models::payment_order_subtype?,
        transaction_monitoring_enabled: bool,
        ultimate_originating_party_identifier: String?,
        ultimate_originating_party_name: String?,
        ultimate_receiving_party_identifier: String?,
        ultimate_receiving_party_name: String?
      }
      & ModernTreasury::Internal::Type::request_parameters

    class PaymentOrderCreateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor amount: Integer

      attr_accessor direction: ModernTreasury::Models::PaymentOrderCreateParams::direction

      attr_accessor originating_account_id: String

      attr_accessor type: ModernTreasury::Models::payment_order_type

      attr_reader accounting: ModernTreasury::PaymentOrderCreateParams::Accounting?

      def accounting=: (
        ModernTreasury::PaymentOrderCreateParams::Accounting
      ) -> ModernTreasury::PaymentOrderCreateParams::Accounting

      attr_accessor accounting_category_id: String?

      attr_accessor accounting_ledger_class_id: String?

      attr_accessor charge_bearer: ModernTreasury::Models::PaymentOrderCreateParams::charge_bearer?

      attr_reader currency: ModernTreasury::Models::currency?

      def currency=: (
        ModernTreasury::Models::currency
      ) -> ModernTreasury::Models::currency

      attr_accessor description: String?

      attr_reader documents: ::Array[ModernTreasury::PaymentOrderCreateParams::Document]?

      def documents=: (
        ::Array[ModernTreasury::PaymentOrderCreateParams::Document]
      ) -> ::Array[ModernTreasury::PaymentOrderCreateParams::Document]

      attr_reader effective_date: Date?

      def effective_date=: (Date) -> Date

      attr_accessor expires_at: Time?

      attr_reader fallback_type: ModernTreasury::Models::PaymentOrderCreateParams::fallback_type?

      def fallback_type=: (
        ModernTreasury::Models::PaymentOrderCreateParams::fallback_type
      ) -> ModernTreasury::Models::PaymentOrderCreateParams::fallback_type

      attr_accessor foreign_exchange_contract: String?

      attr_accessor foreign_exchange_indicator: ModernTreasury::Models::PaymentOrderCreateParams::foreign_exchange_indicator?

      attr_reader ledger_transaction: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction?

      def ledger_transaction=: (
        ModernTreasury::PaymentOrderCreateParams::LedgerTransaction
      ) -> ModernTreasury::PaymentOrderCreateParams::LedgerTransaction

      attr_reader ledger_transaction_id: String?

      def ledger_transaction_id=: (String) -> String

      attr_reader line_items: ::Array[ModernTreasury::PaymentOrderCreateParams::LineItem]?

      def line_items=: (
        ::Array[ModernTreasury::PaymentOrderCreateParams::LineItem]
      ) -> ::Array[ModernTreasury::PaymentOrderCreateParams::LineItem]

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader nsf_protected: bool?

      def nsf_protected=: (bool) -> bool

      attr_accessor originating_party_name: String?

      attr_reader priority: ModernTreasury::Models::PaymentOrderCreateParams::priority?

      def priority=: (
        ModernTreasury::Models::PaymentOrderCreateParams::priority
      ) -> ModernTreasury::Models::PaymentOrderCreateParams::priority

      attr_accessor process_after: Time?

      attr_accessor purpose: String?

      attr_reader receiving_account: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount?

      def receiving_account=: (
        ModernTreasury::PaymentOrderCreateParams::ReceivingAccount
      ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount

      attr_reader receiving_account_id: String?

      def receiving_account_id=: (String) -> String

      attr_accessor remittance_information: String?

      attr_accessor send_remittance_advice: bool?

      attr_accessor statement_descriptor: String?

      attr_accessor subtype: ModernTreasury::Models::payment_order_subtype?

      attr_reader transaction_monitoring_enabled: bool?

      def transaction_monitoring_enabled=: (bool) -> bool

      attr_accessor ultimate_originating_party_identifier: String?

      attr_accessor ultimate_originating_party_name: String?

      attr_accessor ultimate_receiving_party_identifier: String?

      attr_accessor ultimate_receiving_party_name: String?

      def initialize: (
        amount: Integer,
        direction: ModernTreasury::Models::PaymentOrderCreateParams::direction,
        originating_account_id: String,
        type: ModernTreasury::Models::payment_order_type,
        ?accounting: ModernTreasury::PaymentOrderCreateParams::Accounting,
        ?accounting_category_id: String?,
        ?accounting_ledger_class_id: String?,
        ?charge_bearer: ModernTreasury::Models::PaymentOrderCreateParams::charge_bearer?,
        ?currency: ModernTreasury::Models::currency,
        ?description: String?,
        ?documents: ::Array[ModernTreasury::PaymentOrderCreateParams::Document],
        ?effective_date: Date,
        ?expires_at: Time?,
        ?fallback_type: ModernTreasury::Models::PaymentOrderCreateParams::fallback_type,
        ?foreign_exchange_contract: String?,
        ?foreign_exchange_indicator: ModernTreasury::Models::PaymentOrderCreateParams::foreign_exchange_indicator?,
        ?ledger_transaction: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction,
        ?ledger_transaction_id: String,
        ?line_items: ::Array[ModernTreasury::PaymentOrderCreateParams::LineItem],
        ?metadata: ::Hash[Symbol, String],
        ?nsf_protected: bool,
        ?originating_party_name: String?,
        ?priority: ModernTreasury::Models::PaymentOrderCreateParams::priority,
        ?process_after: Time?,
        ?purpose: String?,
        ?receiving_account: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount,
        ?receiving_account_id: String,
        ?remittance_information: String?,
        ?send_remittance_advice: bool?,
        ?statement_descriptor: String?,
        ?subtype: ModernTreasury::Models::payment_order_subtype?,
        ?transaction_monitoring_enabled: bool,
        ?ultimate_originating_party_identifier: String?,
        ?ultimate_originating_party_name: String?,
        ?ultimate_receiving_party_identifier: String?,
        ?ultimate_receiving_party_name: String?,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      type direction = :credit | :debit

      module Direction
        extend ModernTreasury::Internal::Type::Enum

        CREDIT: :credit
        DEBIT: :debit

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentOrderCreateParams::direction]
      end

      type accounting = { account_id: String?, class_id: String? }

      class Accounting < ModernTreasury::Internal::Type::BaseModel
        attr_accessor account_id: String?

        attr_accessor class_id: String?

        def initialize: (?account_id: String?, ?class_id: String?) -> void
      end

      type charge_bearer = :shared | :sender | :receiver

      module ChargeBearer
        extend ModernTreasury::Internal::Type::Enum

        SHARED: :shared
        SENDER: :sender
        RECEIVER: :receiver

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentOrderCreateParams::charge_bearer]
      end

      type document =
        {
          documentable_id: String,
          documentable_type: ModernTreasury::PaymentOrderCreateParams::Document::documentable_type,
          file: Pathname | StringIO | IO | ModernTreasury::FilePart,
          document_type: String
        }

      class Document < ModernTreasury::Internal::Type::BaseModel
        attr_accessor documentable_id: String

        attr_accessor documentable_type: ModernTreasury::PaymentOrderCreateParams::Document::documentable_type

        attr_accessor file: Pathname | StringIO | IO | ModernTreasury::FilePart

        attr_reader document_type: String?

        def document_type=: (String) -> String

        def initialize: (
          documentable_id: String,
          documentable_type: ModernTreasury::PaymentOrderCreateParams::Document::documentable_type,
          file: Pathname | StringIO | IO | ModernTreasury::FilePart,
          ?document_type: String
        ) -> void

        type documentable_type =
          :cases
          | :counterparties
          | :expected_payments
          | :external_accounts
          | :incoming_payment_details
          | :internal_accounts
          | :organizations
          | :paper_items
          | :payment_orders
          | :transactions
          | :decisions
          | :connections

        module DocumentableType
          extend ModernTreasury::Internal::Type::Enum

          CASES: :cases
          COUNTERPARTIES: :counterparties
          EXPECTED_PAYMENTS: :expected_payments
          EXTERNAL_ACCOUNTS: :external_accounts
          INCOMING_PAYMENT_DETAILS: :incoming_payment_details
          INTERNAL_ACCOUNTS: :internal_accounts
          ORGANIZATIONS: :organizations
          PAPER_ITEMS: :paper_items
          PAYMENT_ORDERS: :payment_orders
          TRANSACTIONS: :transactions
          DECISIONS: :decisions
          CONNECTIONS: :connections

          def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::Document::documentable_type]
        end
      end

      type fallback_type = :ach

      module FallbackType
        extend ModernTreasury::Internal::Type::Enum

        ACH: :ach

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentOrderCreateParams::fallback_type]
      end

      type foreign_exchange_indicator = :fixed_to_variable | :variable_to_fixed

      module ForeignExchangeIndicator
        extend ModernTreasury::Internal::Type::Enum

        FIXED_TO_VARIABLE: :fixed_to_variable
        VARIABLE_TO_FIXED: :variable_to_fixed

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentOrderCreateParams::foreign_exchange_indicator]
      end

      type ledger_transaction =
        {
          ledger_entries: ::Array[ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::LedgerEntry],
          description: String?,
          effective_at: Time,
          effective_date: Date,
          external_id: String,
          ledgerable_id: String,
          ledgerable_type: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::ledgerable_type,
          metadata: ::Hash[Symbol, String],
          status: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::status
        }

      class LedgerTransaction < ModernTreasury::Internal::Type::BaseModel
        attr_accessor ledger_entries: ::Array[ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::LedgerEntry]

        attr_accessor description: String?

        attr_reader effective_at: Time?

        def effective_at=: (Time) -> Time

        attr_reader effective_date: Date?

        def effective_date=: (Date) -> Date

        attr_reader external_id: String?

        def external_id=: (String) -> String

        attr_reader ledgerable_id: String?

        def ledgerable_id=: (String) -> String

        attr_reader ledgerable_type: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::ledgerable_type?

        def ledgerable_type=: (
          ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::ledgerable_type
        ) -> ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::ledgerable_type

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_reader status: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::status?

        def status=: (
          ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::status
        ) -> ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::status

        def initialize: (
          ledger_entries: ::Array[ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::LedgerEntry],
          ?description: String?,
          ?effective_at: Time,
          ?effective_date: Date,
          ?external_id: String,
          ?ledgerable_id: String,
          ?ledgerable_type: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::ledgerable_type,
          ?metadata: ::Hash[Symbol, String],
          ?status: ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::status
        ) -> void

        type ledger_entry =
          {
            amount: Integer,
            direction: ModernTreasury::Models::transaction_direction,
            ledger_account_id: String,
            available_balance_amount: ::Hash[Symbol, Integer]?,
            lock_version: Integer?,
            metadata: ::Hash[Symbol, String],
            pending_balance_amount: ::Hash[Symbol, Integer]?,
            posted_balance_amount: ::Hash[Symbol, Integer]?,
            show_resulting_ledger_account_balances: bool?
          }

        class LedgerEntry < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor direction: ModernTreasury::Models::transaction_direction

          attr_accessor ledger_account_id: String

          attr_accessor available_balance_amount: ::Hash[Symbol, Integer]?

          attr_accessor lock_version: Integer?

          attr_reader metadata: ::Hash[Symbol, String]?

          def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          attr_accessor pending_balance_amount: ::Hash[Symbol, Integer]?

          attr_accessor posted_balance_amount: ::Hash[Symbol, Integer]?

          attr_accessor show_resulting_ledger_account_balances: bool?

          def initialize: (
            amount: Integer,
            direction: ModernTreasury::Models::transaction_direction,
            ledger_account_id: String,
            ?available_balance_amount: ::Hash[Symbol, Integer]?,
            ?lock_version: Integer?,
            ?metadata: ::Hash[Symbol, String],
            ?pending_balance_amount: ::Hash[Symbol, Integer]?,
            ?posted_balance_amount: ::Hash[Symbol, Integer]?,
            ?show_resulting_ledger_account_balances: bool?
          ) -> void
        end

        type ledgerable_type =
          :expected_payment
          | :incoming_payment_detail
          | :paper_item
          | :payment_order
          | :return
          | :reversal

        module LedgerableType
          extend ModernTreasury::Internal::Type::Enum

          EXPECTED_PAYMENT: :expected_payment
          INCOMING_PAYMENT_DETAIL: :incoming_payment_detail
          PAPER_ITEM: :paper_item
          PAYMENT_ORDER: :payment_order
          RETURN: :return
          REVERSAL: :reversal

          def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::ledgerable_type]
        end

        type status = :archived | :pending | :posted

        module Status
          extend ModernTreasury::Internal::Type::Enum

          ARCHIVED: :archived
          PENDING: :pending
          POSTED: :posted

          def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::LedgerTransaction::status]
        end
      end

      type line_item =
        {
          amount: Integer,
          accounting_category_id: String?,
          description: String?,
          metadata: ::Hash[Symbol, String]
        }

      class LineItem < ModernTreasury::Internal::Type::BaseModel
        attr_accessor amount: Integer

        attr_accessor accounting_category_id: String?

        attr_accessor description: String?

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        def initialize: (
          amount: Integer,
          ?accounting_category_id: String?,
          ?description: String?,
          ?metadata: ::Hash[Symbol, String]
        ) -> void
      end

      type priority = :high | :normal

      module Priority
        extend ModernTreasury::Internal::Type::Enum

        HIGH: :high
        NORMAL: :normal

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentOrderCreateParams::priority]
      end

      type receiving_account =
        {
          account_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail],
          account_type: ModernTreasury::Models::external_account_type,
          contact_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail],
          ledger_account: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount,
          metadata: ::Hash[Symbol, String],
          name: String?,
          party_address: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::PartyAddress,
          party_identifier: String,
          party_name: String,
          party_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::party_type?,
          plaid_processor_token: String,
          routing_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail]
        }

      class ReceivingAccount < ModernTreasury::Internal::Type::BaseModel
        attr_reader account_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail]?

        def account_details=: (
          ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail]
        ) -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail]

        attr_reader account_type: ModernTreasury::Models::external_account_type?

        def account_type=: (
          ModernTreasury::Models::external_account_type
        ) -> ModernTreasury::Models::external_account_type

        attr_reader contact_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail]?

        def contact_details=: (
          ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail]
        ) -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail]

        attr_reader ledger_account: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount?

        def ledger_account=: (
          ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount
        ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_accessor name: String?

        attr_reader party_address: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::PartyAddress?

        def party_address=: (
          ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::PartyAddress
        ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::PartyAddress

        attr_reader party_identifier: String?

        def party_identifier=: (String) -> String

        attr_reader party_name: String?

        def party_name=: (String) -> String

        attr_accessor party_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::party_type?

        attr_reader plaid_processor_token: String?

        def plaid_processor_token=: (String) -> String

        attr_reader routing_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail]?

        def routing_details=: (
          ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail]
        ) -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail]

        def initialize: (
          ?account_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail],
          ?account_type: ModernTreasury::Models::external_account_type,
          ?contact_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail],
          ?ledger_account: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount,
          ?metadata: ::Hash[Symbol, String],
          ?name: String?,
          ?party_address: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::PartyAddress,
          ?party_identifier: String,
          ?party_name: String,
          ?party_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::party_type?,
          ?plaid_processor_token: String,
          ?routing_details: ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail]
        ) -> void

        type account_detail =
          {
            account_number: String,
            account_number_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail::account_number_type
          }

        class AccountDetail < ModernTreasury::Internal::Type::BaseModel
          attr_accessor account_number: String

          attr_reader account_number_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail::account_number_type?

          def account_number_type=: (
            ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail::account_number_type
          ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail::account_number_type

          def initialize: (
            account_number: String,
            ?account_number_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail::account_number_type
          ) -> void

          type account_number_type =
            :au_number
            | :clabe
            | :hk_number
            | :iban
            | :id_number
            | :nz_number
            | :other
            | :pan
            | :sg_number
            | :wallet_address

          module AccountNumberType
            extend ModernTreasury::Internal::Type::Enum

            AU_NUMBER: :au_number
            CLABE: :clabe
            HK_NUMBER: :hk_number
            IBAN: :iban
            ID_NUMBER: :id_number
            NZ_NUMBER: :nz_number
            OTHER: :other
            PAN: :pan
            SG_NUMBER: :sg_number
            WALLET_ADDRESS: :wallet_address

            def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::AccountDetail::account_number_type]
          end
        end

        type contact_detail =
          {
            contact_identifier: String,
            contact_identifier_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail::contact_identifier_type
          }

        class ContactDetail < ModernTreasury::Internal::Type::BaseModel
          attr_reader contact_identifier: String?

          def contact_identifier=: (String) -> String

          attr_reader contact_identifier_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail::contact_identifier_type?

          def contact_identifier_type=: (
            ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail::contact_identifier_type
          ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail::contact_identifier_type

          def initialize: (
            ?contact_identifier: String,
            ?contact_identifier_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail::contact_identifier_type
          ) -> void

          type contact_identifier_type = :email | :phone_number | :website

          module ContactIdentifierType
            extend ModernTreasury::Internal::Type::Enum

            EMAIL: :email
            PHONE_NUMBER: :phone_number
            WEBSITE: :website

            def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::ContactDetail::contact_identifier_type]
          end
        end

        type ledger_account =
          {
            currency: String,
            ledger_id: String,
            name: String,
            normal_balance: ModernTreasury::Models::transaction_direction,
            currency_exponent: Integer?,
            description: String?,
            ledger_account_category_ids: ::Array[String],
            ledgerable_id: String,
            ledgerable_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount::ledgerable_type,
            metadata: ::Hash[Symbol, String]
          }

        class LedgerAccount < ModernTreasury::Internal::Type::BaseModel
          attr_accessor currency: String

          attr_accessor ledger_id: String

          attr_accessor name: String

          attr_accessor normal_balance: ModernTreasury::Models::transaction_direction

          attr_accessor currency_exponent: Integer?

          attr_accessor description: String?

          attr_reader ledger_account_category_ids: ::Array[String]?

          def ledger_account_category_ids=: (::Array[String]) -> ::Array[String]

          attr_reader ledgerable_id: String?

          def ledgerable_id=: (String) -> String

          attr_reader ledgerable_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount::ledgerable_type?

          def ledgerable_type=: (
            ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount::ledgerable_type
          ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount::ledgerable_type

          attr_reader metadata: ::Hash[Symbol, String]?

          def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

          def initialize: (
            currency: String,
            ledger_id: String,
            name: String,
            normal_balance: ModernTreasury::Models::transaction_direction,
            ?currency_exponent: Integer?,
            ?description: String?,
            ?ledger_account_category_ids: ::Array[String],
            ?ledgerable_id: String,
            ?ledgerable_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount::ledgerable_type,
            ?metadata: ::Hash[Symbol, String]
          ) -> void

          type ledgerable_type =
            :counterparty
            | :external_account
            | :internal_account
            | :virtual_account

          module LedgerableType
            extend ModernTreasury::Internal::Type::Enum

            COUNTERPARTY: :counterparty
            EXTERNAL_ACCOUNT: :external_account
            INTERNAL_ACCOUNT: :internal_account
            VIRTUAL_ACCOUNT: :virtual_account

            def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::LedgerAccount::ledgerable_type]
          end
        end

        type party_address =
          {
            country: String?,
            :line1 => String?,
            :line2 => String?,
            locality: String?,
            postal_code: String?,
            region: String?
          }

        class PartyAddress < ModernTreasury::Internal::Type::BaseModel
          attr_accessor country: String?

          attr_accessor line1: String?

          attr_accessor line2: String?

          attr_accessor locality: String?

          attr_accessor postal_code: String?

          attr_accessor region: String?

          def initialize: (
            ?country: String?,
            ?line1: String?,
            ?line2: String?,
            ?locality: String?,
            ?postal_code: String?,
            ?region: String?
          ) -> void
        end

        type party_type = :business | :individual

        module PartyType
          extend ModernTreasury::Internal::Type::Enum

          BUSINESS: :business
          INDIVIDUAL: :individual

          def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::party_type]
        end

        type routing_detail =
          {
            routing_number: String,
            routing_number_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::routing_number_type,
            payment_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::payment_type
          }

        class RoutingDetail < ModernTreasury::Internal::Type::BaseModel
          attr_accessor routing_number: String

          attr_accessor routing_number_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::routing_number_type

          attr_reader payment_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::payment_type?

          def payment_type=: (
            ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::payment_type
          ) -> ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::payment_type

          def initialize: (
            routing_number: String,
            routing_number_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::routing_number_type,
            ?payment_type: ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::payment_type
          ) -> void

          type routing_number_type =
            :aba
            | :au_bsb
            | :br_codigo
            | :ca_cpa
            | :chips
            | :cnaps
            | :dk_interbank_clearing_code
            | :gb_sort_code
            | :hk_interbank_clearing_code
            | :hu_interbank_clearing_code
            | :id_sknbi_code
            | :in_ifsc
            | :jp_zengin_code
            | :my_branch_code
            | :mx_bank_identifier
            | :nz_national_clearing_code
            | :pl_national_clearing_code
            | :se_bankgiro_clearing_code
            | :sg_interbank_clearing_code
            | :swift
            | :za_national_clearing_code

          module RoutingNumberType
            extend ModernTreasury::Internal::Type::Enum

            ABA: :aba
            AU_BSB: :au_bsb
            BR_CODIGO: :br_codigo
            CA_CPA: :ca_cpa
            CHIPS: :chips
            CNAPS: :cnaps
            DK_INTERBANK_CLEARING_CODE: :dk_interbank_clearing_code
            GB_SORT_CODE: :gb_sort_code
            HK_INTERBANK_CLEARING_CODE: :hk_interbank_clearing_code
            HU_INTERBANK_CLEARING_CODE: :hu_interbank_clearing_code
            ID_SKNBI_CODE: :id_sknbi_code
            IN_IFSC: :in_ifsc
            JP_ZENGIN_CODE: :jp_zengin_code
            MY_BRANCH_CODE: :my_branch_code
            MX_BANK_IDENTIFIER: :mx_bank_identifier
            NZ_NATIONAL_CLEARING_CODE: :nz_national_clearing_code
            PL_NATIONAL_CLEARING_CODE: :pl_national_clearing_code
            SE_BANKGIRO_CLEARING_CODE: :se_bankgiro_clearing_code
            SG_INTERBANK_CLEARING_CODE: :sg_interbank_clearing_code
            SWIFT: :swift
            ZA_NATIONAL_CLEARING_CODE: :za_national_clearing_code

            def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::routing_number_type]
          end

          type payment_type =
            :ach
            | :au_becs
            | :bacs
            | :book
            | :card
            | :chats
            | :check
            | :cross_border
            | :dk_nets
            | :eft
            | :hu_ics
            | :interac
            | :masav
            | :mx_ccen
            | :neft
            | :nics
            | :nz_becs
            | :pl_elixir
            | :provxchange
            | :ro_sent
            | :rtp
            | :se_bankgirot
            | :sen
            | :sepa
            | :sg_giro
            | :sic
            | :signet
            | :sknbi
            | :wire
            | :zengin

          module PaymentType
            extend ModernTreasury::Internal::Type::Enum

            ACH: :ach
            AU_BECS: :au_becs
            BACS: :bacs
            BOOK: :book
            CARD: :card
            CHATS: :chats
            CHECK: :check
            CROSS_BORDER: :cross_border
            DK_NETS: :dk_nets
            EFT: :eft
            HU_ICS: :hu_ics
            INTERAC: :interac
            MASAV: :masav
            MX_CCEN: :mx_ccen
            NEFT: :neft
            NICS: :nics
            NZ_BECS: :nz_becs
            PL_ELIXIR: :pl_elixir
            PROVXCHANGE: :provxchange
            RO_SENT: :ro_sent
            RTP: :rtp
            SE_BANKGIROT: :se_bankgirot
            SEN: :sen
            SEPA: :sepa
            SG_GIRO: :sg_giro
            SIC: :sic
            SIGNET: :signet
            SKNBI: :sknbi
            WIRE: :wire
            ZENGIN: :zengin

            def self?.values: -> ::Array[ModernTreasury::PaymentOrderCreateParams::ReceivingAccount::RoutingDetail::payment_type]
          end
        end
      end
    end
  end
end
