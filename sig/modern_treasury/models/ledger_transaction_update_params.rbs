module ModernTreasury
  module Models
    type ledger_transaction_update_params =
      {
        description: String?,
        effective_at: Time,
        ledger_entries: ::Array[ModernTreasury::LedgerTransactionUpdateParams::LedgerEntry],
        ledgerable_id: String,
        ledgerable_type: ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type,
        metadata: ::Hash[Symbol, String],
        status: ModernTreasury::Models::LedgerTransactionUpdateParams::status
      }
      & ModernTreasury::Internal::Type::request_parameters

    class LedgerTransactionUpdateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor description: String?

      attr_reader effective_at: Time?

      def effective_at=: (Time) -> Time

      attr_reader ledger_entries: ::Array[ModernTreasury::LedgerTransactionUpdateParams::LedgerEntry]?

      def ledger_entries=: (
        ::Array[ModernTreasury::LedgerTransactionUpdateParams::LedgerEntry]
      ) -> ::Array[ModernTreasury::LedgerTransactionUpdateParams::LedgerEntry]

      attr_reader ledgerable_id: String?

      def ledgerable_id=: (String) -> String

      attr_reader ledgerable_type: ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type?

      def ledgerable_type=: (
        ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type
      ) -> ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader status: ModernTreasury::Models::LedgerTransactionUpdateParams::status?

      def status=: (
        ModernTreasury::Models::LedgerTransactionUpdateParams::status
      ) -> ModernTreasury::Models::LedgerTransactionUpdateParams::status

      def initialize: (
        ?description: String?,
        ?effective_at: Time,
        ?ledger_entries: ::Array[ModernTreasury::LedgerTransactionUpdateParams::LedgerEntry],
        ?ledgerable_id: String,
        ?ledgerable_type: ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type,
        ?metadata: ::Hash[Symbol, String],
        ?status: ModernTreasury::Models::LedgerTransactionUpdateParams::status,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> {
        description: String?,
        effective_at: Time,
        ledger_entries: ::Array[ModernTreasury::LedgerTransactionUpdateParams::LedgerEntry],
        ledgerable_id: String,
        ledgerable_type: ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type,
        metadata: ::Hash[Symbol, String],
        status: ModernTreasury::Models::LedgerTransactionUpdateParams::status,
        request_options: ModernTreasury::RequestOptions
      }

      type ledger_entry =
        {
          amount: Integer,
          direction: ModernTreasury::Models::transaction_direction,
          ledger_account_id: String,
          available_balance_amount: ::Hash[Symbol, Integer]?,
          lock_version: Integer?,
          metadata: ::Hash[Symbol, String],
          pending_balance_amount: ::Hash[Symbol, Integer]?,
          posted_balance_amount: ::Hash[Symbol, Integer]?,
          show_resulting_ledger_account_balances: bool?
        }

      class LedgerEntry < ModernTreasury::Internal::Type::BaseModel
        attr_accessor amount: Integer

        attr_accessor direction: ModernTreasury::Models::transaction_direction

        attr_accessor ledger_account_id: String

        attr_accessor available_balance_amount: ::Hash[Symbol, Integer]?

        attr_accessor lock_version: Integer?

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        attr_accessor pending_balance_amount: ::Hash[Symbol, Integer]?

        attr_accessor posted_balance_amount: ::Hash[Symbol, Integer]?

        attr_accessor show_resulting_ledger_account_balances: bool?

        def initialize: (
          amount: Integer,
          direction: ModernTreasury::Models::transaction_direction,
          ledger_account_id: String,
          ?available_balance_amount: ::Hash[Symbol, Integer]?,
          ?lock_version: Integer?,
          ?metadata: ::Hash[Symbol, String],
          ?pending_balance_amount: ::Hash[Symbol, Integer]?,
          ?posted_balance_amount: ::Hash[Symbol, Integer]?,
          ?show_resulting_ledger_account_balances: bool?
        ) -> void

        def to_hash: -> {
          amount: Integer,
          direction: ModernTreasury::Models::transaction_direction,
          ledger_account_id: String,
          available_balance_amount: ::Hash[Symbol, Integer]?,
          lock_version: Integer?,
          metadata: ::Hash[Symbol, String],
          pending_balance_amount: ::Hash[Symbol, Integer]?,
          posted_balance_amount: ::Hash[Symbol, Integer]?,
          show_resulting_ledger_account_balances: bool?
        }
      end

      type ledgerable_type =
        :expected_payment
        | :incoming_payment_detail
        | :paper_item
        | :payment_order
        | :return
        | :reversal

      module LedgerableType
        extend ModernTreasury::Internal::Type::Enum

        EXPECTED_PAYMENT: :expected_payment
        INCOMING_PAYMENT_DETAIL: :incoming_payment_detail
        PAPER_ITEM: :paper_item
        PAYMENT_ORDER: :payment_order
        RETURN: :return
        REVERSAL: :reversal

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerTransactionUpdateParams::ledgerable_type]
      end

      type status = :archived | :pending | :posted

      module Status
        extend ModernTreasury::Internal::Type::Enum

        ARCHIVED: :archived
        PENDING: :pending
        POSTED: :posted

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerTransactionUpdateParams::status]
      end
    end
  end
end
