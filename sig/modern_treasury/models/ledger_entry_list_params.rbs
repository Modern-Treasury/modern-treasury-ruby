module ModernTreasury
  module Models
    type ledger_entry_list_params =
      {
        id: ::Array[String],
        after_cursor: String?,
        as_of_lock_version: Integer,
        direction: ModernTreasury::Models::transaction_direction,
        effective_at: ::Hash[Symbol, Time],
        effective_date: ::Hash[Symbol, Date],
        ledger_account_category_id: String,
        ledger_account_id: String,
        ledger_account_lock_version: ::Hash[Symbol, Integer],
        ledger_account_payout_id: String,
        ledger_account_settlement_id: String,
        ledger_account_statement_id: String,
        ledger_transaction_id: String,
        metadata: ::Hash[Symbol, String],
        order_by: ModernTreasury::Models::LedgerEntryListParams::OrderBy,
        per_page: Integer,
        show_balances: bool,
        show_deleted: bool,
        status: ModernTreasury::Models::LedgerEntryListParams::status,
        updated_at: ::Hash[Symbol, Time]
      }
      & ModernTreasury::Internal::Type::request_parameters

    class LedgerEntryListParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_reader id: ::Array[String]?

      def id=: (::Array[String]) -> ::Array[String]

      attr_accessor after_cursor: String?

      attr_reader as_of_lock_version: Integer?

      def as_of_lock_version=: (Integer) -> Integer

      attr_reader direction: ModernTreasury::Models::transaction_direction?

      def direction=: (
        ModernTreasury::Models::transaction_direction
      ) -> ModernTreasury::Models::transaction_direction

      attr_reader effective_at: ::Hash[Symbol, Time]?

      def effective_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      attr_reader effective_date: ::Hash[Symbol, Date]?

      def effective_date=: (::Hash[Symbol, Date]) -> ::Hash[Symbol, Date]

      attr_reader ledger_account_category_id: String?

      def ledger_account_category_id=: (String) -> String

      attr_reader ledger_account_id: String?

      def ledger_account_id=: (String) -> String

      attr_reader ledger_account_lock_version: ::Hash[Symbol, Integer]?

      def ledger_account_lock_version=: (
        ::Hash[Symbol, Integer]
      ) -> ::Hash[Symbol, Integer]

      attr_reader ledger_account_payout_id: String?

      def ledger_account_payout_id=: (String) -> String

      attr_reader ledger_account_settlement_id: String?

      def ledger_account_settlement_id=: (String) -> String

      attr_reader ledger_account_statement_id: String?

      def ledger_account_statement_id=: (String) -> String

      attr_reader ledger_transaction_id: String?

      def ledger_transaction_id=: (String) -> String

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader order_by: ModernTreasury::Models::LedgerEntryListParams::OrderBy?

      def order_by=: (
        ModernTreasury::Models::LedgerEntryListParams::OrderBy
      ) -> ModernTreasury::Models::LedgerEntryListParams::OrderBy

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> Integer

      attr_reader show_balances: bool?

      def show_balances=: (bool) -> bool

      attr_reader show_deleted: bool?

      def show_deleted=: (bool) -> bool

      attr_reader status: ModernTreasury::Models::LedgerEntryListParams::status?

      def status=: (
        ModernTreasury::Models::LedgerEntryListParams::status
      ) -> ModernTreasury::Models::LedgerEntryListParams::status

      attr_reader updated_at: ::Hash[Symbol, Time]?

      def updated_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      def initialize: (
        ?id: ::Array[String],
        ?after_cursor: String?,
        ?as_of_lock_version: Integer,
        ?direction: ModernTreasury::Models::transaction_direction,
        ?effective_at: ::Hash[Symbol, Time],
        ?effective_date: ::Hash[Symbol, Date],
        ?ledger_account_category_id: String,
        ?ledger_account_id: String,
        ?ledger_account_lock_version: ::Hash[Symbol, Integer],
        ?ledger_account_payout_id: String,
        ?ledger_account_settlement_id: String,
        ?ledger_account_statement_id: String,
        ?ledger_transaction_id: String,
        ?metadata: ::Hash[Symbol, String],
        ?order_by: ModernTreasury::Models::LedgerEntryListParams::OrderBy,
        ?per_page: Integer,
        ?show_balances: bool,
        ?show_deleted: bool,
        ?status: ModernTreasury::Models::LedgerEntryListParams::status,
        ?updated_at: ::Hash[Symbol, Time],
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> ModernTreasury::Models::ledger_entry_list_params

      type order_by =
        {
          created_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at,
          effective_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at
        }

      class OrderBy < ModernTreasury::Internal::Type::BaseModel
        attr_reader created_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at?

        def created_at=: (
          ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at
        ) -> ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at

        attr_reader effective_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at?

        def effective_at=: (
          ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at
        ) -> ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at

        def initialize: (
          ?created_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at,
          ?effective_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at
        ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerEntryListParams::order_by

        type created_at = :asc | :desc

        module CreatedAt
          extend ModernTreasury::Internal::Type::Enum

          ASC: :asc
          DESC: :desc

          def self?.values: -> ::Array[ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at]
        end

        type effective_at = :asc | :desc

        module EffectiveAt
          extend ModernTreasury::Internal::Type::Enum

          ASC: :asc
          DESC: :desc

          def self?.values: -> ::Array[ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at]
        end
      end

      type status = :pending | :posted | :archived

      module Status
        extend ModernTreasury::Internal::Type::Enum

        PENDING: :pending
        POSTED: :posted
        ARCHIVED: :archived

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerEntryListParams::status]
      end
    end
  end
end
