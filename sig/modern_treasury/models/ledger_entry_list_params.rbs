module ModernTreasury
  module Models
    type ledger_entry_list_params =
      {
        id: ::Array[String],
        after_cursor: String?,
        as_of_lock_version: Integer,
        direction: ModernTreasury::Models::transaction_direction,
        effective_at: ::Hash[Symbol, Time],
        effective_date: ::Hash[Symbol, Date],
        ledger_account_category_id: String,
        ledger_account_id: String,
        ledger_account_lock_version: ::Hash[Symbol, Integer],
        ledger_account_payout_id: String,
        ledger_account_settlement_id: String,
        ledger_account_statement_id: String,
        ledger_transaction_id: String,
        metadata: ::Hash[Symbol, String],
        order_by: ModernTreasury::Models::LedgerEntryListParams::OrderBy,
        per_page: Integer,
        show_balances: bool,
        show_deleted: bool,
        status: ModernTreasury::Models::LedgerEntryListParams::status,
        updated_at: ::Hash[Symbol, Time]
      }
      & ModernTreasury::request_parameters

    class LedgerEntryListParams < ModernTreasury::BaseModel
      extend ModernTreasury::RequestParameters::Converter
      include ModernTreasury::RequestParameters

      attr_reader id: ::Array[String]?

      def id=: (::Array[String]) -> void

      attr_accessor after_cursor: String?

      attr_reader as_of_lock_version: Integer?

      def as_of_lock_version=: (Integer) -> void

      attr_reader direction: ModernTreasury::Models::transaction_direction?

      def direction=: (ModernTreasury::Models::transaction_direction) -> void

      attr_reader effective_at: ::Hash[Symbol, Time]?

      def effective_at=: (::Hash[Symbol, Time]) -> void

      attr_reader effective_date: ::Hash[Symbol, Date]?

      def effective_date=: (::Hash[Symbol, Date]) -> void

      attr_reader ledger_account_category_id: String?

      def ledger_account_category_id=: (String) -> void

      attr_reader ledger_account_id: String?

      def ledger_account_id=: (String) -> void

      attr_reader ledger_account_lock_version: ::Hash[Symbol, Integer]?

      def ledger_account_lock_version=: (::Hash[Symbol, Integer]) -> void

      attr_reader ledger_account_payout_id: String?

      def ledger_account_payout_id=: (String) -> void

      attr_reader ledger_account_settlement_id: String?

      def ledger_account_settlement_id=: (String) -> void

      attr_reader ledger_account_statement_id: String?

      def ledger_account_statement_id=: (String) -> void

      attr_reader ledger_transaction_id: String?

      def ledger_transaction_id=: (String) -> void

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> void

      attr_reader order_by: ModernTreasury::Models::LedgerEntryListParams::OrderBy?

      def order_by=: (
        ModernTreasury::Models::LedgerEntryListParams::OrderBy
      ) -> void

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> void

      attr_reader show_balances: bool?

      def show_balances=: (bool) -> void

      attr_reader show_deleted: bool?

      def show_deleted=: (bool) -> void

      attr_reader status: ModernTreasury::Models::LedgerEntryListParams::status?

      def status=: (
        ModernTreasury::Models::LedgerEntryListParams::status
      ) -> void

      attr_reader updated_at: ::Hash[Symbol, Time]?

      def updated_at=: (::Hash[Symbol, Time]) -> void

      def initialize:
        (
          id: ::Array[String],
          after_cursor: String?,
          as_of_lock_version: Integer,
          direction: ModernTreasury::Models::transaction_direction,
          effective_at: ::Hash[Symbol, Time],
          effective_date: ::Hash[Symbol, Date],
          ledger_account_category_id: String,
          ledger_account_id: String,
          ledger_account_lock_version: ::Hash[Symbol, Integer],
          ledger_account_payout_id: String,
          ledger_account_settlement_id: String,
          ledger_account_statement_id: String,
          ledger_transaction_id: String,
          metadata: ::Hash[Symbol, String],
          order_by: ModernTreasury::Models::LedgerEntryListParams::OrderBy,
          per_page: Integer,
          show_balances: bool,
          show_deleted: bool,
          status: ModernTreasury::Models::LedgerEntryListParams::status,
          updated_at: ::Hash[Symbol, Time],
          request_options: ModernTreasury::request_opts
        ) -> void
        | (
          ?ModernTreasury::Models::ledger_entry_list_params
          | ModernTreasury::BaseModel data
        ) -> void

      def to_hash: -> ModernTreasury::Models::ledger_entry_list_params

      type order_by =
        {
          created_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at,
          effective_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at
        }

      class OrderBy < ModernTreasury::BaseModel
        attr_reader created_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at?

        def created_at=: (
          ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at
        ) -> void

        attr_reader effective_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at?

        def effective_at=: (
          ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at
        ) -> void

        def initialize:
          (
            created_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at,
            effective_at: ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at
          ) -> void
          | (
            ?ModernTreasury::Models::LedgerEntryListParams::order_by
            | ModernTreasury::BaseModel data
          ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerEntryListParams::order_by

        type created_at = :asc | :desc

        class CreatedAt < ModernTreasury::Enum
          ASC: :asc
          DESC: :desc

          def self.values: -> ::Array[ModernTreasury::Models::LedgerEntryListParams::OrderBy::created_at]
        end

        type effective_at = :asc | :desc

        class EffectiveAt < ModernTreasury::Enum
          ASC: :asc
          DESC: :desc

          def self.values: -> ::Array[ModernTreasury::Models::LedgerEntryListParams::OrderBy::effective_at]
        end
      end

      type status = :pending | :posted | :archived

      class Status < ModernTreasury::Enum
        PENDING: :pending
        POSTED: :posted
        ARCHIVED: :archived

        def self.values: -> ::Array[ModernTreasury::Models::LedgerEntryListParams::status]
      end
    end
  end
end
