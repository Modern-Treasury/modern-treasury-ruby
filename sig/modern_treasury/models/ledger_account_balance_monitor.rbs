module ModernTreasury
  module Models
    type ledger_account_balance_monitor =
      {
        id: String,
        alert_condition: ModernTreasury::LedgerAccountBalanceMonitor::AlertCondition,
        created_at: Time,
        current_ledger_account_balance_state: ModernTreasury::LedgerAccountBalanceMonitor::CurrentLedgerAccountBalanceState,
        description: String?,
        discarded_at: Time?,
        ledger_account_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        updated_at: Time
      }

    class LedgerAccountBalanceMonitor < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor alert_condition: ModernTreasury::LedgerAccountBalanceMonitor::AlertCondition

      attr_accessor created_at: Time

      attr_accessor current_ledger_account_balance_state: ModernTreasury::LedgerAccountBalanceMonitor::CurrentLedgerAccountBalanceState

      attr_accessor description: String?

      attr_accessor discarded_at: Time?

      attr_accessor ledger_account_id: String

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor object: String

      attr_accessor updated_at: Time

      def initialize: (
        id: String,
        alert_condition: ModernTreasury::LedgerAccountBalanceMonitor::AlertCondition,
        created_at: Time,
        current_ledger_account_balance_state: ModernTreasury::LedgerAccountBalanceMonitor::CurrentLedgerAccountBalanceState,
        description: String?,
        discarded_at: Time?,
        ledger_account_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        alert_condition: ModernTreasury::LedgerAccountBalanceMonitor::AlertCondition,
        created_at: Time,
        current_ledger_account_balance_state: ModernTreasury::LedgerAccountBalanceMonitor::CurrentLedgerAccountBalanceState,
        description: String?,
        discarded_at: Time?,
        ledger_account_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        updated_at: Time
      }

      type alert_condition = { field: String, operator: String, value: Integer }

      class AlertCondition < ModernTreasury::Internal::Type::BaseModel
        attr_accessor field: String

        attr_accessor operator: String

        attr_accessor value: Integer

        def initialize: (
          field: String,
          operator: String,
          value: Integer
        ) -> void

        def to_hash: -> { field: String, operator: String, value: Integer }
      end

      type current_ledger_account_balance_state =
        {
          balances: ModernTreasury::LedgerBalances,
          ledger_account_lock_version: Integer,
          triggered: bool
        }

      class CurrentLedgerAccountBalanceState < ModernTreasury::Internal::Type::BaseModel
        attr_accessor balances: ModernTreasury::LedgerBalances

        attr_accessor ledger_account_lock_version: Integer

        attr_accessor triggered: bool

        def initialize: (
          balances: ModernTreasury::LedgerBalances,
          ledger_account_lock_version: Integer,
          triggered: bool
        ) -> void

        def to_hash: -> {
          balances: ModernTreasury::LedgerBalances,
          ledger_account_lock_version: Integer,
          triggered: bool
        }
      end
    end
  end
end
