module ModernTreasury
  module Models
    type foreign_exchange_quote_list_params =
      {
        after_cursor: String?,
        base_currency: String,
        effective_at_end: Date,
        effective_at_start: Date,
        expires_at: Time,
        internal_account_id: String,
        metadata: ::Hash[Symbol, String],
        per_page: Integer,
        target_currency: String
      }
      & ModernTreasury::Internal::Type::request_parameters

    class ForeignExchangeQuoteListParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor after_cursor: String?

      attr_reader base_currency: String?

      def base_currency=: (String) -> String

      attr_reader effective_at_end: Date?

      def effective_at_end=: (Date) -> Date

      attr_reader effective_at_start: Date?

      def effective_at_start=: (Date) -> Date

      attr_reader expires_at: Time?

      def expires_at=: (Time) -> Time

      attr_reader internal_account_id: String?

      def internal_account_id=: (String) -> String

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> Integer

      attr_reader target_currency: String?

      def target_currency=: (String) -> String

      def initialize: (
        ?after_cursor: String?,
        ?base_currency: String,
        ?effective_at_end: Date,
        ?effective_at_start: Date,
        ?expires_at: Time,
        ?internal_account_id: String,
        ?metadata: ::Hash[Symbol, String],
        ?per_page: Integer,
        ?target_currency: String,
        ?request_options: ModernTreasury::request_opts
      ) -> void
    end
  end
end
