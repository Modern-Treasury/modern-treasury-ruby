module ModernTreasury
  module Models
    type foreign_exchange_quote_list_params =
      {
        after_cursor: String?,
        base_currency: String,
        effective_at_end: Date,
        effective_at_start: Date,
        expires_at: Time,
        internal_account_id: String,
        metadata: ::Hash[Symbol, String],
        per_page: Integer,
        target_currency: String
      }
      & ModernTreasury::request_parameters

    class ForeignExchangeQuoteListParams < ModernTreasury::BaseModel
      extend ModernTreasury::RequestParameters::Converter
      include ModernTreasury::RequestParameters

      attr_accessor after_cursor: String?

      attr_reader base_currency: String?

      def base_currency=: (String) -> void

      attr_reader effective_at_end: Date?

      def effective_at_end=: (Date) -> void

      attr_reader effective_at_start: Date?

      def effective_at_start=: (Date) -> void

      attr_reader expires_at: Time?

      def expires_at=: (Time) -> void

      attr_reader internal_account_id: String?

      def internal_account_id=: (String) -> void

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> void

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> void

      attr_reader target_currency: String?

      def target_currency=: (String) -> void

      def initialize:
        (
          after_cursor: String?,
          base_currency: String,
          effective_at_end: Date,
          effective_at_start: Date,
          expires_at: Time,
          internal_account_id: String,
          metadata: ::Hash[Symbol, String],
          per_page: Integer,
          target_currency: String,
          request_options: ModernTreasury::request_opts
        ) -> void
        | (
          ?ModernTreasury::Models::foreign_exchange_quote_list_params
          | ModernTreasury::BaseModel data
        ) -> void

      def to_hash: -> ModernTreasury::Models::foreign_exchange_quote_list_params
    end
  end
end
