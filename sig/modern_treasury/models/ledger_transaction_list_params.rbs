module ModernTreasury
  module Models
    type ledger_transaction_list_params =
      {
        id: ::Array[String],
        after_cursor: String?,
        effective_at: ::Hash[Symbol, Time],
        effective_date: ::Hash[Symbol, Time],
        external_id: String,
        ledger_account_category_id: String,
        ledger_account_id: String,
        ledger_account_settlement_id: String,
        ledger_id: String,
        ledgerable_id: String,
        ledgerable_type: ModernTreasury::Models::LedgerTransactionListParams::ledgerable_type,
        metadata: ::Hash[Symbol, String],
        order_by: ModernTreasury::Models::LedgerTransactionListParams::OrderBy,
        partially_posts_ledger_transaction_id: String,
        per_page: Integer,
        posted_at: ::Hash[Symbol, Time],
        reverses_ledger_transaction_id: String,
        status: ModernTreasury::Models::LedgerTransactionListParams::status,
        updated_at: ::Hash[Symbol, Time]
      }
      & ModernTreasury::Internal::Type::request_parameters

    class LedgerTransactionListParams < ModernTreasury::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_reader id: ::Array[String]?

      def id=: (::Array[String]) -> ::Array[String]

      attr_accessor after_cursor: String?

      attr_reader effective_at: ::Hash[Symbol, Time]?

      def effective_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      attr_reader effective_date: ::Hash[Symbol, Time]?

      def effective_date=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      attr_reader external_id: String?

      def external_id=: (String) -> String

      attr_reader ledger_account_category_id: String?

      def ledger_account_category_id=: (String) -> String

      attr_reader ledger_account_id: String?

      def ledger_account_id=: (String) -> String

      attr_reader ledger_account_settlement_id: String?

      def ledger_account_settlement_id=: (String) -> String

      attr_reader ledger_id: String?

      def ledger_id=: (String) -> String

      attr_reader ledgerable_id: String?

      def ledgerable_id=: (String) -> String

      attr_reader ledgerable_type: ModernTreasury::Models::LedgerTransactionListParams::ledgerable_type?

      def ledgerable_type=: (
        ModernTreasury::Models::LedgerTransactionListParams::ledgerable_type
      ) -> ModernTreasury::Models::LedgerTransactionListParams::ledgerable_type

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader order_by: ModernTreasury::Models::LedgerTransactionListParams::OrderBy?

      def order_by=: (
        ModernTreasury::Models::LedgerTransactionListParams::OrderBy
      ) -> ModernTreasury::Models::LedgerTransactionListParams::OrderBy

      attr_reader partially_posts_ledger_transaction_id: String?

      def partially_posts_ledger_transaction_id=: (String) -> String

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> Integer

      attr_reader posted_at: ::Hash[Symbol, Time]?

      def posted_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      attr_reader reverses_ledger_transaction_id: String?

      def reverses_ledger_transaction_id=: (String) -> String

      attr_reader status: ModernTreasury::Models::LedgerTransactionListParams::status?

      def status=: (
        ModernTreasury::Models::LedgerTransactionListParams::status
      ) -> ModernTreasury::Models::LedgerTransactionListParams::status

      attr_reader updated_at: ::Hash[Symbol, Time]?

      def updated_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      def initialize: (
        ?id: ::Array[String],
        ?after_cursor: String?,
        ?effective_at: ::Hash[Symbol, Time],
        ?effective_date: ::Hash[Symbol, Time],
        ?external_id: String,
        ?ledger_account_category_id: String,
        ?ledger_account_id: String,
        ?ledger_account_settlement_id: String,
        ?ledger_id: String,
        ?ledgerable_id: String,
        ?ledgerable_type: ModernTreasury::Models::LedgerTransactionListParams::ledgerable_type,
        ?metadata: ::Hash[Symbol, String],
        ?order_by: ModernTreasury::Models::LedgerTransactionListParams::OrderBy,
        ?partially_posts_ledger_transaction_id: String,
        ?per_page: Integer,
        ?posted_at: ::Hash[Symbol, Time],
        ?reverses_ledger_transaction_id: String,
        ?status: ModernTreasury::Models::LedgerTransactionListParams::status,
        ?updated_at: ::Hash[Symbol, Time],
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> ModernTreasury::Models::ledger_transaction_list_params

      type ledgerable_type =
        :expected_payment
        | :incoming_payment_detail
        | :paper_item
        | :payment_order
        | :return
        | :reversal

      module LedgerableType
        extend ModernTreasury::Enum

        EXPECTED_PAYMENT: :expected_payment
        INCOMING_PAYMENT_DETAIL: :incoming_payment_detail
        PAPER_ITEM: :paper_item
        PAYMENT_ORDER: :payment_order
        RETURN: :return
        REVERSAL: :reversal

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerTransactionListParams::ledgerable_type]
      end

      type order_by =
        {
          created_at: ModernTreasury::Models::LedgerTransactionListParams::OrderBy::created_at,
          effective_at: ModernTreasury::Models::LedgerTransactionListParams::OrderBy::effective_at
        }

      class OrderBy < ModernTreasury::BaseModel
        attr_reader created_at: ModernTreasury::Models::LedgerTransactionListParams::OrderBy::created_at?

        def created_at=: (
          ModernTreasury::Models::LedgerTransactionListParams::OrderBy::created_at
        ) -> ModernTreasury::Models::LedgerTransactionListParams::OrderBy::created_at

        attr_reader effective_at: ModernTreasury::Models::LedgerTransactionListParams::OrderBy::effective_at?

        def effective_at=: (
          ModernTreasury::Models::LedgerTransactionListParams::OrderBy::effective_at
        ) -> ModernTreasury::Models::LedgerTransactionListParams::OrderBy::effective_at

        def initialize: (
          ?created_at: ModernTreasury::Models::LedgerTransactionListParams::OrderBy::created_at,
          ?effective_at: ModernTreasury::Models::LedgerTransactionListParams::OrderBy::effective_at
        ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerTransactionListParams::order_by

        type created_at = :asc | :desc

        module CreatedAt
          extend ModernTreasury::Enum

          ASC: :asc
          DESC: :desc

          def self?.values: -> ::Array[ModernTreasury::Models::LedgerTransactionListParams::OrderBy::created_at]
        end

        type effective_at = :asc | :desc

        module EffectiveAt
          extend ModernTreasury::Enum

          ASC: :asc
          DESC: :desc

          def self?.values: -> ::Array[ModernTreasury::Models::LedgerTransactionListParams::OrderBy::effective_at]
        end
      end

      type status = :pending | :posted | :archived

      module Status
        extend ModernTreasury::Enum

        PENDING: :pending
        POSTED: :posted
        ARCHIVED: :archived

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerTransactionListParams::status]
      end
    end
  end
end
