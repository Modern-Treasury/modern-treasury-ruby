module ModernTreasury
  module Models
    type payment_flow =
      {
        id: String,
        amount: Integer,
        client_token: String,
        counterparty_id: String?,
        created_at: Time,
        currency: String,
        direction: ModernTreasury::Models::PaymentFlow::direction,
        due_date: Date?,
        effective_date_selection_enabled: bool,
        existing_external_accounts_filter: ModernTreasury::Models::PaymentFlow::existing_external_accounts_filter?,
        external_account_collection: ModernTreasury::Models::PaymentFlow::external_account_collection,
        live_mode: bool,
        object: String,
        originating_account_id: String?,
        payment_order_id: String?,
        receiving_account_id: String?,
        selected_effective_date: Date?,
        status: ModernTreasury::Models::PaymentFlow::status,
        updated_at: Time
      }

    class PaymentFlow < ModernTreasury::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader amount: Integer?

      def amount=: (Integer) -> Integer

      attr_reader client_token: String?

      def client_token=: (String) -> String

      attr_accessor counterparty_id: String?

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader currency: String?

      def currency=: (String) -> String

      attr_reader direction: ModernTreasury::Models::PaymentFlow::direction?

      def direction=: (
        ModernTreasury::Models::PaymentFlow::direction
      ) -> ModernTreasury::Models::PaymentFlow::direction

      attr_accessor due_date: Date?

      attr_reader effective_date_selection_enabled: bool?

      def effective_date_selection_enabled=: (bool) -> bool

      attr_accessor existing_external_accounts_filter: ModernTreasury::Models::PaymentFlow::existing_external_accounts_filter?

      attr_reader external_account_collection: ModernTreasury::Models::PaymentFlow::external_account_collection?

      def external_account_collection=: (
        ModernTreasury::Models::PaymentFlow::external_account_collection
      ) -> ModernTreasury::Models::PaymentFlow::external_account_collection

      attr_reader live_mode: bool?

      def live_mode=: (bool) -> bool

      attr_reader object: String?

      def object=: (String) -> String

      attr_accessor originating_account_id: String?

      attr_accessor payment_order_id: String?

      attr_accessor receiving_account_id: String?

      attr_accessor selected_effective_date: Date?

      attr_reader status: ModernTreasury::Models::PaymentFlow::status?

      def status=: (
        ModernTreasury::Models::PaymentFlow::status
      ) -> ModernTreasury::Models::PaymentFlow::status

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        ?id: String,
        ?amount: Integer,
        ?client_token: String,
        ?counterparty_id: String?,
        ?created_at: Time,
        ?currency: String,
        ?direction: ModernTreasury::Models::PaymentFlow::direction,
        ?due_date: Date?,
        ?effective_date_selection_enabled: bool,
        ?existing_external_accounts_filter: ModernTreasury::Models::PaymentFlow::existing_external_accounts_filter?,
        ?external_account_collection: ModernTreasury::Models::PaymentFlow::external_account_collection,
        ?live_mode: bool,
        ?object: String,
        ?originating_account_id: String?,
        ?payment_order_id: String?,
        ?receiving_account_id: String?,
        ?selected_effective_date: Date?,
        ?status: ModernTreasury::Models::PaymentFlow::status,
        ?updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        amount: Integer,
        client_token: String,
        counterparty_id: String?,
        created_at: Time,
        currency: String,
        direction: ModernTreasury::Models::PaymentFlow::direction,
        due_date: Date?,
        effective_date_selection_enabled: bool,
        existing_external_accounts_filter: ModernTreasury::Models::PaymentFlow::existing_external_accounts_filter?,
        external_account_collection: ModernTreasury::Models::PaymentFlow::external_account_collection,
        live_mode: bool,
        object: String,
        originating_account_id: String?,
        payment_order_id: String?,
        receiving_account_id: String?,
        selected_effective_date: Date?,
        status: ModernTreasury::Models::PaymentFlow::status,
        updated_at: Time
      }

      type direction = :credit | :debit

      module Direction
        extend ModernTreasury::Internal::Type::Enum

        CREDIT: :credit
        DEBIT: :debit

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentFlow::direction]
      end

      type existing_external_accounts_filter = :verified

      module ExistingExternalAccountsFilter
        extend ModernTreasury::Internal::Type::Enum

        VERIFIED: :verified

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentFlow::existing_external_accounts_filter]
      end

      type external_account_collection = :disabled | :enabled

      module ExternalAccountCollection
        extend ModernTreasury::Internal::Type::Enum

        DISABLED: :disabled
        ENABLED: :enabled

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentFlow::external_account_collection]
      end

      type status = :cancelled | :completed | :expired | :pending

      module Status
        extend ModernTreasury::Internal::Type::Enum

        CANCELLED: :cancelled
        COMPLETED: :completed
        EXPIRED: :expired
        PENDING: :pending

        def self?.values: -> ::Array[ModernTreasury::Models::PaymentFlow::status]
      end
    end
  end
end
