module ModernTreasury
  module Models
    type ledger_account =
      {
        id: String,
        balances: ModernTreasury::LedgerAccount::Balances,
        created_at: Time,
        description: String?,
        discarded_at: Time?,
        external_id: String?,
        ledger_id: String,
        ledgerable_id: String?,
        ledgerable_type: ModernTreasury::Models::LedgerAccount::ledgerable_type?,
        live_mode: bool,
        lock_version: Integer,
        metadata: ::Hash[Symbol, String],
        name: String,
        normal_balance: ModernTreasury::Models::transaction_direction,
        object: String,
        updated_at: Time
      }

    class LedgerAccount < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor balances: ModernTreasury::LedgerAccount::Balances

      attr_accessor created_at: Time

      attr_accessor description: String?

      attr_accessor discarded_at: Time?

      attr_accessor external_id: String?

      attr_accessor ledger_id: String

      attr_accessor ledgerable_id: String?

      attr_accessor ledgerable_type: ModernTreasury::Models::LedgerAccount::ledgerable_type?

      attr_accessor live_mode: bool

      attr_accessor lock_version: Integer

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor name: String

      attr_accessor normal_balance: ModernTreasury::Models::transaction_direction

      attr_accessor object: String

      attr_accessor updated_at: Time

      def initialize: (
        id: String,
        balances: ModernTreasury::LedgerAccount::Balances,
        created_at: Time,
        description: String?,
        discarded_at: Time?,
        external_id: String?,
        ledger_id: String,
        ledgerable_id: String?,
        ledgerable_type: ModernTreasury::Models::LedgerAccount::ledgerable_type?,
        live_mode: bool,
        lock_version: Integer,
        metadata: ::Hash[Symbol, String],
        name: String,
        normal_balance: ModernTreasury::Models::transaction_direction,
        object: String,
        updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        balances: ModernTreasury::LedgerAccount::Balances,
        created_at: Time,
        description: String?,
        discarded_at: Time?,
        external_id: String?,
        ledger_id: String,
        ledgerable_id: String?,
        ledgerable_type: ModernTreasury::Models::LedgerAccount::ledgerable_type?,
        live_mode: bool,
        lock_version: Integer,
        metadata: ::Hash[Symbol, String],
        name: String,
        normal_balance: ModernTreasury::Models::transaction_direction,
        object: String,
        updated_at: Time
      }

      type balances =
        {
          available_balance: ModernTreasury::LedgerBalance,
          effective_at_lower_bound: Time?,
          effective_at_upper_bound: Time?,
          pending_balance: ModernTreasury::LedgerBalance,
          posted_balance: ModernTreasury::LedgerBalance
        }

      class Balances < ModernTreasury::Internal::Type::BaseModel
        attr_accessor available_balance: ModernTreasury::LedgerBalance

        attr_accessor effective_at_lower_bound: Time?

        attr_accessor effective_at_upper_bound: Time?

        attr_accessor pending_balance: ModernTreasury::LedgerBalance

        attr_accessor posted_balance: ModernTreasury::LedgerBalance

        def initialize: (
          available_balance: ModernTreasury::LedgerBalance,
          effective_at_lower_bound: Time?,
          effective_at_upper_bound: Time?,
          pending_balance: ModernTreasury::LedgerBalance,
          posted_balance: ModernTreasury::LedgerBalance
        ) -> void

        def to_hash: -> {
          available_balance: ModernTreasury::LedgerBalance,
          effective_at_lower_bound: Time?,
          effective_at_upper_bound: Time?,
          pending_balance: ModernTreasury::LedgerBalance,
          posted_balance: ModernTreasury::LedgerBalance
        }
      end

      type ledgerable_type =
        :counterparty | :external_account | :internal_account | :virtual_account

      module LedgerableType
        extend ModernTreasury::Internal::Type::Enum

        COUNTERPARTY: :counterparty
        EXTERNAL_ACCOUNT: :external_account
        INTERNAL_ACCOUNT: :internal_account
        VIRTUAL_ACCOUNT: :virtual_account

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerAccount::ledgerable_type]
      end
    end
  end
end
