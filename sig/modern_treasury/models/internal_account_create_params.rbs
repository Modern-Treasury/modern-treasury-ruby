module ModernTreasury
  module Models
    type internal_account_create_params =
      {
        connection_id: String,
        currency: ModernTreasury::Models::InternalAccountCreateParams::currency,
        name: String,
        party_name: String,
        account_capabilities: ::Array[ModernTreasury::InternalAccountCreateParams::AccountCapability],
        account_type: ModernTreasury::Models::InternalAccountCreateParams::account_type,
        counterparty_id: String,
        legal_entity_id: String,
        parent_account_id: String,
        party_address: ModernTreasury::InternalAccountCreateParams::PartyAddress,
        vendor_attributes: ::Hash[Symbol, String]
      }
      & ModernTreasury::Internal::Type::request_parameters

    class InternalAccountCreateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor connection_id: String

      attr_accessor currency: ModernTreasury::Models::InternalAccountCreateParams::currency

      attr_accessor name: String

      attr_accessor party_name: String

      attr_reader account_capabilities: ::Array[ModernTreasury::InternalAccountCreateParams::AccountCapability]?

      def account_capabilities=: (
        ::Array[ModernTreasury::InternalAccountCreateParams::AccountCapability]
      ) -> ::Array[ModernTreasury::InternalAccountCreateParams::AccountCapability]

      attr_reader account_type: ModernTreasury::Models::InternalAccountCreateParams::account_type?

      def account_type=: (
        ModernTreasury::Models::InternalAccountCreateParams::account_type
      ) -> ModernTreasury::Models::InternalAccountCreateParams::account_type

      attr_reader counterparty_id: String?

      def counterparty_id=: (String) -> String

      attr_reader legal_entity_id: String?

      def legal_entity_id=: (String) -> String

      attr_reader parent_account_id: String?

      def parent_account_id=: (String) -> String

      attr_reader party_address: ModernTreasury::InternalAccountCreateParams::PartyAddress?

      def party_address=: (
        ModernTreasury::InternalAccountCreateParams::PartyAddress
      ) -> ModernTreasury::InternalAccountCreateParams::PartyAddress

      attr_reader vendor_attributes: ::Hash[Symbol, String]?

      def vendor_attributes=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      def initialize: (
        connection_id: String,
        currency: ModernTreasury::Models::InternalAccountCreateParams::currency,
        name: String,
        party_name: String,
        ?account_capabilities: ::Array[ModernTreasury::InternalAccountCreateParams::AccountCapability],
        ?account_type: ModernTreasury::Models::InternalAccountCreateParams::account_type,
        ?counterparty_id: String,
        ?legal_entity_id: String,
        ?parent_account_id: String,
        ?party_address: ModernTreasury::InternalAccountCreateParams::PartyAddress,
        ?vendor_attributes: ::Hash[Symbol, String],
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> {
        connection_id: String,
        currency: ModernTreasury::Models::InternalAccountCreateParams::currency,
        name: String,
        party_name: String,
        account_capabilities: ::Array[ModernTreasury::InternalAccountCreateParams::AccountCapability],
        account_type: ModernTreasury::Models::InternalAccountCreateParams::account_type,
        counterparty_id: String,
        legal_entity_id: String,
        parent_account_id: String,
        party_address: ModernTreasury::InternalAccountCreateParams::PartyAddress,
        vendor_attributes: ::Hash[Symbol, String],
        request_options: ModernTreasury::RequestOptions
      }

      type currency = :USD | :CAD

      module Currency
        extend ModernTreasury::Internal::Type::Enum

        USD: :USD
        CAD: :CAD

        def self?.values: -> ::Array[ModernTreasury::Models::InternalAccountCreateParams::currency]
      end

      type account_capability =
        {
          id: String,
          created_at: Time,
          direction: ModernTreasury::Models::transaction_direction,
          discarded_at: Time?,
          identifier: String?,
          live_mode: bool,
          object: String,
          payment_type: ModernTreasury::Models::InternalAccountCreateParams::AccountCapability::payment_type,
          updated_at: Time
        }

      class AccountCapability < ModernTreasury::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Time

        attr_accessor direction: ModernTreasury::Models::transaction_direction

        attr_accessor discarded_at: Time?

        attr_accessor identifier: String?

        attr_accessor live_mode: bool

        attr_accessor object: String

        attr_accessor payment_type: ModernTreasury::Models::InternalAccountCreateParams::AccountCapability::payment_type

        attr_accessor updated_at: Time

        def initialize: (
          id: String,
          created_at: Time,
          direction: ModernTreasury::Models::transaction_direction,
          discarded_at: Time?,
          identifier: String?,
          live_mode: bool,
          object: String,
          payment_type: ModernTreasury::Models::InternalAccountCreateParams::AccountCapability::payment_type,
          updated_at: Time
        ) -> void

        def to_hash: -> {
          id: String,
          created_at: Time,
          direction: ModernTreasury::Models::transaction_direction,
          discarded_at: Time?,
          identifier: String?,
          live_mode: bool,
          object: String,
          payment_type: ModernTreasury::Models::InternalAccountCreateParams::AccountCapability::payment_type,
          updated_at: Time
        }

        type payment_type =
          :ach
          | :au_becs
          | :bacs
          | :base
          | :book
          | :card
          | :chats
          | :check
          | :cross_border
          | :dk_nets
          | :eft
          | :ethereum
          | :gb_fps
          | :hu_ics
          | :interac
          | :masav
          | :mx_ccen
          | :neft
          | :nics
          | :nz_becs
          | :pl_elixir
          | :polygon
          | :provxchange
          | :ro_sent
          | :rtp
          | :se_bankgirot
          | :sen
          | :sepa
          | :sg_giro
          | :sic
          | :signet
          | :sknbi
          | :solana
          | :wire
          | :zengin

        module PaymentType
          extend ModernTreasury::Internal::Type::Enum

          ACH: :ach
          AU_BECS: :au_becs
          BACS: :bacs
          BASE: :base
          BOOK: :book
          CARD: :card
          CHATS: :chats
          CHECK: :check
          CROSS_BORDER: :cross_border
          DK_NETS: :dk_nets
          EFT: :eft
          ETHEREUM: :ethereum
          GB_FPS: :gb_fps
          HU_ICS: :hu_ics
          INTERAC: :interac
          MASAV: :masav
          MX_CCEN: :mx_ccen
          NEFT: :neft
          NICS: :nics
          NZ_BECS: :nz_becs
          PL_ELIXIR: :pl_elixir
          POLYGON: :polygon
          PROVXCHANGE: :provxchange
          RO_SENT: :ro_sent
          RTP: :rtp
          SE_BANKGIROT: :se_bankgirot
          SEN: :sen
          SEPA: :sepa
          SG_GIRO: :sg_giro
          SIC: :sic
          SIGNET: :signet
          SKNBI: :sknbi
          SOLANA: :solana
          WIRE: :wire
          ZENGIN: :zengin

          def self?.values: -> ::Array[ModernTreasury::Models::InternalAccountCreateParams::AccountCapability::payment_type]
        end
      end

      type account_type =
        :base_wallet
        | :cash
        | :checking
        | :crypto_wallet
        | :ethereum_wallet
        | :general_ledger
        | :loan
        | :non_resident
        | :other
        | :overdraft
        | :polygon_wallet
        | :savings
        | :solana_wallet

      module AccountType
        extend ModernTreasury::Internal::Type::Enum

        BASE_WALLET: :base_wallet
        CASH: :cash
        CHECKING: :checking
        CRYPTO_WALLET: :crypto_wallet
        ETHEREUM_WALLET: :ethereum_wallet
        GENERAL_LEDGER: :general_ledger
        LOAN: :loan
        NON_RESIDENT: :non_resident
        OTHER: :other
        OVERDRAFT: :overdraft
        POLYGON_WALLET: :polygon_wallet
        SAVINGS: :savings
        SOLANA_WALLET: :solana_wallet

        def self?.values: -> ::Array[ModernTreasury::Models::InternalAccountCreateParams::account_type]
      end

      type party_address =
        {
          country: String,
          :line1 => String,
          locality: String,
          postal_code: String,
          region: String,
          :line2 => String
        }

      class PartyAddress < ModernTreasury::Internal::Type::BaseModel
        attr_accessor country: String

        attr_accessor line1: String

        attr_accessor locality: String

        attr_accessor postal_code: String

        attr_accessor region: String

        attr_reader line2: String?

        def line2=: (String) -> String

        def initialize: (
          country: String,
          line1: String,
          locality: String,
          postal_code: String,
          region: String,
          ?line2: String
        ) -> void

        def to_hash: -> {
          country: String,
          :line1 => String,
          locality: String,
          postal_code: String,
          region: String,
          :line2 => String
        }
      end
    end
  end
end
