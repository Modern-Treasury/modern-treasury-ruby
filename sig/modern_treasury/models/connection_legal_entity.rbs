module ModernTreasury
  module Models
    type connection_legal_entity =
      {
        id: String,
        connection_id: String,
        created_at: Time,
        discarded_at: Time?,
        legal_entity_id: String,
        live_mode: bool,
        object: String,
        status: ModernTreasury::Models::ConnectionLegalEntity::status,
        updated_at: Time,
        vendor_id: String
      }

    class ConnectionLegalEntity < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor connection_id: String

      attr_accessor created_at: Time

      attr_accessor discarded_at: Time?

      attr_accessor legal_entity_id: String

      attr_accessor live_mode: bool

      attr_accessor object: String

      attr_accessor status: ModernTreasury::Models::ConnectionLegalEntity::status

      attr_accessor updated_at: Time

      attr_accessor vendor_id: String

      def initialize: (
        id: String,
        connection_id: String,
        created_at: Time,
        discarded_at: Time?,
        legal_entity_id: String,
        live_mode: bool,
        object: String,
        status: ModernTreasury::Models::ConnectionLegalEntity::status,
        updated_at: Time,
        vendor_id: String
      ) -> void

      def to_hash: -> {
        id: String,
        connection_id: String,
        created_at: Time,
        discarded_at: Time?,
        legal_entity_id: String,
        live_mode: bool,
        object: String,
        status: ModernTreasury::Models::ConnectionLegalEntity::status,
        updated_at: Time,
        vendor_id: String
      }

      type status = :completed | :denied | :failed | :processing

      module Status
        extend ModernTreasury::Internal::Type::Enum

        COMPLETED: :completed
        DENIED: :denied
        FAILED: :failed
        PROCESSING: :processing

        def self?.values: -> ::Array[ModernTreasury::Models::ConnectionLegalEntity::status]
      end
    end
  end
end
