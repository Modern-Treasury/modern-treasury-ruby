module ModernTreasury
  module Models
    type internal_account =
      {
        id: String,
        account_capabilities: ::Array[ModernTreasury::InternalAccount::AccountCapability],
        account_details: ::Array[ModernTreasury::AccountDetail],
        account_type: ModernTreasury::Models::InternalAccount::account_type?,
        connection: ModernTreasury::Connection,
        counterparty_id: String?,
        created_at: Time,
        currency: ModernTreasury::Models::currency,
        ledger_account_id: String?,
        legal_entity_id: String?,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        name: String?,
        object: String,
        parent_account_id: String?,
        party_address: ModernTreasury::Address?,
        party_name: String,
        party_type: ModernTreasury::Models::InternalAccount::party_type?,
        routing_details: ::Array[ModernTreasury::RoutingDetail],
        updated_at: Time,
        vendor_id: String?
      }

    class InternalAccount < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_capabilities: ::Array[ModernTreasury::InternalAccount::AccountCapability]

      attr_accessor account_details: ::Array[ModernTreasury::AccountDetail]

      attr_accessor account_type: ModernTreasury::Models::InternalAccount::account_type?

      attr_accessor connection: ModernTreasury::Connection

      attr_accessor counterparty_id: String?

      attr_accessor created_at: Time

      attr_accessor currency: ModernTreasury::Models::currency

      attr_accessor ledger_account_id: String?

      attr_accessor legal_entity_id: String?

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor name: String?

      attr_accessor object: String

      attr_accessor parent_account_id: String?

      attr_accessor party_address: ModernTreasury::Address?

      attr_accessor party_name: String

      attr_accessor party_type: ModernTreasury::Models::InternalAccount::party_type?

      attr_accessor routing_details: ::Array[ModernTreasury::RoutingDetail]

      attr_accessor updated_at: Time

      attr_accessor vendor_id: String?

      def initialize: (
        id: String,
        account_capabilities: ::Array[ModernTreasury::InternalAccount::AccountCapability],
        account_details: ::Array[ModernTreasury::AccountDetail],
        account_type: ModernTreasury::Models::InternalAccount::account_type?,
        connection: ModernTreasury::Connection,
        counterparty_id: String?,
        created_at: Time,
        currency: ModernTreasury::Models::currency,
        ledger_account_id: String?,
        legal_entity_id: String?,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        name: String?,
        object: String,
        parent_account_id: String?,
        party_address: ModernTreasury::Address?,
        party_name: String,
        party_type: ModernTreasury::Models::InternalAccount::party_type?,
        routing_details: ::Array[ModernTreasury::RoutingDetail],
        updated_at: Time,
        vendor_id: String?
      ) -> void

      def to_hash: -> {
        id: String,
        account_capabilities: ::Array[ModernTreasury::InternalAccount::AccountCapability],
        account_details: ::Array[ModernTreasury::AccountDetail],
        account_type: ModernTreasury::Models::InternalAccount::account_type?,
        connection: ModernTreasury::Connection,
        counterparty_id: String?,
        created_at: Time,
        currency: ModernTreasury::Models::currency,
        ledger_account_id: String?,
        legal_entity_id: String?,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        name: String?,
        object: String,
        parent_account_id: String?,
        party_address: ModernTreasury::Address?,
        party_name: String,
        party_type: ModernTreasury::Models::InternalAccount::party_type?,
        routing_details: ::Array[ModernTreasury::RoutingDetail],
        updated_at: Time,
        vendor_id: String?
      }

      type account_capability =
        {
          id: String,
          created_at: Time,
          direction: ModernTreasury::Models::transaction_direction,
          discarded_at: Time?,
          identifier: String?,
          live_mode: bool,
          object: String,
          payment_type: ModernTreasury::Models::InternalAccount::AccountCapability::payment_type,
          updated_at: Time
        }

      class AccountCapability < ModernTreasury::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Time

        attr_accessor direction: ModernTreasury::Models::transaction_direction

        attr_accessor discarded_at: Time?

        attr_accessor identifier: String?

        attr_accessor live_mode: bool

        attr_accessor object: String

        attr_accessor payment_type: ModernTreasury::Models::InternalAccount::AccountCapability::payment_type

        attr_accessor updated_at: Time

        def initialize: (
          id: String,
          created_at: Time,
          direction: ModernTreasury::Models::transaction_direction,
          discarded_at: Time?,
          identifier: String?,
          live_mode: bool,
          object: String,
          payment_type: ModernTreasury::Models::InternalAccount::AccountCapability::payment_type,
          updated_at: Time
        ) -> void

        def to_hash: -> {
          id: String,
          created_at: Time,
          direction: ModernTreasury::Models::transaction_direction,
          discarded_at: Time?,
          identifier: String?,
          live_mode: bool,
          object: String,
          payment_type: ModernTreasury::Models::InternalAccount::AccountCapability::payment_type,
          updated_at: Time
        }

        type payment_type =
          :ach
          | :au_becs
          | :bacs
          | :base
          | :book
          | :card
          | :chats
          | :check
          | :cross_border
          | :dk_nets
          | :eft
          | :ethereum
          | :gb_fps
          | :hu_ics
          | :interac
          | :masav
          | :mx_ccen
          | :neft
          | :nics
          | :nz_becs
          | :pl_elixir
          | :polygon
          | :provxchange
          | :ro_sent
          | :rtp
          | :se_bankgirot
          | :sen
          | :sepa
          | :sg_giro
          | :sic
          | :signet
          | :sknbi
          | :solana
          | :wire
          | :zengin

        module PaymentType
          extend ModernTreasury::Internal::Type::Enum

          ACH: :ach
          AU_BECS: :au_becs
          BACS: :bacs
          BASE: :base
          BOOK: :book
          CARD: :card
          CHATS: :chats
          CHECK: :check
          CROSS_BORDER: :cross_border
          DK_NETS: :dk_nets
          EFT: :eft
          ETHEREUM: :ethereum
          GB_FPS: :gb_fps
          HU_ICS: :hu_ics
          INTERAC: :interac
          MASAV: :masav
          MX_CCEN: :mx_ccen
          NEFT: :neft
          NICS: :nics
          NZ_BECS: :nz_becs
          PL_ELIXIR: :pl_elixir
          POLYGON: :polygon
          PROVXCHANGE: :provxchange
          RO_SENT: :ro_sent
          RTP: :rtp
          SE_BANKGIROT: :se_bankgirot
          SEN: :sen
          SEPA: :sepa
          SG_GIRO: :sg_giro
          SIC: :sic
          SIGNET: :signet
          SKNBI: :sknbi
          SOLANA: :solana
          WIRE: :wire
          ZENGIN: :zengin

          def self?.values: -> ::Array[ModernTreasury::Models::InternalAccount::AccountCapability::payment_type]
        end
      end

      type account_type =
        :base_wallet
        | :cash
        | :checking
        | :crypto_wallet
        | :ethereum_wallet
        | :general_ledger
        | :loan
        | :non_resident
        | :other
        | :overdraft
        | :polygon_wallet
        | :savings
        | :solana_wallet

      module AccountType
        extend ModernTreasury::Internal::Type::Enum

        BASE_WALLET: :base_wallet
        CASH: :cash
        CHECKING: :checking
        CRYPTO_WALLET: :crypto_wallet
        ETHEREUM_WALLET: :ethereum_wallet
        GENERAL_LEDGER: :general_ledger
        LOAN: :loan
        NON_RESIDENT: :non_resident
        OTHER: :other
        OVERDRAFT: :overdraft
        POLYGON_WALLET: :polygon_wallet
        SAVINGS: :savings
        SOLANA_WALLET: :solana_wallet

        def self?.values: -> ::Array[ModernTreasury::Models::InternalAccount::account_type]
      end

      type party_type = :business | :individual

      module PartyType
        extend ModernTreasury::Internal::Type::Enum

        BUSINESS: :business
        INDIVIDUAL: :individual

        def self?.values: -> ::Array[ModernTreasury::Models::InternalAccount::party_type]
      end
    end
  end
end
