module ModernTreasury
  module Models
    type external_account_create_params =
      {
        counterparty_id: String?,
        account_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail],
        account_type: ModernTreasury::Models::external_account_type,
        contact_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail],
        ledger_account: ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount,
        metadata: ::Hash[Symbol, String],
        name: String?,
        party_address: ModernTreasury::Models::ExternalAccountCreateParams::PartyAddress,
        party_identifier: String,
        party_name: String,
        party_type: ModernTreasury::Models::ExternalAccountCreateParams::party_type?,
        plaid_processor_token: String,
        routing_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail]
      }
      & ModernTreasury::request_parameters

    class ExternalAccountCreateParams < ModernTreasury::BaseModel
      extend ModernTreasury::RequestParameters::Converter
      include ModernTreasury::RequestParameters

      attr_accessor counterparty_id: String?

      attr_reader account_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail]?

      def account_details=: (
        ::Array[ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail]
      ) -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail]

      attr_reader account_type: ModernTreasury::Models::external_account_type?

      def account_type=: (
        ModernTreasury::Models::external_account_type
      ) -> ModernTreasury::Models::external_account_type

      attr_reader contact_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail]?

      def contact_details=: (
        ::Array[ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail]
      ) -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail]

      attr_reader ledger_account: ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount?

      def ledger_account=: (
        ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount
      ) -> ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_accessor name: String?

      attr_reader party_address: ModernTreasury::Models::ExternalAccountCreateParams::PartyAddress?

      def party_address=: (
        ModernTreasury::Models::ExternalAccountCreateParams::PartyAddress
      ) -> ModernTreasury::Models::ExternalAccountCreateParams::PartyAddress

      attr_reader party_identifier: String?

      def party_identifier=: (String) -> String

      attr_reader party_name: String?

      def party_name=: (String) -> String

      attr_accessor party_type: ModernTreasury::Models::ExternalAccountCreateParams::party_type?

      attr_reader plaid_processor_token: String?

      def plaid_processor_token=: (String) -> String

      attr_reader routing_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail]?

      def routing_details=: (
        ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail]
      ) -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail]

      def initialize: (
        counterparty_id: String?,
        ?account_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail],
        ?account_type: ModernTreasury::Models::external_account_type,
        ?contact_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail],
        ?ledger_account: ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount,
        ?metadata: ::Hash[Symbol, String],
        ?name: String?,
        ?party_address: ModernTreasury::Models::ExternalAccountCreateParams::PartyAddress,
        ?party_identifier: String,
        ?party_name: String,
        ?party_type: ModernTreasury::Models::ExternalAccountCreateParams::party_type?,
        ?plaid_processor_token: String,
        ?routing_details: ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail],
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> ModernTreasury::Models::external_account_create_params

      type account_detail =
        {
          account_number: String,
          account_number_type: ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail::account_number_type
        }

      class AccountDetail < ModernTreasury::BaseModel
        attr_accessor account_number: String

        attr_reader account_number_type: ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail::account_number_type?

        def account_number_type=: (
          ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail::account_number_type
        ) -> ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail::account_number_type

        def initialize: (
          account_number: String,
          ?account_number_type: ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail::account_number_type
        ) -> void

        def to_hash: -> ModernTreasury::Models::ExternalAccountCreateParams::account_detail

        type account_number_type =
          :au_number
          | :clabe
          | :hk_number
          | :iban
          | :id_number
          | :nz_number
          | :other
          | :pan
          | :sg_number
          | :wallet_address

        class AccountNumberType < ModernTreasury::Enum
          AU_NUMBER: :au_number
          CLABE: :clabe
          HK_NUMBER: :hk_number
          IBAN: :iban
          ID_NUMBER: :id_number
          NZ_NUMBER: :nz_number
          OTHER: :other
          PAN: :pan
          SG_NUMBER: :sg_number
          WALLET_ADDRESS: :wallet_address

          def self.values: -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::AccountDetail::account_number_type]
        end
      end

      type contact_detail =
        {
          contact_identifier: String,
          contact_identifier_type: ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail::contact_identifier_type
        }

      class ContactDetail < ModernTreasury::BaseModel
        attr_reader contact_identifier: String?

        def contact_identifier=: (String) -> String

        attr_reader contact_identifier_type: ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail::contact_identifier_type?

        def contact_identifier_type=: (
          ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail::contact_identifier_type
        ) -> ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail::contact_identifier_type

        def initialize: (
          ?contact_identifier: String,
          ?contact_identifier_type: ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail::contact_identifier_type
        ) -> void

        def to_hash: -> ModernTreasury::Models::ExternalAccountCreateParams::contact_detail

        type contact_identifier_type = :email | :phone_number | :website

        class ContactIdentifierType < ModernTreasury::Enum
          EMAIL: :email
          PHONE_NUMBER: :phone_number
          WEBSITE: :website

          def self.values: -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::ContactDetail::contact_identifier_type]
        end
      end

      type ledger_account =
        {
          currency: String,
          ledger_id: String,
          name: String,
          normal_balance: ModernTreasury::Models::transaction_direction,
          currency_exponent: Integer?,
          description: String?,
          ledger_account_category_ids: ::Array[String],
          ledgerable_id: String,
          ledgerable_type: ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount::ledgerable_type,
          metadata: ::Hash[Symbol, String]
        }

      class LedgerAccount < ModernTreasury::BaseModel
        attr_accessor currency: String

        attr_accessor ledger_id: String

        attr_accessor name: String

        attr_accessor normal_balance: ModernTreasury::Models::transaction_direction

        attr_accessor currency_exponent: Integer?

        attr_accessor description: String?

        attr_reader ledger_account_category_ids: ::Array[String]?

        def ledger_account_category_ids=: (::Array[String]) -> ::Array[String]

        attr_reader ledgerable_id: String?

        def ledgerable_id=: (String) -> String

        attr_reader ledgerable_type: ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount::ledgerable_type?

        def ledgerable_type=: (
          ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount::ledgerable_type
        ) -> ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount::ledgerable_type

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        def initialize: (
          currency: String,
          ledger_id: String,
          name: String,
          normal_balance: ModernTreasury::Models::transaction_direction,
          ?currency_exponent: Integer?,
          ?description: String?,
          ?ledger_account_category_ids: ::Array[String],
          ?ledgerable_id: String,
          ?ledgerable_type: ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount::ledgerable_type,
          ?metadata: ::Hash[Symbol, String]
        ) -> void

        def to_hash: -> ModernTreasury::Models::ExternalAccountCreateParams::ledger_account

        type ledgerable_type =
          :counterparty
          | :external_account
          | :internal_account
          | :virtual_account

        class LedgerableType < ModernTreasury::Enum
          COUNTERPARTY: :counterparty
          EXTERNAL_ACCOUNT: :external_account
          INTERNAL_ACCOUNT: :internal_account
          VIRTUAL_ACCOUNT: :virtual_account

          def self.values: -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::LedgerAccount::ledgerable_type]
        end
      end

      type party_address =
        {
          country: String?,
          :line1 => String?,
          :line2 => String?,
          locality: String?,
          postal_code: String?,
          region: String?
        }

      class PartyAddress < ModernTreasury::BaseModel
        attr_accessor country: String?

        attr_accessor line1: String?

        attr_accessor line2: String?

        attr_accessor locality: String?

        attr_accessor postal_code: String?

        attr_accessor region: String?

        def initialize: (
          ?country: String?,
          ?line1: String?,
          ?line2: String?,
          ?locality: String?,
          ?postal_code: String?,
          ?region: String?
        ) -> void

        def to_hash: -> ModernTreasury::Models::ExternalAccountCreateParams::party_address
      end

      type party_type = :business | :individual

      class PartyType < ModernTreasury::Enum
        BUSINESS: :business
        INDIVIDUAL: :individual

        def self.values: -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::party_type]
      end

      type routing_detail =
        {
          routing_number: String,
          routing_number_type: ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::routing_number_type,
          payment_type: ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::payment_type
        }

      class RoutingDetail < ModernTreasury::BaseModel
        attr_accessor routing_number: String

        attr_accessor routing_number_type: ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::routing_number_type

        attr_reader payment_type: ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::payment_type?

        def payment_type=: (
          ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::payment_type
        ) -> ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::payment_type

        def initialize: (
          routing_number: String,
          routing_number_type: ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::routing_number_type,
          ?payment_type: ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::payment_type
        ) -> void

        def to_hash: -> ModernTreasury::Models::ExternalAccountCreateParams::routing_detail

        type routing_number_type =
          :aba
          | :au_bsb
          | :br_codigo
          | :ca_cpa
          | :chips
          | :cnaps
          | :dk_interbank_clearing_code
          | :gb_sort_code
          | :hk_interbank_clearing_code
          | :hu_interbank_clearing_code
          | :id_sknbi_code
          | :in_ifsc
          | :jp_zengin_code
          | :my_branch_code
          | :mx_bank_identifier
          | :nz_national_clearing_code
          | :pl_national_clearing_code
          | :se_bankgiro_clearing_code
          | :sg_interbank_clearing_code
          | :swift
          | :za_national_clearing_code

        class RoutingNumberType < ModernTreasury::Enum
          ABA: :aba
          AU_BSB: :au_bsb
          BR_CODIGO: :br_codigo
          CA_CPA: :ca_cpa
          CHIPS: :chips
          CNAPS: :cnaps
          DK_INTERBANK_CLEARING_CODE: :dk_interbank_clearing_code
          GB_SORT_CODE: :gb_sort_code
          HK_INTERBANK_CLEARING_CODE: :hk_interbank_clearing_code
          HU_INTERBANK_CLEARING_CODE: :hu_interbank_clearing_code
          ID_SKNBI_CODE: :id_sknbi_code
          IN_IFSC: :in_ifsc
          JP_ZENGIN_CODE: :jp_zengin_code
          MY_BRANCH_CODE: :my_branch_code
          MX_BANK_IDENTIFIER: :mx_bank_identifier
          NZ_NATIONAL_CLEARING_CODE: :nz_national_clearing_code
          PL_NATIONAL_CLEARING_CODE: :pl_national_clearing_code
          SE_BANKGIRO_CLEARING_CODE: :se_bankgiro_clearing_code
          SG_INTERBANK_CLEARING_CODE: :sg_interbank_clearing_code
          SWIFT: :swift
          ZA_NATIONAL_CLEARING_CODE: :za_national_clearing_code

          def self.values: -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::routing_number_type]
        end

        type payment_type =
          :ach
          | :au_becs
          | :bacs
          | :book
          | :card
          | :chats
          | :check
          | :cross_border
          | :dk_nets
          | :eft
          | :hu_ics
          | :interac
          | :masav
          | :mx_ccen
          | :neft
          | :nics
          | :nz_becs
          | :pl_elixir
          | :provxchange
          | :ro_sent
          | :rtp
          | :se_bankgirot
          | :sen
          | :sepa
          | :sg_giro
          | :sic
          | :signet
          | :sknbi
          | :wire
          | :zengin

        class PaymentType < ModernTreasury::Enum
          ACH: :ach
          AU_BECS: :au_becs
          BACS: :bacs
          BOOK: :book
          CARD: :card
          CHATS: :chats
          CHECK: :check
          CROSS_BORDER: :cross_border
          DK_NETS: :dk_nets
          EFT: :eft
          HU_ICS: :hu_ics
          INTERAC: :interac
          MASAV: :masav
          MX_CCEN: :mx_ccen
          NEFT: :neft
          NICS: :nics
          NZ_BECS: :nz_becs
          PL_ELIXIR: :pl_elixir
          PROVXCHANGE: :provxchange
          RO_SENT: :ro_sent
          RTP: :rtp
          SE_BANKGIROT: :se_bankgirot
          SEN: :sen
          SEPA: :sepa
          SG_GIRO: :sg_giro
          SIC: :sic
          SIGNET: :signet
          SKNBI: :sknbi
          WIRE: :wire
          ZENGIN: :zengin

          def self.values: -> ::Array[ModernTreasury::Models::ExternalAccountCreateParams::RoutingDetail::payment_type]
        end
      end
    end
  end
end
