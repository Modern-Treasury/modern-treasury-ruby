module ModernTreasury
  module Models
    type expected_payment_create_params =
      {
        amount_lower_bound: Integer?,
        amount_upper_bound: Integer?,
        counterparty_id: String?,
        currency: ModernTreasury::Models::currency?,
        date_lower_bound: Date?,
        date_upper_bound: Date?,
        description: String?,
        direction: ModernTreasury::Models::ExpectedPaymentCreateParams::direction?,
        internal_account_id: String?,
        ledger_transaction: ModernTreasury::LedgerTransactionCreateRequest,
        ledger_transaction_id: String,
        line_items: ::Array[ModernTreasury::ExpectedPaymentCreateParams::LineItem],
        metadata: ::Hash[Symbol, String],
        reconciliation_filters: top?,
        reconciliation_groups: top?,
        reconciliation_rule_variables: ::Array[ModernTreasury::ReconciliationRule]?,
        remittance_information: String?,
        statement_descriptor: String?,
        type: ModernTreasury::Models::expected_payment_type?
      }
      & ModernTreasury::Internal::Type::request_parameters

    class ExpectedPaymentCreateParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor amount_lower_bound: Integer?

      attr_accessor amount_upper_bound: Integer?

      attr_accessor counterparty_id: String?

      attr_accessor currency: ModernTreasury::Models::currency?

      attr_accessor date_lower_bound: Date?

      attr_accessor date_upper_bound: Date?

      attr_accessor description: String?

      attr_accessor direction: ModernTreasury::Models::ExpectedPaymentCreateParams::direction?

      attr_accessor internal_account_id: String?

      attr_reader ledger_transaction: ModernTreasury::LedgerTransactionCreateRequest?

      def ledger_transaction=: (
        ModernTreasury::LedgerTransactionCreateRequest
      ) -> ModernTreasury::LedgerTransactionCreateRequest

      attr_reader ledger_transaction_id: String?

      def ledger_transaction_id=: (String) -> String

      attr_reader line_items: ::Array[ModernTreasury::ExpectedPaymentCreateParams::LineItem]?

      def line_items=: (
        ::Array[ModernTreasury::ExpectedPaymentCreateParams::LineItem]
      ) -> ::Array[ModernTreasury::ExpectedPaymentCreateParams::LineItem]

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_accessor reconciliation_filters: top?

      attr_accessor reconciliation_groups: top?

      attr_accessor reconciliation_rule_variables: ::Array[ModernTreasury::ReconciliationRule]?

      attr_accessor remittance_information: String?

      attr_accessor statement_descriptor: String?

      attr_accessor type: ModernTreasury::Models::expected_payment_type?

      def initialize: (
        ?amount_lower_bound: Integer?,
        ?amount_upper_bound: Integer?,
        ?counterparty_id: String?,
        ?currency: ModernTreasury::Models::currency?,
        ?date_lower_bound: Date?,
        ?date_upper_bound: Date?,
        ?description: String?,
        ?direction: ModernTreasury::Models::ExpectedPaymentCreateParams::direction?,
        ?internal_account_id: String?,
        ?ledger_transaction: ModernTreasury::LedgerTransactionCreateRequest,
        ?ledger_transaction_id: String,
        ?line_items: ::Array[ModernTreasury::ExpectedPaymentCreateParams::LineItem],
        ?metadata: ::Hash[Symbol, String],
        ?reconciliation_filters: top?,
        ?reconciliation_groups: top?,
        ?reconciliation_rule_variables: ::Array[ModernTreasury::ReconciliationRule]?,
        ?remittance_information: String?,
        ?statement_descriptor: String?,
        ?type: ModernTreasury::Models::expected_payment_type?,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> {
        amount_lower_bound: Integer?,
        amount_upper_bound: Integer?,
        counterparty_id: String?,
        currency: ModernTreasury::Models::currency?,
        date_lower_bound: Date?,
        date_upper_bound: Date?,
        description: String?,
        direction: ModernTreasury::Models::ExpectedPaymentCreateParams::direction?,
        internal_account_id: String?,
        ledger_transaction: ModernTreasury::LedgerTransactionCreateRequest,
        ledger_transaction_id: String,
        line_items: ::Array[ModernTreasury::ExpectedPaymentCreateParams::LineItem],
        metadata: ::Hash[Symbol, String],
        reconciliation_filters: top?,
        reconciliation_groups: top?,
        reconciliation_rule_variables: ::Array[ModernTreasury::ReconciliationRule]?,
        remittance_information: String?,
        statement_descriptor: String?,
        type: ModernTreasury::Models::expected_payment_type?,
        request_options: ModernTreasury::RequestOptions
      }

      type direction = :credit | :debit

      module Direction
        extend ModernTreasury::Internal::Type::Enum

        CREDIT: :credit
        DEBIT: :debit

        def self?.values: -> ::Array[ModernTreasury::Models::ExpectedPaymentCreateParams::direction]
      end

      type line_item =
        {
          amount: Integer,
          accounting_category_id: String?,
          description: String?,
          metadata: ::Hash[Symbol, String]
        }

      class LineItem < ModernTreasury::Internal::Type::BaseModel
        attr_accessor amount: Integer

        attr_accessor accounting_category_id: String?

        attr_accessor description: String?

        attr_reader metadata: ::Hash[Symbol, String]?

        def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

        def initialize: (
          amount: Integer,
          ?accounting_category_id: String?,
          ?description: String?,
          ?metadata: ::Hash[Symbol, String]
        ) -> void

        def to_hash: -> {
          amount: Integer,
          accounting_category_id: String?,
          description: String?,
          metadata: ::Hash[Symbol, String]
        }
      end
    end
  end
end
