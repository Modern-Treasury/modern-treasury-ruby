module ModernTreasury
  module Models
    type ledger_entry =
      {
        id: String,
        amount: Integer,
        created_at: Time,
        direction: ModernTreasury::Models::transaction_direction,
        discarded_at: Time?,
        ledger_account_currency: String,
        ledger_account_currency_exponent: Integer,
        ledger_account_id: String,
        ledger_account_lock_version: Integer?,
        ledger_transaction_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        resulting_ledger_account_balances: ModernTreasury::LedgerBalances?,
        status: ModernTreasury::Models::LedgerEntry::status,
        updated_at: Time
      }

    class LedgerEntry < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor amount: Integer

      attr_accessor created_at: Time

      attr_accessor direction: ModernTreasury::Models::transaction_direction

      attr_accessor discarded_at: Time?

      attr_accessor ledger_account_currency: String

      attr_accessor ledger_account_currency_exponent: Integer

      attr_accessor ledger_account_id: String

      attr_accessor ledger_account_lock_version: Integer?

      attr_accessor ledger_transaction_id: String

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor object: String

      attr_accessor resulting_ledger_account_balances: ModernTreasury::LedgerBalances?

      attr_accessor status: ModernTreasury::Models::LedgerEntry::status

      attr_accessor updated_at: Time

      def initialize: (
        id: String,
        amount: Integer,
        created_at: Time,
        direction: ModernTreasury::Models::transaction_direction,
        discarded_at: Time?,
        ledger_account_currency: String,
        ledger_account_currency_exponent: Integer,
        ledger_account_id: String,
        ledger_account_lock_version: Integer?,
        ledger_transaction_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        resulting_ledger_account_balances: ModernTreasury::LedgerBalances?,
        status: ModernTreasury::Models::LedgerEntry::status,
        updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        amount: Integer,
        created_at: Time,
        direction: ModernTreasury::Models::transaction_direction,
        discarded_at: Time?,
        ledger_account_currency: String,
        ledger_account_currency_exponent: Integer,
        ledger_account_id: String,
        ledger_account_lock_version: Integer?,
        ledger_transaction_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        resulting_ledger_account_balances: ModernTreasury::LedgerBalances?,
        status: ModernTreasury::Models::LedgerEntry::status,
        updated_at: Time
      }

      type status = :archived | :pending | :posted

      module Status
        extend ModernTreasury::Internal::Type::Enum

        ARCHIVED: :archived
        PENDING: :pending
        POSTED: :posted

        def self?.values: -> ::Array[ModernTreasury::Models::LedgerEntry::status]
      end
    end
  end
end
