module ModernTreasury
  module Models
    type ledger_entry =
      {
        id: String,
        amount: Integer,
        created_at: Time,
        direction: ModernTreasury::Models::transaction_direction,
        discarded_at: Time?,
        ledger_account_currency: String,
        ledger_account_currency_exponent: Integer,
        ledger_account_id: String,
        ledger_account_lock_version: Integer?,
        ledger_transaction_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        resulting_ledger_account_balances: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances?,
        status: ModernTreasury::LedgerEntry::status,
        updated_at: Time
      }

    class LedgerEntry < ModernTreasury::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor amount: Integer

      attr_accessor created_at: Time

      attr_accessor direction: ModernTreasury::Models::transaction_direction

      attr_accessor discarded_at: Time?

      attr_accessor ledger_account_currency: String

      attr_accessor ledger_account_currency_exponent: Integer

      attr_accessor ledger_account_id: String

      attr_accessor ledger_account_lock_version: Integer?

      attr_accessor ledger_transaction_id: String

      attr_accessor live_mode: bool

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor object: String

      attr_accessor resulting_ledger_account_balances: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances?

      attr_accessor status: ModernTreasury::LedgerEntry::status

      attr_accessor updated_at: Time

      def initialize: (
        id: String,
        amount: Integer,
        created_at: Time,
        direction: ModernTreasury::Models::transaction_direction,
        discarded_at: Time?,
        ledger_account_currency: String,
        ledger_account_currency_exponent: Integer,
        ledger_account_id: String,
        ledger_account_lock_version: Integer?,
        ledger_transaction_id: String,
        live_mode: bool,
        metadata: ::Hash[Symbol, String],
        object: String,
        resulting_ledger_account_balances: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances?,
        status: ModernTreasury::LedgerEntry::status,
        updated_at: Time
      ) -> void

      type resulting_ledger_account_balances =
        {
          available_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::AvailableBalance,
          pending_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::PendingBalance,
          posted_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::PostedBalance
        }

      class ResultingLedgerAccountBalances < ModernTreasury::Internal::Type::BaseModel
        attr_accessor available_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::AvailableBalance

        attr_accessor pending_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::PendingBalance

        attr_accessor posted_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::PostedBalance

        def initialize: (
          available_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::AvailableBalance,
          pending_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::PendingBalance,
          posted_balance: ModernTreasury::LedgerEntry::ResultingLedgerAccountBalances::PostedBalance
        ) -> void

        type available_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class AvailableBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void
        end

        type pending_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class PendingBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void
        end

        type posted_balance =
          {
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          }

        class PostedBalance < ModernTreasury::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor credits: Integer

          attr_accessor currency: String

          attr_accessor currency_exponent: Integer

          attr_accessor debits: Integer

          def initialize: (
            amount: Integer,
            credits: Integer,
            currency: String,
            currency_exponent: Integer,
            debits: Integer
          ) -> void
        end
      end

      type status = :archived | :pending | :posted

      module Status
        extend ModernTreasury::Internal::Type::Enum

        ARCHIVED: :archived
        PENDING: :pending
        POSTED: :posted

        def self?.values: -> ::Array[ModernTreasury::LedgerEntry::status]
      end
    end
  end
end
