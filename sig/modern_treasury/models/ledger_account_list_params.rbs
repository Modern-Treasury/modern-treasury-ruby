module ModernTreasury
  module Models
    type ledger_account_list_params =
      {
        id: ::Array[String],
        after_cursor: String?,
        available_balance_amount: ModernTreasury::Models::LedgerAccountListParams::AvailableBalanceAmount,
        balances: ModernTreasury::Models::LedgerAccountListParams::Balances,
        created_at: ::Hash[Symbol, Time],
        currency: String,
        ledger_account_category_id: String,
        ledger_id: String,
        metadata: ::Hash[Symbol, String],
        name: ::Array[String],
        pending_balance_amount: ModernTreasury::Models::LedgerAccountListParams::PendingBalanceAmount,
        per_page: Integer,
        posted_balance_amount: ModernTreasury::Models::LedgerAccountListParams::PostedBalanceAmount,
        updated_at: ::Hash[Symbol, Time]
      }
      & ModernTreasury::request_parameters

    class LedgerAccountListParams < ModernTreasury::BaseModel
      extend ModernTreasury::RequestParameters::Converter
      include ModernTreasury::RequestParameters

      attr_reader id: ::Array[String]?

      def id=: (::Array[String]) -> ::Array[String]

      attr_accessor after_cursor: String?

      attr_reader available_balance_amount: ModernTreasury::Models::LedgerAccountListParams::AvailableBalanceAmount?

      def available_balance_amount=: (
        ModernTreasury::Models::LedgerAccountListParams::AvailableBalanceAmount
      ) -> ModernTreasury::Models::LedgerAccountListParams::AvailableBalanceAmount

      attr_reader balances: ModernTreasury::Models::LedgerAccountListParams::Balances?

      def balances=: (
        ModernTreasury::Models::LedgerAccountListParams::Balances
      ) -> ModernTreasury::Models::LedgerAccountListParams::Balances

      attr_reader created_at: ::Hash[Symbol, Time]?

      def created_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      attr_reader currency: String?

      def currency=: (String) -> String

      attr_reader ledger_account_category_id: String?

      def ledger_account_category_id=: (String) -> String

      attr_reader ledger_id: String?

      def ledger_id=: (String) -> String

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader name: ::Array[String]?

      def name=: (::Array[String]) -> ::Array[String]

      attr_reader pending_balance_amount: ModernTreasury::Models::LedgerAccountListParams::PendingBalanceAmount?

      def pending_balance_amount=: (
        ModernTreasury::Models::LedgerAccountListParams::PendingBalanceAmount
      ) -> ModernTreasury::Models::LedgerAccountListParams::PendingBalanceAmount

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> Integer

      attr_reader posted_balance_amount: ModernTreasury::Models::LedgerAccountListParams::PostedBalanceAmount?

      def posted_balance_amount=: (
        ModernTreasury::Models::LedgerAccountListParams::PostedBalanceAmount
      ) -> ModernTreasury::Models::LedgerAccountListParams::PostedBalanceAmount

      attr_reader updated_at: ::Hash[Symbol, Time]?

      def updated_at=: (::Hash[Symbol, Time]) -> ::Hash[Symbol, Time]

      def initialize: (
        ?id: ::Array[String],
        ?after_cursor: String?,
        ?available_balance_amount: ModernTreasury::Models::LedgerAccountListParams::AvailableBalanceAmount,
        ?balances: ModernTreasury::Models::LedgerAccountListParams::Balances,
        ?created_at: ::Hash[Symbol, Time],
        ?currency: String,
        ?ledger_account_category_id: String,
        ?ledger_id: String,
        ?metadata: ::Hash[Symbol, String],
        ?name: ::Array[String],
        ?pending_balance_amount: ModernTreasury::Models::LedgerAccountListParams::PendingBalanceAmount,
        ?per_page: Integer,
        ?posted_balance_amount: ModernTreasury::Models::LedgerAccountListParams::PostedBalanceAmount,
        ?updated_at: ::Hash[Symbol, Time],
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> ModernTreasury::Models::ledger_account_list_params

      type available_balance_amount =
        {
          eq: Integer,
          gt: Integer,
          gte: Integer,
          lt: Integer,
          lte: Integer,
          not_eq: Integer
        }

      class AvailableBalanceAmount < ModernTreasury::BaseModel
        attr_reader eq: Integer?

        def eq=: (Integer) -> Integer

        attr_reader gt: Integer?

        def gt=: (Integer) -> Integer

        attr_reader gte: Integer?

        def gte=: (Integer) -> Integer

        attr_reader lt: Integer?

        def lt=: (Integer) -> Integer

        attr_reader lte: Integer?

        def lte=: (Integer) -> Integer

        attr_reader not_eq: Integer?

        def not_eq=: (Integer) -> Integer

        def initialize: (
          ?eq: Integer,
          ?gt: Integer,
          ?gte: Integer,
          ?lt: Integer,
          ?lte: Integer,
          ?not_eq: Integer
        ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerAccountListParams::available_balance_amount
      end

      type balances =
        {
          as_of_date: Date,
          effective_at: Time,
          effective_at_lower_bound: Time,
          effective_at_upper_bound: Time
        }

      class Balances < ModernTreasury::BaseModel
        attr_reader as_of_date: Date?

        def as_of_date=: (Date) -> Date

        attr_reader effective_at: Time?

        def effective_at=: (Time) -> Time

        attr_reader effective_at_lower_bound: Time?

        def effective_at_lower_bound=: (Time) -> Time

        attr_reader effective_at_upper_bound: Time?

        def effective_at_upper_bound=: (Time) -> Time

        def initialize: (
          ?as_of_date: Date,
          ?effective_at: Time,
          ?effective_at_lower_bound: Time,
          ?effective_at_upper_bound: Time
        ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerAccountListParams::balances
      end

      type pending_balance_amount =
        {
          eq: Integer,
          gt: Integer,
          gte: Integer,
          lt: Integer,
          lte: Integer,
          not_eq: Integer
        }

      class PendingBalanceAmount < ModernTreasury::BaseModel
        attr_reader eq: Integer?

        def eq=: (Integer) -> Integer

        attr_reader gt: Integer?

        def gt=: (Integer) -> Integer

        attr_reader gte: Integer?

        def gte=: (Integer) -> Integer

        attr_reader lt: Integer?

        def lt=: (Integer) -> Integer

        attr_reader lte: Integer?

        def lte=: (Integer) -> Integer

        attr_reader not_eq: Integer?

        def not_eq=: (Integer) -> Integer

        def initialize: (
          ?eq: Integer,
          ?gt: Integer,
          ?gte: Integer,
          ?lt: Integer,
          ?lte: Integer,
          ?not_eq: Integer
        ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerAccountListParams::pending_balance_amount
      end

      type posted_balance_amount =
        {
          eq: Integer,
          gt: Integer,
          gte: Integer,
          lt: Integer,
          lte: Integer,
          not_eq: Integer
        }

      class PostedBalanceAmount < ModernTreasury::BaseModel
        attr_reader eq: Integer?

        def eq=: (Integer) -> Integer

        attr_reader gt: Integer?

        def gt=: (Integer) -> Integer

        attr_reader gte: Integer?

        def gte=: (Integer) -> Integer

        attr_reader lt: Integer?

        def lt=: (Integer) -> Integer

        attr_reader lte: Integer?

        def lte=: (Integer) -> Integer

        attr_reader not_eq: Integer?

        def not_eq=: (Integer) -> Integer

        def initialize: (
          ?eq: Integer,
          ?gt: Integer,
          ?gte: Integer,
          ?lt: Integer,
          ?lte: Integer,
          ?not_eq: Integer
        ) -> void

        def to_hash: -> ModernTreasury::Models::LedgerAccountListParams::posted_balance_amount
      end
    end
  end
end
