module ModernTreasury
  module Models
    type expected_payment_list_params =
      {
        after_cursor: String?,
        counterparty_id: String,
        created_at_lower_bound: Time,
        created_at_upper_bound: Time,
        direction: ModernTreasury::Models::transaction_direction,
        external_id: String,
        internal_account_id: String,
        metadata: ::Hash[Symbol, String],
        per_page: Integer,
        status: ModernTreasury::Models::ExpectedPaymentListParams::status,
        type: ModernTreasury::Models::ExpectedPaymentListParams::type_,
        updated_at_lower_bound: Time,
        updated_at_upper_bound: Time
      }
      & ModernTreasury::Internal::Type::request_parameters

    class ExpectedPaymentListParams < ModernTreasury::Internal::Type::BaseModel
      extend ModernTreasury::Internal::Type::RequestParameters::Converter
      include ModernTreasury::Internal::Type::RequestParameters

      attr_accessor after_cursor: String?

      attr_reader counterparty_id: String?

      def counterparty_id=: (String) -> String

      attr_reader created_at_lower_bound: Time?

      def created_at_lower_bound=: (Time) -> Time

      attr_reader created_at_upper_bound: Time?

      def created_at_upper_bound=: (Time) -> Time

      attr_reader direction: ModernTreasury::Models::transaction_direction?

      def direction=: (
        ModernTreasury::Models::transaction_direction
      ) -> ModernTreasury::Models::transaction_direction

      attr_reader external_id: String?

      def external_id=: (String) -> String

      attr_reader internal_account_id: String?

      def internal_account_id=: (String) -> String

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader per_page: Integer?

      def per_page=: (Integer) -> Integer

      attr_reader status: ModernTreasury::Models::ExpectedPaymentListParams::status?

      def status=: (
        ModernTreasury::Models::ExpectedPaymentListParams::status
      ) -> ModernTreasury::Models::ExpectedPaymentListParams::status

      attr_reader type: ModernTreasury::Models::ExpectedPaymentListParams::type_?

      def type=: (
        ModernTreasury::Models::ExpectedPaymentListParams::type_
      ) -> ModernTreasury::Models::ExpectedPaymentListParams::type_

      attr_reader updated_at_lower_bound: Time?

      def updated_at_lower_bound=: (Time) -> Time

      attr_reader updated_at_upper_bound: Time?

      def updated_at_upper_bound=: (Time) -> Time

      def initialize: (
        ?after_cursor: String?,
        ?counterparty_id: String,
        ?created_at_lower_bound: Time,
        ?created_at_upper_bound: Time,
        ?direction: ModernTreasury::Models::transaction_direction,
        ?external_id: String,
        ?internal_account_id: String,
        ?metadata: ::Hash[Symbol, String],
        ?per_page: Integer,
        ?status: ModernTreasury::Models::ExpectedPaymentListParams::status,
        ?type: ModernTreasury::Models::ExpectedPaymentListParams::type_,
        ?updated_at_lower_bound: Time,
        ?updated_at_upper_bound: Time,
        ?request_options: ModernTreasury::request_opts
      ) -> void

      def to_hash: -> {
        after_cursor: String?,
        counterparty_id: String,
        created_at_lower_bound: Time,
        created_at_upper_bound: Time,
        direction: ModernTreasury::Models::transaction_direction,
        external_id: String,
        internal_account_id: String,
        metadata: ::Hash[Symbol, String],
        per_page: Integer,
        status: ModernTreasury::Models::ExpectedPaymentListParams::status,
        type: ModernTreasury::Models::ExpectedPaymentListParams::type_,
        updated_at_lower_bound: Time,
        updated_at_upper_bound: Time,
        request_options: ModernTreasury::RequestOptions
      }

      type status =
        :archived | :partially_reconciled | :reconciled | :unreconciled

      module Status
        extend ModernTreasury::Internal::Type::Enum

        ARCHIVED: :archived
        PARTIALLY_RECONCILED: :partially_reconciled
        RECONCILED: :reconciled
        UNRECONCILED: :unreconciled

        def self?.values: -> ::Array[ModernTreasury::Models::ExpectedPaymentListParams::status]
      end

      type type_ =
        :ach
        | :au_becs
        | :bacs
        | :base
        | :book
        | :card
        | :chats
        | :check
        | :cross_border
        | :dk_nets
        | :eft
        | :ethereum
        | :gb_fps
        | :hu_ics
        | :interac
        | :masav
        | :mx_ccen
        | :neft
        | :nics
        | :nz_becs
        | :pl_elixir
        | :polygon
        | :provxchange
        | :ro_sent
        | :rtp
        | :se_bankgirot
        | :sen
        | :sepa
        | :sg_giro
        | :sic
        | :signet
        | :sknbi
        | :solana
        | :wire
        | :zengin

      module Type
        extend ModernTreasury::Internal::Type::Enum

        ACH: :ach
        AU_BECS: :au_becs
        BACS: :bacs
        BASE: :base
        BOOK: :book
        CARD: :card
        CHATS: :chats
        CHECK: :check
        CROSS_BORDER: :cross_border
        DK_NETS: :dk_nets
        EFT: :eft
        ETHEREUM: :ethereum
        GB_FPS: :gb_fps
        HU_ICS: :hu_ics
        INTERAC: :interac
        MASAV: :masav
        MX_CCEN: :mx_ccen
        NEFT: :neft
        NICS: :nics
        NZ_BECS: :nz_becs
        PL_ELIXIR: :pl_elixir
        POLYGON: :polygon
        PROVXCHANGE: :provxchange
        RO_SENT: :ro_sent
        RTP: :rtp
        SE_BANKGIROT: :se_bankgirot
        SEN: :sen
        SEPA: :sepa
        SG_GIRO: :sg_giro
        SIC: :sic
        SIGNET: :signet
        SKNBI: :sknbi
        SOLANA: :solana
        WIRE: :wire
        ZENGIN: :zengin

        def self?.values: -> ::Array[ModernTreasury::Models::ExpectedPaymentListParams::type_]
      end
    end
  end
end
